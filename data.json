[
{"results": [{"label": "api_overhead_benchmark_l0 SubmitKernel out of order", "value": 11.826, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.862,11.826,3.31%,11.074,87.967,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.3926322, "name": "api_overhead_benchmark_l0 SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_l0 SubmitKernel in order", "value": 11.834, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.879,11.834,2.80%,11.132,67.621,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.33261199999999996, "name": "api_overhead_benchmark_l0 SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel out of order", "value": 21.395, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.540,21.395,7.77%,20.437,524.324,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1.6736579999999996, "name": "api_overhead_benchmark_sycl SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel in order", "value": 21.613, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.732,21.613,2.63%,20.639,113.426,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.5715515999999999, "name": "api_overhead_benchmark_sycl SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "value": 205.703, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),205.573,205.703,3.39%,198.811,826.284,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 6.9689247000000005, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "value": 85.26, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Host", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),85.961,85.260,1.78%,84.434,107.672,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1.5301058, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "value": 5.197, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.281,5.197,20.09%,4.748,102.973,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1.0609529, "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."}, {"label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "value": 2.804, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=StreamMemory", "--csv", "--noHeaders", "--iterations=10000", "--type=Triad", "--size=10240", "--memoryPlacement=Device", "--useEvents=0", "--contents=Zeros", "--multiplier=1", "--vectorSize=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.852,2.804,5.50%,0.478,3.236,[CPU],[GB/s]\n", "passed": true, "unit": "GB/s", "explicit_group": "", "stddev": 0.15686, "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "lower_is_better": false, "suite": "Compute Benchmarks", "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "value": 1.9, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=0", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Device", "--dst=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.913,1.900,8.59%,1.694,35.871,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.16432670000000002, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "value": 1.401, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=1", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Host", "--dst=Host", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.416,1.401,30.77%,1.349,125.239,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.43570319999999996, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "miscellaneous_benchmark_sycl VectorSum", "value": 861.253, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl", "--test=VectorSum", "--csv", "--noHeaders", "--iterations=1000", "--numberOfElementsX=512", "--numberOfElementsY=256", "--numberOfElementsZ=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.953,861.253,0.37%,821.339,871.393,[GPU],bw [GB/s]\n", "passed": true, "unit": "bw GB/s", "explicit_group": "", "stddev": 3.1855261, "name": "miscellaneous_benchmark_sycl VectorSum", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "value": 26.553, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.568,26.553,6.20%,24.913,150.353,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.647216, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5", "value": 30.728, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.870,30.728,4.77%,29.224,148.091,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.4724989999999998, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "value": 267.823, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),269.159,267.823,2.62%,259.580,790.918,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 7.0519658000000005, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100", "value": 255.043, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),255.133,255.043,1.58%,253.713,632.418,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.031101400000001, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "value": 25.824, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.900,25.824,5.15%,24.057,139.234,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.33385, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "value": 28.586, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.646,28.586,3.85%,27.748,120.866,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.102871, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "value": 252.938, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),253.096,252.938,1.92%,245.347,669.008,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.859443199999999, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "value": 251.477, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.557,251.477,1.03%,250.410,489.736,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 2.5910371, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "value": 5.317, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.357,5.317,16.95%,4.577,87.098,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.9080115, "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "value": 4.187, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.211,4.187,12.53%,3.655,50.733,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.5276383, "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "value": 1.577, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.591,1.577,6.45%,1.348,2.217,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.1026195, "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "value": 0.982, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.973,0.982,1.47%,0.937,1.028,[GPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.0143031, "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0", "value": 13.222, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=0", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.915,13.222,33.33%,12.303,245.664,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 4.6378695, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1", "value": 14.593, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=1", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.170,14.593,26.82%,13.611,160.073,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 4.068594, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0", "value": 77.427, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=0", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.954,77.427,5.14%,76.301,208.152,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 4.0068356, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1", "value": 80.18, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=1", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.618,80.180,4.45%,79.150,156.501,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 3.587501, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0", "value": 13.786, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=0", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.635,13.786,4.63%,12.572,42.495,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 0.6313005, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1", "value": 14.984, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=1", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.937,14.984,6.23%,14.007,94.488,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 0.9305751, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0", "value": 78.193, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=0", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.215,78.193,0.64%,77.324,97.735,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 0.500576, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1", "value": 80.095, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=1", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.139,80.095,0.70%,79.335,112.992,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 0.5609729999999999, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "value": 95034.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.197,14.043,212.33%,13.245,9528.629,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 361.29206800000003, "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order", "value": 13.964, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.128,13.964,223.17%,13.228,9969.027,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 31.5294576, "name": "api_overhead_benchmark_ur SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "value": 95034.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.070,13.938,151.03%,13.209,6710.870,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 361.2920756, "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order", "value": 14.096, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.241,14.096,162.68%,13.343,7314.911,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 23.1672588, "name": "api_overhead_benchmark_ur SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "value": 97528.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98501.177,97528.000,297.29%,96454.000,92701757.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.363,20.325,4005.94%,18.136,295984.690,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 292834.1491033, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "value": 20.353, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98487.641,97528.000,302.13%,96736.000,94194907.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.399,20.353,4088.30%,17.719,302536.612,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 956.6213170000001, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "value": 5445.243, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5441.134,5445.243,0.20%,5416.400,5455.312,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 10.882268, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "value": 11135.029, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11288.296,11135.029,6.46%,10457.580,12912.101,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 729.2239216, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "value": 17738.264, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18068.333,17738.264,7.59%,15806.282,23345.793,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1371.3864746999998, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "value": 764.562, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),754.864,764.562,7.21%,494.463,1489.514,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 54.4256944, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "value": 6005.094, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),5999.639,6005.094,1.85%,5821.893,6181.635,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 110.99332150000002, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "value": 6509.595, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6544.620,6509.595,3.04%,6175.566,6939.111,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 198.956448, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "value": 17787.691, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18095.450,17787.691,7.46%,15588.591,23364.285,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1349.92057, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "value": 769.466, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),760.209,769.466,7.03%,536.216,1467.610,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 53.442692699999995, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 29750.974, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=1", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29711.601,29750.974,0.42%,29485.998,29913.508,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 124.78872419999999, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 87303.378, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=4", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),87072.082,87303.378,0.60%,85759.214,87519.559,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 522.432492, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "value": 25.998, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.066,25.998,5.80%,24.436,137.093,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.5118279999999997, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "value": 244.697, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),244.927,244.697,2.11%,240.992,743.357,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 5.167959699999999, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "Velocity-Bench Hashtable", "value": 325.554324, "command": ["/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl", "--no-verify"], "env": {}, "stdout": "hashtable - total time for whole calculation: 0.412274 s\n325.554324 million keys/second\n", "passed": true, "unit": "M keys/sec", "explicit_group": "", "stddev": 2.2038719795495854, "name": "Velocity-Bench Hashtable", "lower_is_better": false, "suite": "Velocity Bench", "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."}, {"label": "Velocity-Bench Bitcracker", "value": 35.3428, "command": ["/home/test-user/ur_bench_workdir/bitcracker/bitcracker", "-f", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt", "-d", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt", "-b", "60000"], "env": {}, "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.0039814 s\nbitcracker - total time for whole calculation: 35.3428 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.04749550855958351, "name": "Velocity-Bench Bitcracker", "lower_is_better": true, "suite": "Velocity Bench", "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."}, {"label": "Velocity-Bench CudaSift", "value": 206.794, "command": ["/home/test-user/ur_bench_workdir/cudaSift/cudaSift"], "env": {}, "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1104 1271 29.9756% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1258 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1186 1260 32.202% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1263 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1260 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1268 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1254 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1249 1285 33.9126% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1129 1272 30.6544% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1267 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1048 1270 28.4551% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1262 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1269 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1254 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1268 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1128 1263 30.6272% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1135 1259 30.8173% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1270 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1131 1265 30.7087% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1267 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1141 1272 30.9802% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1278 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1267 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1273 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1259 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1136 1266 30.8444% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1205 1277 32.7179% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1269 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1266 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1264 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1261 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1273 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1269 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1265 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1259 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1272 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1216 1258 33.0166% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1263 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1251 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1276 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1252 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1262 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.794 ms\n\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 0.10488247390929982, "name": "Velocity-Bench CudaSift", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."}, {"label": "Velocity-Bench Easywave", "value": 238, "command": ["/home/test-user/ur_bench_workdir/easywave/easyWave_sycl", "-grid", "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd", "-source", "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt", "-time", "120"], "env": {}, "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 2.0, "name": "Velocity-Bench Easywave", "lower_is_better": true, "suite": "Velocity Bench", "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."}, {"label": "Velocity-Bench QuickSilver", "value": 116.74, "command": ["/home/test-user/ur_bench_workdir/QuickSilver/qs", "-i", "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"], "env": {"QS_DEVICE": "GPU"}, "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.639360e-01   6.117190e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.532500e-01   7.537440e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.417720e-01   7.696290e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.728310e-01   8.233900e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.438430e-01   8.097760e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.468290e-01   7.888600e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.439030e-01   7.879700e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.482590e-01   8.136590e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.436300e-01   7.923440e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.462640e-01   7.657730e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.122e+07    1.122e+07    1.122e+07    0.000e+00       100.00\ncycleInit                           10    3.505e+06    3.505e+06    3.505e+06    0.000e+00       100.00\ncycleTracking                       10    7.717e+06    7.717e+06    7.717e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.989e+06    4.989e+06    4.989e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.900e+05    1.900e+05    1.900e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.320e+02    4.320e+02    4.320e+02    0.000e+00       100.00\nFigure Of Merit                 116.74 [Num Mega Segments / Cycle Tracking Time]\n", "passed": true, "unit": "MMS/CTT", "explicit_group": "", "stddev": 0.14011899704655684, "name": "Velocity-Bench QuickSilver", "lower_is_better": false, "suite": "Velocity Bench", "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."}, {"label": "Velocity-Bench Sobel Filter", "value": 729.344, "command": ["/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter", "-i", "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png", "-n", "5"], "env": {"OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"}, "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47474 s\nsobelfilter - total time for whole calculation: 0.729344 s\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 6.456440482185232, "name": "Velocity-Bench Sobel Filter", "lower_is_better": true, "suite": "Velocity Bench", "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."}, {"label": "Velocity-Bench dl-cifar", "value": 17.5153, "command": ["/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"], "env": {}, "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.1e-05 s\ndl-cifar - total time for whole calculation: 17.5153 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.11155823591290771, "name": "Velocity-Bench dl-cifar", "lower_is_better": true, "suite": "Velocity Bench", "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."}, {"label": "Velocity-Bench dl-mnist", "value": 2.66, "command": ["/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl", "-conv_algo", "ONEDNN_AUTO"], "env": {"NEOReadDebugKeys": "1", "DisableScratchPages": "0"}, "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.66 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.03511884584284239, "name": "Velocity-Bench dl-mnist", "lower_is_better": true, "suite": "Velocity Bench", "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."}, {"label": "Velocity-Bench svm", "value": 0.15, "command": ["/home/test-user/ur_bench_workdir/svm/svm_sycl", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"], "env": {}, "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.074357 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0671 s\nProcessing elapsed time : 0.0804 s\nStoring    elapsed time : 0.0026 s\nTotal      elapsed time : 0.1500 s\nResult's are correct: 0.0551 \n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.0005941380311005125, "name": "Velocity-Bench svm", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."}, {"label": "llama.cpp Prompt Processing Batched 128", "value": 887.045286, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:15:23Z\",\"577206788\",\"2646334\",\"887.045286\",\"4.044225\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:15:26Z\",\"2068481869\",\"2454266\",\"61.881202\",\"0.073317\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:15:37Z\",\"548087742\",\"288147\",\"934.157205\",\"0.491128\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:15:40Z\",\"2067146636\",\"627543\",\"61.921108\",\"0.018793\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:15:50Z\",\"942710524\",\"544854\",\"543.114905\",\"0.313527\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:15:56Z\",\"2066859563\",\"954568\",\"61.929714\",\"0.028529\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 6.111175764963825, "name": "llama.cpp Prompt Processing Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 128", "value": 61.755474, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:52Z\",\"577133338\",\"2019218\",\"887.151995\",\"3.090754\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:56Z\",\"2072693452\",\"2649295\",\"61.755474\",\"0.078797\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:07Z\",\"545110373\",\"1416704\",\"939.264383\",\"2.433737\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:10Z\",\"2071702700\",\"472198\",\"61.784930\",\"0.014084\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:20Z\",\"954517728\",\"913509\",\"536.396926\",\"0.513453\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:26Z\",\"2071161008\",\"444062\",\"61.801088\",\"0.013181\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.19042616684426478, "name": "llama.cpp Text Generation Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 256", "value": 939.264383, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:52Z\",\"577133338\",\"2019218\",\"887.151995\",\"3.090754\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:56Z\",\"2072693452\",\"2649295\",\"61.755474\",\"0.078797\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:07Z\",\"545110373\",\"1416704\",\"939.264383\",\"2.433737\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:10Z\",\"2071702700\",\"472198\",\"61.784930\",\"0.014084\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:20Z\",\"954517728\",\"913509\",\"536.396926\",\"0.513453\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:26Z\",\"2071161008\",\"444062\",\"61.801088\",\"0.013181\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 4.325743019303676, "name": "llama.cpp Prompt Processing Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 256", "value": 61.78493, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:52Z\",\"577133338\",\"2019218\",\"887.151995\",\"3.090754\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:56Z\",\"2072693452\",\"2649295\",\"61.755474\",\"0.078797\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:07Z\",\"545110373\",\"1416704\",\"939.264383\",\"2.433737\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:10Z\",\"2071702700\",\"472198\",\"61.784930\",\"0.014084\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:20Z\",\"954517728\",\"913509\",\"536.396926\",\"0.513453\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:26Z\",\"2071161008\",\"444062\",\"61.801088\",\"0.013181\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.21759188555029468, "name": "llama.cpp Text Generation Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 512", "value": 537.964539, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:07Z\",\"584140565\",\"2503713\",\"876.514177\",\"3.738177\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:11Z\",\"2081066137\",\"2404110\",\"61.507001\",\"0.070939\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:22Z\",\"543088110\",\"797891\",\"942.758414\",\"1.386465\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:25Z\",\"2081467891\",\"448561\",\"61.495066\",\"0.013181\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:35Z\",\"951735918\",\"622118\",\"537.964539\",\"0.350878\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:41Z\",\"2079796349\",\"829040\",\"61.544495\",\"0.024460\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 3.514610511758185, "name": "llama.cpp Prompt Processing Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 512", "value": 61.801088, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:52Z\",\"577133338\",\"2019218\",\"887.151995\",\"3.090754\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:56Z\",\"2072693452\",\"2649295\",\"61.755474\",\"0.078797\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:07Z\",\"545110373\",\"1416704\",\"939.264383\",\"2.433737\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:10Z\",\"2071702700\",\"472198\",\"61.784930\",\"0.014084\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:20Z\",\"954517728\",\"913509\",\"536.396926\",\"0.513453\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:26Z\",\"2071161008\",\"444062\",\"61.801088\",\"0.013181\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.19611998601451439, "name": "llama.cpp Text Generation Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}], "name": "Baseline_PVC_L0v2", "hostname": "gkdse-pre-dnp-06", "git_hash": "5323386", "github_repo": "intel/llvm", "date": "2025-03-13T17:17:37.174045+00:00"},
{"results": [{"label": "api_overhead_benchmark_l0 SubmitKernel out of order", "value": 11.917, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.951,11.917,3.19%,11.015,64.870,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.3812369, "name": "api_overhead_benchmark_l0 SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_l0 SubmitKernel in order", "value": 11.864, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.913,11.864,15.70%,11.048,589.872,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1.870341, "name": "api_overhead_benchmark_l0 SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel out of order", "value": 23.324, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.487,23.324,3.10%,22.532,177.099,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.728097, "name": "api_overhead_benchmark_sycl SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel in order", "value": 24.278, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.445,24.278,2.28%,23.458,63.186,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.5573459999999999, "name": "api_overhead_benchmark_sycl SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "value": 259.694, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),261.192,259.694,2.54%,256.158,806.585,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 6.6342768, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "value": 134.042, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Host", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.972,134.042,1.73%,131.926,181.525,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 2.3350156, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "value": 5.756, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.882,5.756,15.13%,5.384,81.007,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.8899466, "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."}, {"label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "value": 3.123, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=StreamMemory", "--csv", "--noHeaders", "--iterations=10000", "--type=Triad", "--size=10240", "--memoryPlacement=Device", "--useEvents=0", "--contents=Zeros", "--multiplier=1", "--vectorSize=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.108,3.123,3.09%,0.839,3.328,[CPU],[GB/s]\n", "passed": true, "unit": "GB/s", "explicit_group": "", "stddev": 0.09603719999999999, "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "lower_is_better": false, "suite": "Compute Benchmarks", "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "value": 2.147, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=0", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Device", "--dst=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.163,2.147,5.64%,1.978,17.046,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.12199319999999998, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "value": 1.703, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=1", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Host", "--dst=Host", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.723,1.703,10.16%,1.618,46.130,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.1750568, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "miscellaneous_benchmark_sycl VectorSum", "value": 860.664, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl", "--test=VectorSum", "--csv", "--noHeaders", "--iterations=1000", "--numberOfElementsX=512", "--numberOfElementsY=256", "--numberOfElementsZ=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.023,860.664,0.50%,811.016,872.299,[GPU],bw [GB/s]\n", "passed": true, "unit": "bw GB/s", "explicit_group": "", "stddev": 4.300115, "name": "miscellaneous_benchmark_sycl VectorSum", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "value": 29.389, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.532,29.389,2.28%,27.904,51.307,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 0.6733296, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "value": 304.042, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),305.771,304.042,2.47%,297.300,835.602,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 7.552543700000001, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "value": 26.138, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.159,26.138,5.08%,24.268,136.406,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.3288772, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "value": 28.899, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.967,28.899,4.90%,28.024,148.849,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.419383, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "value": 245.529, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),245.659,245.529,1.91%,239.106,654.901,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.6920869, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "value": 243.537, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),243.599,243.537,1.37%,240.873,555.216,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 3.3373063, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "value": 6.034, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),6.062,6.034,12.71%,4.974,72.910,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.7704802000000002, "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "value": 4.313, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.341,4.313,11.13%,3.801,44.698,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.48315330000000006, "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "value": 0.662, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.662,0.662,9.79%,0.525,1.280,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.0648098, "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "value": 1.097, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.085,1.097,2.10%,1.005,1.142,[GPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.022785, "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0", "value": 6.623, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=0", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.047,6.623,30.61%,6.133,153.918,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 2.1570867, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1", "value": 31.88, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=1", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),32.047,31.880,5.68%,30.189,127.697,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 1.8202695999999998, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0", "value": 6.558, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=0", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.871,6.558,18.61%,6.068,53.608,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 1.2786931, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1", "value": 43.251, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=1", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.411,43.251,3.82%,41.640,156.916,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 1.6583002, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0", "value": 7.002, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=0", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.071,7.002,5.58%,6.758,30.716,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 0.3945618, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1", "value": 38.802, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=1", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),38.804,38.802,2.78%,36.403,68.795,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 1.0787512, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0", "value": 7.215, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=0", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.252,7.215,4.58%,6.758,29.151,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 0.3321416, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1", "value": 114.059, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=1", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),114.130,114.059,0.99%,111.991,142.608,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 1.1298869999999999, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "value": 107454.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.794,16.626,152.39%,15.874,8108.612,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 6483.265934399999, "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order", "value": 16.626, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.794,16.626,152.39%,15.874,8108.612,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 25.592376599999998, "name": "api_overhead_benchmark_ur SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "value": 113308.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.335,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.232,17.065,125.11%,16.341,6833.758,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 4501.1198995, "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order", "value": 17.397, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.340,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.580,17.397,125.45%,16.699,6990.259,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 22.054109999999998, "name": "api_overhead_benchmark_ur SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "value": 125825.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125935.402,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.097,21.823,90.83%,20.956,6343.104,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 4672.2034142, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "value": 21.593, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125952.822,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.904,21.593,96.68%,20.731,6693.931,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 21.176787200000003, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "value": 6918.635, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6950.458,6918.635,1.23%,6884.760,7137.356,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 85.4906334, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "value": 17865.982, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17922.038,17865.982,7.52%,15387.681,19857.344,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1347.7372575999998, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "value": 50758.729, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50864.931,50758.729,4.92%,42377.527,59494.560,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 2502.5546052, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "value": 1985.201, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2014.000,1985.201,13.68%,1408.882,4906.668,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 275.5152, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "value": 7532.586, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7555.642,7532.586,1.71%,7375.723,7801.838,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 129.2014782, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "value": 17350.969, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16710.525,17350.969,8.58%,13968.808,18405.479,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1433.7630450000001, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "value": 45287.302, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45204.855,45287.302,2.96%,39523.131,48758.799,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1338.0637080000001, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "value": 1401.484, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1515.290,1401.484,31.71%,804.593,5400.416,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 480.49845899999997, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 42445.965, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=1", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42488.612,42445.965,0.37%,42286.173,42769.134,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 157.2078644, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 116216.726, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=4", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116129.303,116216.726,0.52%,115093.010,117083.259,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 603.8723755999999, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "value": 33.337, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.455,33.337,3.52%,31.378,63.243,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.177616, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5", "value": 51.949, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.982,51.949,2.40%,48.516,97.416,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.247568, "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "value": 271.151, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.392,271.151,2.82%,264.462,988.780,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 7.6532544, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100", "value": 312.591, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),313.215,312.591,1.96%,308.771,794.700,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 6.1390139999999995, "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "Velocity-Bench Hashtable", "value": 312.596501, "command": ["/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl", "--no-verify"], "env": {}, "stdout": "hashtable - total time for whole calculation: 0.429364 s\n312.596501 million keys/second\n", "passed": true, "unit": "M keys/sec", "explicit_group": "", "stddev": 4.452448964158814, "name": "Velocity-Bench Hashtable", "lower_is_better": false, "suite": "Velocity Bench", "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."}, {"label": "Velocity-Bench Bitcracker", "value": 35.3597, "command": ["/home/test-user/ur_bench_workdir/bitcracker/bitcracker", "-f", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt", "-d", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt", "-b", "60000"], "env": {}, "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00389723 s\nbitcracker - total time for whole calculation: 35.3597 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.020115251261998063, "name": "Velocity-Bench Bitcracker", "lower_is_better": true, "suite": "Velocity Bench", "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."}, {"label": "Velocity-Bench CudaSift", "value": 206.676, "command": ["/home/test-user/ur_bench_workdir/cudaSift/cudaSift"], "env": {}, "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1278 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1271 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1260 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1139 1267 30.9259% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1075 1263 29.1882% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1257 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1254 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1256 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1086 1255 29.4868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1268 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1255 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1249 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1182 1265 32.0934% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1257 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1258 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1259 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1254 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1094 1274 29.704% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1117 1270 30.3285% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1278 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1156 1256 31.3875% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1271 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1251 1286 33.9669% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1034 1257 28.0749% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1253 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1269 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1240 1275 33.6682% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1113 1263 30.2199% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1260 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1264 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1264 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1176 1270 31.9305% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1136 1275 30.8444% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1093 1267 29.6769% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1114 1265 30.2471% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1048 1265 28.4551% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1270 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1259 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1072 1271 29.1067% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1267 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1102 1255 29.9213% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1266 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.676 ms\n\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 0.13779090439261327, "name": "Velocity-Bench CudaSift", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."}, {"label": "Velocity-Bench Easywave", "value": 240.0, "command": ["/home/test-user/ur_bench_workdir/easywave/easyWave_sycl", "-grid", "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd", "-source", "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt", "-time", "120"], "env": {}, "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 0.5773502691896257, "name": "Velocity-Bench Easywave", "lower_is_better": true, "suite": "Velocity Bench", "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."}, {"label": "Velocity-Bench QuickSilver", "value": 118.4, "command": ["/home/test-user/ur_bench_workdir/QuickSilver/qs", "-i", "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"], "env": {"QS_DEVICE": "GPU"}, "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   4.043160e-01   6.044710e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.844950e-01   7.470580e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.778950e-01   7.623340e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   4.052590e-01   8.161930e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.760390e-01   7.892650e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.773510e-01   7.650020e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.766900e-01   7.765230e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.779110e-01   8.070070e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.760730e-01   7.832110e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.768130e-01   7.578610e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.144e+07    1.144e+07    1.144e+07    0.000e+00       100.00\ncycleInit                           10    3.833e+06    3.833e+06    3.833e+06    0.000e+00       100.00\ncycleTracking                       10    7.609e+06    7.609e+06    7.609e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.991e+06    4.991e+06    4.991e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.973e+05    1.973e+05    1.973e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.160e+02    4.160e+02    4.160e+02    0.000e+00       100.00\nFigure Of Merit                 118.40 [Num Mega Segments / Cycle Tracking Time]\n", "passed": true, "unit": "MMS/CTT", "explicit_group": "", "stddev": 0.35369478367654744, "name": "Velocity-Bench QuickSilver", "lower_is_better": false, "suite": "Velocity Bench", "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."}, {"label": "Velocity-Bench Sobel Filter", "value": 708.964, "command": ["/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter", "-i", "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png", "-n", "5"], "env": {"OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"}, "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.46859 s\nsobelfilter - total time for whole calculation: 0.708964 s\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 10.214251583849977, "name": "Velocity-Bench Sobel Filter", "lower_is_better": true, "suite": "Velocity Bench", "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."}, {"label": "Velocity-Bench dl-cifar", "value": 24.2598, "command": ["/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"], "env": {}, "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.3e-05 s\ndl-cifar - total time for whole calculation: 24.2598 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.08699323728505169, "name": "Velocity-Bench dl-cifar", "lower_is_better": true, "suite": "Velocity Bench", "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."}, {"label": "Velocity-Bench dl-mnist", "value": 2.68, "command": ["/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl", "-conv_algo", "ONEDNN_AUTO"], "env": {"NEOReadDebugKeys": "1", "DisableScratchPages": "0"}, "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.68 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.020000000000000018, "name": "Velocity-Bench dl-mnist", "lower_is_better": true, "suite": "Velocity Bench", "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."}, {"label": "Velocity-Bench svm", "value": 0.1517, "command": ["/home/test-user/ur_bench_workdir/svm/svm_sycl", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"], "env": {}, "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076325 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0668 s\nProcessing elapsed time : 0.0825 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1517 s\nResult's are correct: 0.0551 \n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.0007549834435270764, "name": "Velocity-Bench svm", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."}, {"label": "llama.cpp Prompt Processing Batched 128", "value": 878.489475, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:51:38Z\",\"582827873\",\"2606939\",\"878.489475\",\"3.908916\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:51:42Z\",\"2095998617\",\"2668868\",\"61.068822\",\"0.077655\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:51:53Z\",\"544277748\",\"653027\",\"940.697265\",\"1.127919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:51:56Z\",\"2093449892\",\"758199\",\"61.143099\",\"0.022136\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:07Z\",\"945109493\",\"291619\",\"541.736213\",\"0.165278\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:12Z\",\"2093171940\",\"303916\",\"61.151212\",\"0.008777\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 3.375943996115218, "name": "llama.cpp Prompt Processing Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 128", "value": 61.110767, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:09Z\",\"579290898\",\"2754742\",\"883.855088\",\"4.178592\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:13Z\",\"2094559587\",\"2476197\",\"61.110767\",\"0.072132\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:23Z\",\"543455390\",\"422297\",\"942.120099\",\"0.730446\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:26Z\",\"2095473534\",\"824300\",\"61.084053\",\"0.024004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:37Z\",\"953703000\",\"899820\",\"536.855146\",\"0.505727\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:43Z\",\"2096099729\",\"1208477\",\"61.065813\",\"0.035207\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.02865009787650659, "name": "llama.cpp Text Generation Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 256", "value": 942.120099, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:09Z\",\"579290898\",\"2754742\",\"883.855088\",\"4.178592\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:13Z\",\"2094559587\",\"2476197\",\"61.110767\",\"0.072132\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:23Z\",\"543455390\",\"422297\",\"942.120099\",\"0.730446\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:26Z\",\"2095473534\",\"824300\",\"61.084053\",\"0.024004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:37Z\",\"953703000\",\"899820\",\"536.855146\",\"0.505727\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:43Z\",\"2096099729\",\"1208477\",\"61.065813\",\"0.035207\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 1.136334650131304, "name": "llama.cpp Prompt Processing Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 256", "value": 61.091059, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:24Z\",\"583406498\",\"3013720\",\"877.622825\",\"4.504503\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:27Z\",\"2094120333\",\"2763866\",\"61.123602\",\"0.080548\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:38Z\",\"542980762\",\"315456\",\"942.943422\",\"0.547026\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:41Z\",\"2095233099\",\"603900\",\"61.091059\",\"0.017610\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:52Z\",\"948714399\",\"556079\",\"539.677843\",\"0.316023\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:58Z\",\"2094632667\",\"929550\",\"61.108576\",\"0.027062\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.03225852794740256, "name": "llama.cpp Text Generation Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 512", "value": 539.677843, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:24Z\",\"583406498\",\"3013720\",\"877.622825\",\"4.504503\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:27Z\",\"2094120333\",\"2763866\",\"61.123602\",\"0.080548\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:38Z\",\"542980762\",\"315456\",\"942.943422\",\"0.547026\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:41Z\",\"2095233099\",\"603900\",\"61.091059\",\"0.017610\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:52Z\",\"948714399\",\"556079\",\"539.677843\",\"0.316023\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:58Z\",\"2094632667\",\"929550\",\"61.108576\",\"0.027062\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 2.450487042378804, "name": "llama.cpp Prompt Processing Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 512", "value": 61.108576, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:24Z\",\"583406498\",\"3013720\",\"877.622825\",\"4.504503\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:27Z\",\"2094120333\",\"2763866\",\"61.123602\",\"0.080548\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:38Z\",\"542980762\",\"315456\",\"942.943422\",\"0.547026\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:41Z\",\"2095233099\",\"603900\",\"61.091059\",\"0.017610\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:52Z\",\"948714399\",\"556079\",\"539.677843\",\"0.316023\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:58Z\",\"2094632667\",\"929550\",\"61.108576\",\"0.027062\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.04269951573886334, "name": "llama.cpp Text Generation Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}], "name": "Baseline_PVC_L0", "hostname": "gkdse-pre-dnp-06", "git_hash": "5323386", "github_repo": "intel/llvm", "date": "2025-03-13T16:53:53.913211+00:00"},
{"results": [{"label": "api_overhead_benchmark_l0 SubmitKernel out of order", "value": 11.671, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.706,11.671,2.75%,10.954,49.602,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.321915, "name": "api_overhead_benchmark_l0 SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_l0 SubmitKernel in order", "value": 11.642, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.727,11.642,4.91%,10.961,29.323,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.5757957, "name": "api_overhead_benchmark_l0 SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel out of order", "value": 21.316, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.460,21.316,10.99%,20.387,750.081,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 2.358454, "name": "api_overhead_benchmark_sycl SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel in order", "value": 21.722, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.858,21.722,7.95%,20.803,545.292,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1.737711, "name": "api_overhead_benchmark_sycl SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "value": 202.708, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),203.938,202.708,3.33%,199.471,804.501,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 6.7911354, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "value": 85.152, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Host", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),85.868,85.152,1.97%,84.303,162.470,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1.6915995999999998, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "value": 5.201, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.279,5.201,15.96%,4.817,78.453,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.8425284000000001, "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."}, {"label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "value": 2.82, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=StreamMemory", "--csv", "--noHeaders", "--iterations=10000", "--type=Triad", "--size=10240", "--memoryPlacement=Device", "--useEvents=0", "--contents=Zeros", "--multiplier=1", "--vectorSize=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.809,2.820,3.04%,0.822,3.169,[CPU],[GB/s]\n", "passed": true, "unit": "GB/s", "explicit_group": "", "stddev": 0.0853936, "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "lower_is_better": false, "suite": "Compute Benchmarks", "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "value": 1.901, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=0", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Device", "--dst=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.914,1.901,13.15%,1.711,71.437,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.251691, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "value": 1.4, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=1", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Host", "--dst=Host", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.416,1.400,30.10%,1.344,122.613,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.426216, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "miscellaneous_benchmark_sycl VectorSum", "value": 803.763, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl", "--test=VectorSum", "--csv", "--noHeaders", "--iterations=1000", "--numberOfElementsX=512", "--numberOfElementsY=256", "--numberOfElementsZ=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),803.377,803.763,0.39%,770.304,824.568,[GPU],bw [GB/s]\n", "passed": true, "unit": "bw GB/s", "explicit_group": "", "stddev": 3.1331703, "name": "miscellaneous_benchmark_sycl VectorSum", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "value": 27.154, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),27.176,27.154,5.55%,25.268,154.390,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.508268, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5", "value": 29.962, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.992,29.962,4.32%,28.393,145.218,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.2956544, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "value": 265.586, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),266.727,265.586,3.06%,255.693,778.991,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 8.1618462, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100", "value": 254.342, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),254.442,254.342,1.66%,253.014,651.763,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.2237372, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "value": 25.935, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.944,25.935,5.25%,24.096,144.128,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.3620599999999998, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "value": 28.679, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.739,28.679,4.65%,27.756,136.111,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.3363635000000003, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "value": 246.983, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.146,246.983,1.62%,242.707,615.547,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.0037652, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "value": 248.4, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),248.498,248.400,1.68%,247.577,656.670,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.174766399999999, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "value": 5.28, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.323,5.280,10.67%,4.873,48.525,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.5679641000000001, "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "value": 4.278, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.280,4.278,12.13%,3.737,50.245,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.5191640000000001, "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "value": 1.577, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.576,1.577,6.41%,1.348,2.194,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.10102160000000002, "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "value": 0.96, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.967,0.960,1.73%,0.914,1.005,[GPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.0167291, "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0", "value": 13.19, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=0", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.835,13.190,26.69%,12.364,133.598,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 3.6925615000000005, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1", "value": 14.395, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=1", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.006,14.395,23.78%,13.564,86.934,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 3.5684268, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0", "value": 77.219, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=0", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.732,77.219,4.51%,76.232,161.108,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 3.5057132, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1", "value": 81.317, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=1", "--InOrderQueue=0", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),81.796,81.317,4.70%,77.491,170.731,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 3.844412, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0", "value": 13.841, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=0", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),14.783,13.841,11.49%,12.973,70.983,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 1.6985667, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1", "value": 15.12, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=4", "--MeasureCompletionTime=1", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.057,15.120,3.94%,13.925,45.574,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 4", "stddev": 0.5932457999999999, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0", "value": 80.571, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=0", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),80.576,80.571,0.56%,79.742,99.999,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 0.4512256, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1", "value": 78.859, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SubmitGraph", "--csv", "--noHeaders", "--iterations=10000", "--NumKernels=32", "--MeasureCompletionTime=1", "--InOrderQueue=1", "--Profiling=0", "--KernelExecutionTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.878,78.859,0.63%,78.036,103.594,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitGraph 32", "stddev": 0.4969314, "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "value": 95034.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.184,14.002,247.12%,13.316,11098.181,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 361.2920756, "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order", "value": 14.002, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.184,14.002,247.12%,13.316,11098.181,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 35.0515008, "name": "api_overhead_benchmark_ur SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "value": 95034.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.874,95034.000,0.38%,95034.000,101508.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.170,13.978,164.54%,13.196,7357.169,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 361.2921212, "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order", "value": 13.978, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.874,95034.000,0.38%,95034.000,101508.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.170,13.978,164.54%,13.196,7357.169,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 23.315317999999998, "name": "api_overhead_benchmark_ur SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "value": 97528.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98651.696,97528.000,326.72%,96668.000,102021610.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),24.528,20.829,4545.46%,18.640,352585.298,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 322314.8211712, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "value": 20.317, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98620.601,97528.000,321.89%,96730.000,100483257.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.801,20.317,4430.88%,18.504,333517.711,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1054.5937488, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "value": 5552.283, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5551.155,5552.283,0.13%,5538.107,5561.304,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 7.2165015, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "value": 11226.516, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11150.741,11226.516,3.71%,10662.073,11993.141,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 413.6924911, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "value": 17822.612, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18112.491,17822.612,7.08%,15892.776,23169.751,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1282.3643628000002, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "value": 788.308, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),777.834,788.308,7.08%,537.385,1349.033,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 55.070647199999996, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "value": 5963.265, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),5985.715,5963.265,1.14%,5906.279,6144.171,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 68.237151, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "value": 6433.539, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6400.155,6433.539,1.73%,6105.135,6517.698,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 110.7226815, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "value": 17687.116, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),17993.989,17687.116,7.06%,15830.150,23043.186,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1270.3756234, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "value": 775.357, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),765.165,775.357,6.94%,499.258,1325.633,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 53.102451, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 29688.047, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=1", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29740.803,29688.047,0.39%,29619.450,29927.463,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 115.9891317, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 87524.272, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=4", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),87494.281,87524.272,0.24%,87064.237,87862.433,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 209.98627439999999, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "value": 26.248, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.290,26.248,5.34%,24.504,139.117,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.4038859999999997, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "value": 266.07, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),266.235,266.070,2.07%,259.759,771.682,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 5.5110645, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "Velocity-Bench Hashtable", "value": 318.574291, "command": ["/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl", "--no-verify"], "env": {}, "stdout": "hashtable - total time for whole calculation: 0.421307 s\n318.574291 million keys/second\n", "passed": true, "unit": "M keys/sec", "explicit_group": "", "stddev": 3.05330810825963, "name": "Velocity-Bench Hashtable", "lower_is_better": false, "suite": "Velocity Bench", "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."}, {"label": "Velocity-Bench Bitcracker", "value": 35.3326, "command": ["/home/test-user/ur_bench_workdir/bitcracker/bitcracker", "-f", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt", "-d", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt", "-b", "60000"], "env": {}, "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00392826 s\nbitcracker - total time for whole calculation: 35.3326 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.04174126655161761, "name": "Velocity-Bench Bitcracker", "lower_is_better": true, "suite": "Velocity Bench", "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."}, {"label": "Velocity-Bench CudaSift", "value": 206.498, "command": ["/home/test-user/ur_bench_workdir/cudaSift/cudaSift"], "env": {}, "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1261 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1098 1267 29.8127% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1259 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1270 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1265 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1256 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1268 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1268 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1262 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1269 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1097 1272 29.7855% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1269 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1275 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1271 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1163 1272 31.5775% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1244 1276 33.7768% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1188 1265 32.2563% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1040 1276 28.2379% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1267 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1276 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1215 1263 32.9894% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1127 1262 30.6001% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1116 1258 30.3014% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1267 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1258 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1246 1278 33.8311% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1257 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1254 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1151 1262 31.2517% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1263 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1282 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1260 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1244 1278 33.7768% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1267 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1258 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1255 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1216 1255 33.0166% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1256 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1176 1264 31.9305% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1243 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1259 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1160 1259 31.4961% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.498 ms\n\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 0.0726246055640543, "name": "Velocity-Bench CudaSift", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."}, {"label": "Velocity-Bench Easywave", "value": 237.0, "command": ["/home/test-user/ur_bench_workdir/easywave/easyWave_sycl", "-grid", "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd", "-source", "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt", "-time", "120"], "env": {}, "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 0.0, "name": "Velocity-Bench Easywave", "lower_is_better": true, "suite": "Velocity Bench", "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."}, {"label": "Velocity-Bench QuickSilver", "value": 116.67, "command": ["/home/test-user/ur_bench_workdir/QuickSilver/qs", "-i", "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"], "env": {"QS_DEVICE": "GPU"}, "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.610860e-01   6.132460e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.519650e-01   7.542330e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.388000e-01   7.703110e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.727460e-01   8.249330e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.418000e-01   7.971620e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.463080e-01   7.714030e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.440110e-01   7.837210e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.466910e-01   8.111830e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.435950e-01   8.133760e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.470640e-01   7.817680e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.122e+07    1.122e+07    1.122e+07    0.000e+00       100.00\ncycleInit                           10    3.494e+06    3.494e+06    3.494e+06    0.000e+00       100.00\ncycleTracking                       10    7.721e+06    7.721e+06    7.721e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.979e+06    4.979e+06    4.979e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.966e+05    1.966e+05    1.966e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.360e+02    4.360e+02    4.360e+02    0.000e+00       100.00\nFigure Of Merit                 116.67 [Num Mega Segments / Cycle Tracking Time]\n", "passed": true, "unit": "MMS/CTT", "explicit_group": "", "stddev": 0.030000000000001137, "name": "Velocity-Bench QuickSilver", "lower_is_better": false, "suite": "Velocity Bench", "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."}, {"label": "Velocity-Bench Sobel Filter", "value": 720.737, "command": ["/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter", "-i", "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png", "-n", "5"], "env": {"OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"}, "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47266 s\nsobelfilter - total time for whole calculation: 0.720737 s\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 36.00885737333715, "name": "Velocity-Bench Sobel Filter", "lower_is_better": true, "suite": "Velocity Bench", "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."}, {"label": "Velocity-Bench dl-cifar", "value": 17.6474, "command": ["/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"], "env": {}, "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.9e-05 s\ndl-cifar - total time for whole calculation: 17.6474 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.25357575462439935, "name": "Velocity-Bench dl-cifar", "lower_is_better": true, "suite": "Velocity Bench", "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."}, {"label": "Velocity-Bench dl-mnist", "value": 2.63, "command": ["/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl", "-conv_algo", "ONEDNN_AUTO"], "env": {"NEOReadDebugKeys": "1", "DisableScratchPages": "0"}, "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.63 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.026457513110645845, "name": "Velocity-Bench dl-mnist", "lower_is_better": true, "suite": "Velocity Bench", "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."}, {"label": "Velocity-Bench svm", "value": 0.1494, "command": ["/home/test-user/ur_bench_workdir/svm/svm_sycl", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"], "env": {}, "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073877 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0670 s\nProcessing elapsed time : 0.0801 s\nStoring    elapsed time : 0.0022 s\nTotal      elapsed time : 0.1494 s\nResult's are correct: 0.0551 \n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.0002886751345948131, "name": "Velocity-Bench svm", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."}, {"label": "llama.cpp Prompt Processing Batched 128", "value": 874.625929, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:06Z\",\"585404957\",\"2951887\",\"874.625929\",\"4.384711\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:10Z\",\"2068932183\",\"2239410\",\"61.867721\",\"0.066872\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:20Z\",\"551649808\",\"2480204\",\"928.139988\",\"4.156805\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:23Z\",\"2066436904\",\"364124\",\"61.942372\",\"0.010828\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:34Z\",\"952687464\",\"746732\",\"537.427300\",\"0.421064\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:40Z\",\"2068124408\",\"916820\",\"61.891838\",\"0.027385\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 5.293219512365068, "name": "llama.cpp Prompt Processing Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 128", "value": 61.790099, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:36Z\",\"587358354\",\"2472959\",\"871.711840\",\"3.655896\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:40Z\",\"2071532845\",\"3031841\",\"61.790099\",\"0.090315\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:50Z\",\"539560249\",\"303408\",\"948.921143\",\"0.532109\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:53Z\",\"2067795139\",\"1015664\",\"61.901695\",\"0.030326\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:24:04Z\",\"959204124\",\"319896\",\"533.775901\",\"0.177661\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:24:10Z\",\"2066169912\",\"407704\",\"61.950376\",\"0.012071\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.16414162458377354, "name": "llama.cpp Text Generation Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 256", "value": 941.609969, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:51Z\",\"580523279\",\"3095087\",\"881.982827\",\"4.670060\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:54Z\",\"2079522216\",\"2468358\",\"61.552670\",\"0.072939\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:05Z\",\"543749985\",\"543098\",\"941.609969\",\"0.939569\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:08Z\",\"2078209152\",\"538373\",\"61.591494\",\"0.015895\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:19Z\",\"965821736\",\"410539\",\"530.118606\",\"0.223980\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:25Z\",\"2076081213\",\"682396\",\"61.654626\",\"0.020265\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 10.541584768056005, "name": "llama.cpp Prompt Processing Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 256", "value": 61.901695, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:36Z\",\"587358354\",\"2472959\",\"871.711840\",\"3.655896\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:40Z\",\"2071532845\",\"3031841\",\"61.790099\",\"0.090315\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:50Z\",\"539560249\",\"303408\",\"948.921143\",\"0.532109\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:53Z\",\"2067795139\",\"1015664\",\"61.901695\",\"0.030326\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:24:04Z\",\"959204124\",\"319896\",\"533.775901\",\"0.177661\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:24:10Z\",\"2066169912\",\"407704\",\"61.950376\",\"0.012071\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.19191779907641052, "name": "llama.cpp Text Generation Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 512", "value": 533.775901, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:36Z\",\"587358354\",\"2472959\",\"871.711840\",\"3.655896\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:40Z\",\"2071532845\",\"3031841\",\"61.790099\",\"0.090315\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:50Z\",\"539560249\",\"303408\",\"948.921143\",\"0.532109\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:53Z\",\"2067795139\",\"1015664\",\"61.901695\",\"0.030326\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:24:04Z\",\"959204124\",\"319896\",\"533.775901\",\"0.177661\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:24:10Z\",\"2066169912\",\"407704\",\"61.950376\",\"0.012071\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 3.6543473963636974, "name": "llama.cpp Prompt Processing Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 512", "value": 61.891838, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:06Z\",\"585404957\",\"2951887\",\"874.625929\",\"4.384711\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:10Z\",\"2068932183\",\"2239410\",\"61.867721\",\"0.066872\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:20Z\",\"551649808\",\"2480204\",\"928.139988\",\"4.156805\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:23Z\",\"2066436904\",\"364124\",\"61.942372\",\"0.010828\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:34Z\",\"952687464\",\"746732\",\"537.427300\",\"0.421064\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:40Z\",\"2068124408\",\"916820\",\"61.891838\",\"0.027385\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.15661220306221274, "name": "llama.cpp Text Generation Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}], "name": "Baseline_PVC_L0v2", "hostname": "gkdse-pre-dnp-06", "git_hash": "5323386", "github_repo": "intel/llvm", "date": "2025-03-13T16:24:20.648523+00:00"},
{"results": [{"label": "api_overhead_benchmark_l0 SubmitKernel out of order", "value": 12.104, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.146,12.104,3.65%,11.241,95.634,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.44332900000000003, "name": "api_overhead_benchmark_l0 SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_l0 SubmitKernel in order", "value": 12.214, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.252,12.214,2.57%,11.373,26.810,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.3148764, "name": "api_overhead_benchmark_l0 SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel out of order", "value": 23.406, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.568,23.406,8.84%,22.494,660.481,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 2.0834112, "name": "api_overhead_benchmark_sycl SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel in order", "value": 24.326, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.493,24.326,6.90%,23.416,529.669,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1.690017, "name": "api_overhead_benchmark_sycl SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "value": 258.368, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),259.877,258.368,2.55%,255.078,800.073,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 6.6268635, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "value": 133.66, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Host", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.592,133.660,1.76%,131.581,201.709,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 2.3688192000000003, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "value": 5.778, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.931,5.778,14.37%,5.322,65.035,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.8522847, "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."}, {"label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "value": 3.169, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=StreamMemory", "--csv", "--noHeaders", "--iterations=10000", "--type=Triad", "--size=10240", "--memoryPlacement=Device", "--useEvents=0", "--contents=Zeros", "--multiplier=1", "--vectorSize=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.154,3.169,3.30%,0.399,3.406,[CPU],[GB/s]\n", "passed": true, "unit": "GB/s", "explicit_group": "", "stddev": 0.10408200000000001, "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "lower_is_better": false, "suite": "Compute Benchmarks", "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "value": 2.167, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=0", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Device", "--dst=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.177,2.167,6.26%,1.940,22.235,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.13628020000000002, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "value": 1.71, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=1", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Host", "--dst=Host", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.725,1.710,5.66%,1.606,7.705,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.09763500000000001, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "miscellaneous_benchmark_sycl VectorSum", "value": 856.855, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl", "--test=VectorSum", "--csv", "--noHeaders", "--iterations=1000", "--numberOfElementsX=512", "--numberOfElementsY=256", "--numberOfElementsZ=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),856.329,856.855,0.34%,818.667,865.697,[GPU],bw [GB/s]\n", "passed": true, "unit": "bw GB/s", "explicit_group": "", "stddev": 2.9115186, "name": "miscellaneous_benchmark_sycl VectorSum", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "value": 29.018, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.163,29.018,10.77%,27.171,290.878,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 3.1408550999999996, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "value": 307.808, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),309.584,307.808,2.73%,298.132,850.603,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 8.451643200000001, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "value": 26.311, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.335,26.311,6.00%,24.548,159.449,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.5801, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "value": 28.691, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.740,28.691,5.05%,27.581,151.731,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.4513699999999998, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "value": 248.335, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.548,248.335,1.85%,243.870,670.343,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.5981380000000005, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "value": 248.053, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),248.151,248.053,1.89%,247.146,704.465,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.6900539000000006, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "value": 5.918, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.956,5.918,13.45%,5.229,63.461,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.801082, "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "value": 4.312, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.329,4.312,8.35%,3.734,33.194,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.36147149999999995, "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "value": 0.617, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.621,0.617,10.17%,0.480,1.142,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.0631557, "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "value": 1.028, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.039,1.028,2.35%,0.960,1.120,[GPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.024416499999999997, "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "value": 107454.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.903,16.692,219.99%,16.019,11775.037,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 6483.265934399999, "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order", "value": 16.381, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.548,16.381,143.49%,15.744,7524.600,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 23.744725199999998, "name": "api_overhead_benchmark_ur SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "value": 113308.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.508,17.336,120.25%,16.688,6655.306,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 4501.1199392, "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order", "value": 17.336, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.508,17.336,120.25%,16.688,6655.306,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 21.053369999999997, "name": "api_overhead_benchmark_ur SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "value": 125825.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125964.331,125825.000,3.76%,125520.000,1618115.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.797,21.496,100.91%,20.511,6955.612,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 4736.258845599999, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "value": 21.421, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125963.002,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.726,21.421,103.90%,20.380,7139.055,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 22.573314000000003, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "value": 6896.678, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6905.239,6896.678,0.75%,6848.204,7007.530,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 51.789292499999995, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "value": 18550.951, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18261.312,18550.951,9.17%,15527.721,20587.210,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1674.5623104000001, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "value": 50245.77, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50421.702,50245.770,5.35%,42020.530,59324.564,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 2697.561057, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "value": 2006.904, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2030.766,2006.904,13.46%,1385.089,4845.018,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 273.3411036, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "value": 7540.077, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7549.187,7540.077,2.04%,7291.367,7807.063,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 154.0034148, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "value": 16869.864, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16901.759,16869.864,2.62%,15967.592,17725.804,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 442.8260858, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "value": 45890.993, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45714.310,45890.993,3.17%,38253.456,49260.368,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1449.143627, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "value": 1402.469, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1524.581,1402.469,31.97%,750.135,5559.393,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 487.40854569999993, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 42185.583, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=1", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42163.945,42185.583,0.67%,41764.088,42688.671,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 282.4984315, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 116671.94, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=4", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116692.993,116671.940,0.52%,115879.058,117697.081,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 606.8035636, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "value": 33.387, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.501,33.387,3.89%,31.096,89.308,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.3031889, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5", "value": 52.424, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),52.492,52.424,2.45%,48.736,95.849,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.286054, "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "value": 270.984, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.229,270.984,3.01%,264.862,1032.136,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 8.163992899999998, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100", "value": 310.902, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),311.571,310.902,1.84%,307.554,701.695,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 5.7329064, "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "Velocity-Bench Hashtable", "value": 314.767819, "command": ["/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl", "--no-verify"], "env": {}, "stdout": "hashtable - total time for whole calculation: 0.426402 s\n314.767819 million keys/second\n", "passed": true, "unit": "M keys/sec", "explicit_group": "", "stddev": 3.918051130466049, "name": "Velocity-Bench Hashtable", "lower_is_better": false, "suite": "Velocity Bench", "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."}, {"label": "Velocity-Bench Bitcracker", "value": 35.3859, "command": ["/home/test-user/ur_bench_workdir/bitcracker/bitcracker", "-f", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt", "-d", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt", "-b", "60000"], "env": {}, "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00394442 s\nbitcracker - total time for whole calculation: 35.3859 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.024319813595778048, "name": "Velocity-Bench Bitcracker", "lower_is_better": true, "suite": "Velocity Bench", "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."}, {"label": "Velocity-Bench CudaSift", "value": 206.903, "command": ["/home/test-user/ur_bench_workdir/cudaSift/cudaSift"], "env": {}, "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1215 1272 32.9894% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1134 1260 30.7901% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1267 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1252 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1273 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1259 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1140 1265 30.953% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1214 1252 32.9623% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1104 1262 29.9756% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1273 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1247 1282 33.8583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1093 1257 29.6769% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1265 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1097 1256 29.7855% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1140 1258 30.953% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1245 1279 33.804% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1270 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1063 1258 28.8623% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1180 1265 32.0391% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1146 1260 31.1159% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1258 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1279 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1267 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1129 1263 30.6544% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1261 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1126 1261 30.5729% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1190 1266 32.3106% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1194 1266 32.4192% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1203 1236 32.6636% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1129 1272 30.6544% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1269 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1124 1269 30.5186% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1265 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1260 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1055 1261 28.6451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1259 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1257 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1259 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1025 1267 27.8306% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.903 ms\n\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 0.0765441049330341, "name": "Velocity-Bench CudaSift", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."}, {"label": "Velocity-Bench Easywave", "value": 241.0, "command": ["/home/test-user/ur_bench_workdir/easywave/easyWave_sycl", "-grid", "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd", "-source", "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt", "-time", "120"], "env": {}, "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 1.51657508881031, "name": "Velocity-Bench Easywave", "lower_is_better": true, "suite": "Velocity Bench", "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."}, {"label": "Velocity-Bench QuickSilver", "value": 118.62, "command": ["/home/test-user/ur_bench_workdir/QuickSilver/qs", "-i", "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"], "env": {"QS_DEVICE": "GPU"}, "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.653650e-01   6.038240e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.527460e-01   7.440700e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.437590e-01   7.612410e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.719320e-01   8.147270e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.425770e-01   7.874720e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.476640e-01   7.628950e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.432370e-01   7.752770e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.464970e-01   8.050510e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.433330e-01   7.818720e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.472850e-01   7.578860e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.110e+07    1.110e+07    1.110e+07    0.000e+00       100.00\ncycleInit                           10    3.504e+06    3.504e+06    3.504e+06    0.000e+00       100.00\ncycleTracking                       10    7.594e+06    7.594e+06    7.594e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.978e+06    4.978e+06    4.978e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.961e+05    1.961e+05    1.961e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.290e+02    4.290e+02    4.290e+02    0.000e+00       100.00\nFigure Of Merit                 118.62 [Num Mega Segments / Cycle Tracking Time]\n", "passed": true, "unit": "MMS/CTT", "explicit_group": "", "stddev": 0.5054041287260457, "name": "Velocity-Bench QuickSilver", "lower_is_better": false, "suite": "Velocity Bench", "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."}, {"label": "Velocity-Bench Sobel Filter", "value": 721.888, "command": ["/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter", "-i", "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png", "-n", "5"], "env": {"OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"}, "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47584 s\nsobelfilter - total time for whole calculation: 0.721888 s\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 8.1201761865122, "name": "Velocity-Bench Sobel Filter", "lower_is_better": true, "suite": "Velocity Bench", "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."}, {"label": "Velocity-Bench dl-cifar", "value": 24.2548, "command": ["/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"], "env": {}, "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.2e-05 s\ndl-cifar - total time for whole calculation: 24.2548 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.03464837658534712, "name": "Velocity-Bench dl-cifar", "lower_is_better": true, "suite": "Velocity Bench", "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."}, {"label": "Velocity-Bench dl-mnist", "value": 2.69, "command": ["/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl", "-conv_algo", "ONEDNN_AUTO"], "env": {"NEOReadDebugKeys": "1", "DisableScratchPages": "0"}, "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.69 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.0351188458428426, "name": "Velocity-Bench dl-mnist", "lower_is_better": true, "suite": "Velocity Bench", "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."}, {"label": "Velocity-Bench svm", "value": 0.1521, "command": ["/home/test-user/ur_bench_workdir/svm/svm_sycl", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"], "env": {}, "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076333 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0672 s\nProcessing elapsed time : 0.0824 s\nStoring    elapsed time : 0.0024 s\nTotal      elapsed time : 0.1521 s\nResult's are correct: 0.0551 \n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.0012124355652982054, "name": "Velocity-Bench svm", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."}, {"label": "llama.cpp Prompt Processing Batched 128", "value": 879.917019, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:31Z\",\"581898677\",\"4325760\",\"879.917019\",\"6.516356\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:35Z\",\"2096755295\",\"2388680\",\"61.046767\",\"0.069469\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:45Z\",\"546687669\",\"802523\",\"936.550998\",\"1.373992\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:49Z\",\"2095262737\",\"620026\",\"61.090195\",\"0.018004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:59Z\",\"948264894\",\"771488\",\"539.933804\",\"0.439517\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:04:05Z\",\"2096010613\",\"867219\",\"61.068401\",\"0.025254\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 6.080077259390817, "name": "llama.cpp Prompt Processing Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 128", "value": 61.046767, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:31Z\",\"581898677\",\"4325760\",\"879.917019\",\"6.516356\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:35Z\",\"2096755295\",\"2388680\",\"61.046767\",\"0.069469\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:45Z\",\"546687669\",\"802523\",\"936.550998\",\"1.373992\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:49Z\",\"2095262737\",\"620026\",\"61.090195\",\"0.018004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:59Z\",\"948264894\",\"771488\",\"539.933804\",\"0.439517\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:04:05Z\",\"2096010613\",\"867219\",\"61.068401\",\"0.025254\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.004406871112251236, "name": "llama.cpp Text Generation Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 256", "value": 941.452691, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:01Z\",\"585427804\",\"3116157\",\"874.593809\",\"4.626694\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:04Z\",\"2096620195\",\"2550409\",\"61.050710\",\"0.074127\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:15Z\",\"543840543\",\"321052\",\"941.452691\",\"0.555613\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:18Z\",\"2097089528\",\"322869\",\"61.036976\",\"0.009302\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:29Z\",\"951903657\",\"567272\",\"537.869711\",\"0.320481\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:34Z\",\"2093331852\",\"408608\",\"61.146542\",\"0.011900\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 3.570447699786805, "name": "llama.cpp Prompt Processing Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 256", "value": 61.090195, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:31Z\",\"581898677\",\"4325760\",\"879.917019\",\"6.516356\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:35Z\",\"2096755295\",\"2388680\",\"61.046767\",\"0.069469\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:45Z\",\"546687669\",\"802523\",\"936.550998\",\"1.373992\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:49Z\",\"2095262737\",\"620026\",\"61.090195\",\"0.018004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:59Z\",\"948264894\",\"771488\",\"539.933804\",\"0.439517\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:04:05Z\",\"2096010613\",\"867219\",\"61.068401\",\"0.025254\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.05549028867288172, "name": "llama.cpp Text Generation Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 512", "value": 538.897843, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:46Z\",\"577422927\",\"3453361\",\"886.723761\",\"5.295895\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:49Z\",\"2096921572\",\"2097505\",\"61.041912\",\"0.060989\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:00Z\",\"542661091\",\"372556\",\"943.498993\",\"0.647929\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:04Z\",\"2093284606\",\"745865\",\"61.147926\",\"0.021700\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:14Z\",\"950088296\",\"1085298\",\"538.897843\",\"0.614776\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:20Z\",\"2093846844\",\"186423\",\"61.131501\",\"0.005443\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 1.0320489745803196, "name": "llama.cpp Prompt Processing Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 512", "value": 61.131501, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:46Z\",\"577422927\",\"3453361\",\"886.723761\",\"5.295895\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:49Z\",\"2096921572\",\"2097505\",\"61.041912\",\"0.060989\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:00Z\",\"542661091\",\"372556\",\"943.498993\",\"0.647929\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:04Z\",\"2093284606\",\"745865\",\"61.147926\",\"0.021700\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:14Z\",\"950088296\",\"1085298\",\"538.897843\",\"0.614776\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:20Z\",\"2093846844\",\"186423\",\"61.131501\",\"0.005443\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.04146053859193293, "name": "llama.cpp Text Generation Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}], "name": "Baseline_PVC_L0", "hostname": "gkdse-pre-dnp-06", "git_hash": "a884df8", "github_repo": "intel/llvm", "date": "2025-03-13T16:04:16.148164+00:00"},
{"results": [{"label": "api_overhead_benchmark_l0 SubmitKernel out of order", "value": 12.232, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.268,12.232,2.76%,11.357,23.159,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.33859680000000003, "name": "api_overhead_benchmark_l0 SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_l0 SubmitKernel in order", "value": 12.345, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.380,12.345,3.10%,11.379,70.071,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.38378, "name": "api_overhead_benchmark_l0 SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel out of order", "value": 21.382, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.498,21.382,8.00%,20.284,536.363,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1.71984, "name": "api_overhead_benchmark_sycl SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel in order", "value": 22.025, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.150,22.025,7.82%,21.110,540.267,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1.73213, "name": "api_overhead_benchmark_sycl SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "value": 207.267, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),208.485,207.267,3.08%,203.849,765.175,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 6.421338, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "value": 86.254, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Host", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),86.993,86.254,1.90%,85.674,150.672,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1.6528669999999999, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "value": 5.353, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.494,5.353,14.17%,4.882,53.829,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.7784998, "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."}, {"label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "value": 2.795, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=StreamMemory", "--csv", "--noHeaders", "--iterations=10000", "--type=Triad", "--size=10240", "--memoryPlacement=Device", "--useEvents=0", "--contents=Zeros", "--multiplier=1", "--vectorSize=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.824,2.795,4.91%,0.506,3.192,[CPU],[GB/s]\n", "passed": true, "unit": "GB/s", "explicit_group": "", "stddev": 0.13865840000000001, "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "lower_is_better": false, "suite": "Compute Benchmarks", "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "value": 1.946, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=0", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Device", "--dst=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.953,1.946,11.53%,1.715,61.750,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.22518090000000002, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "value": 1.448, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=1", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Host", "--dst=Host", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.455,1.448,27.23%,1.377,123.350,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.3961965, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "miscellaneous_benchmark_sycl VectorSum", "value": 804.791, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl", "--test=VectorSum", "--csv", "--noHeaders", "--iterations=1000", "--numberOfElementsX=512", "--numberOfElementsY=256", "--numberOfElementsZ=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),804.292,804.791,0.37%,773.857,812.063,[GPU],bw [GB/s]\n", "passed": true, "unit": "bw GB/s", "explicit_group": "", "stddev": 2.9758804000000003, "name": "miscellaneous_benchmark_sycl VectorSum", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "value": 26.831, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.795,26.831,6.04%,25.072,146.611,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.6184180000000001, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5", "value": 29.88, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.969,29.880,5.44%,28.168,161.437,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.6303136000000003, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "value": 274.15, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),275.718,274.150,2.87%,266.062,781.203,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 7.913106600000001, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100", "value": 255.613, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),255.750,255.613,1.97%,254.343,743.069,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 5.038275, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "value": 26.475, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.332,26.475,5.38%,24.583,143.501,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.4166616, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "value": 28.802, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.856,28.802,3.77%,28.024,126.366,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.0878712, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "value": 247.221, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.431,247.221,1.86%,242.826,656.066,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.602216600000001, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "value": 248.857, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),248.941,248.857,1.77%,246.267,664.922,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.4062557, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "value": 5.431, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.458,5.431,16.28%,4.782,65.584,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.8885624000000001, "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "value": 4.339, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.342,4.339,11.36%,3.735,48.134,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.49325119999999995, "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "value": 1.531, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.531,1.531,6.56%,1.302,2.331,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.10043359999999998, "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "value": 1.097, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.089,1.097,2.55%,1.005,1.165,[GPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.0277695, "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "value": 95034.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.425,14.270,214.52%,13.412,9798.770,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 361.2920756, "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order", "value": 14.35, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.491,14.350,164.20%,13.463,7515.842,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 23.794221999999998, "name": "api_overhead_benchmark_ur SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "value": 95034.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.766,14.636,151.06%,13.676,7044.724,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 361.2920756, "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order", "value": 14.636, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.766,14.636,151.06%,13.676,7044.724,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 22.3055196, "name": "api_overhead_benchmark_ur SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "value": 97528.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98431.808,97528.000,288.20%,96454.000,89806089.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.220,20.441,3784.41%,17.470,277907.104,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 283680.47065599996, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "value": 20.441, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98431.808,97528.000,288.20%,96454.000,89806089.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.220,20.441,3784.41%,17.470,277907.104,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 878.7400019999999, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "value": 5489.082, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5483.745,5489.082,0.26%,5459.945,5501.316,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 14.257736999999999, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "value": 11123.018, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11144.032,11123.018,5.36%,10271.678,12127.402,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 597.3201152, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "value": 17630.465, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18000.663,17630.465,8.00%,15466.159,24085.258,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1440.05304, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "value": 766.551, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),756.819,766.551,7.15%,482.528,1313.318,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 54.112558500000006, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "value": 6075.22, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6068.549,6075.220,0.70%,5988.533,6120.840,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 42.479842999999995, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "value": 6395.786, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6428.608,6395.786,3.28%,6180.233,6893.579,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 210.85834239999997, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "value": 17915.264, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18246.663,17915.264,7.46%,15614.867,23562.563,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1361.2010598, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "value": 774.662, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),764.314,774.662,7.19%,440.602,1513.692,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 54.954176600000004, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 29823.733, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=1", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29831.455,29823.733,0.40%,29552.849,30042.303,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 119.32582000000001, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 86926.633, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=4", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),86935.002,86926.633,0.40%,86163.836,87469.111,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 347.740008, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "value": 26.512, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.406,26.512,5.86%,24.589,144.695,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.5473916, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "value": 247.664, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.926,247.664,1.94%,243.196,689.549,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.8097644, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}], "name": "Baseline_PVC_L0v2", "hostname": "gkdse-pre-dnp-06", "git_hash": "130212d", "github_repo": "intel/llvm", "date": "2025-03-13T15:25:59.888228+00:00"},
{"results": [{"label": "api_overhead_benchmark_l0 SubmitKernel out of order", "value": 11.83, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.870,11.830,3.85%,11.107,76.830,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.456995, "name": "api_overhead_benchmark_l0 SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_l0 SubmitKernel in order", "value": 11.892, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.954,11.892,12.73%,11.172,479.320,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1.5217442, "name": "api_overhead_benchmark_l0 SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel out of order", "value": 23.064, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.238,23.064,10.71%,22.304,790.313,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 2.4887898, "name": "api_overhead_benchmark_sycl SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel in order", "value": 24.3, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.522,24.300,7.59%,23.516,565.404,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1.8612197999999998, "name": "api_overhead_benchmark_sycl SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "value": 259.087, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),260.553,259.087,3.01%,255.015,932.726,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 7.842645299999999, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "value": 133.433, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Host", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.688,133.433,1.85%,132.055,180.367,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 2.491728, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "value": 5.72, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.797,5.720,9.88%,5.344,34.511,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.5727436, "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."}, {"label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "value": 3.163, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=StreamMemory", "--csv", "--noHeaders", "--iterations=10000", "--type=Triad", "--size=10240", "--memoryPlacement=Device", "--useEvents=0", "--contents=Zeros", "--multiplier=1", "--vectorSize=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.143,3.163,3.56%,0.301,3.412,[CPU],[GB/s]\n", "passed": true, "unit": "GB/s", "explicit_group": "", "stddev": 0.1118908, "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "lower_is_better": false, "suite": "Compute Benchmarks", "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "value": 2.141, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=0", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Device", "--dst=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.158,2.141,11.16%,1.949,50.874,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.2408328, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "value": 1.698, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=1", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Host", "--dst=Host", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.715,1.698,6.23%,1.620,11.232,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.10684450000000001, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "miscellaneous_benchmark_sycl VectorSum", "value": 860.664, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl", "--test=VectorSum", "--csv", "--noHeaders", "--iterations=1000", "--numberOfElementsX=512", "--numberOfElementsY=256", "--numberOfElementsZ=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.243,860.664,0.39%,825.109,874.117,[GPU],bw [GB/s]\n", "passed": true, "unit": "bw GB/s", "explicit_group": "", "stddev": 3.3549477000000003, "name": "miscellaneous_benchmark_sycl VectorSum", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "value": 28.961, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),28.899,28.961,9.16%,27.395,240.365,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 2.6471484000000003, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "value": 306.356, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),307.985,306.356,2.44%,298.747,827.860,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 7.514834, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "value": 26.073, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.146,26.073,5.29%,24.309,139.273,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.3831234000000001, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "value": 28.818, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.882,28.818,4.90%,28.002,144.490,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.415218, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "value": 253.841, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),254.016,253.841,1.84%,249.709,694.416,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.6738944, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "value": 249.671, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),249.746,249.671,1.41%,246.993,569.018,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 3.5214186, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "value": 5.955, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.987,5.955,10.28%,5.239,47.802,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.6154635999999999, "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "value": 4.268, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.262,4.268,7.80%,3.707,28.145,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.33243599999999995, "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "value": 0.662, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.676,0.662,9.28%,0.525,1.234,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.0627328, "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "value": 1.051, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.059,1.051,2.34%,0.982,1.120,[GPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.024780599999999996, "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "value": 107454.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.706,16.512,158.73%,15.898,8400.945,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 6483.265934399999, "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order", "value": 16.512, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.706,16.512,158.73%,15.898,8400.945,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 26.5174338, "name": "api_overhead_benchmark_ur SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "value": 113308.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113380.318,113308.000,3.98%,113308.000,1533889.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.567,17.369,118.71%,16.707,6610.298,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 4512.5366564000005, "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order", "value": 17.027, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.340,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.282,17.027,226.47%,16.395,12382.689,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 39.1385454, "name": "api_overhead_benchmark_ur SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "value": 125825.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125998.326,125825.000,3.75%,125216.000,1613235.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.748,21.357,102.21%,20.292,7027.068,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 4724.937225, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "value": 21.563, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125948.626,125825.000,3.75%,125216.000,1612320.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.910,21.563,103.40%,20.656,7162.542,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 22.65494, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "value": 6924.328, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6972.824,6924.328,1.47%,6883.238,7204.757,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 102.5005128, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "value": 18023.621, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17643.248,18023.621,9.05%,14879.175,20579.784,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1596.713944, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "value": 49958.004, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50075.117,49958.004,5.31%,39891.996,58469.709,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 2658.9887126999997, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "value": 1984.611, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2008.378,1984.611,13.49%,1424.099,4790.922,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 270.93019219999996, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "value": 7583.219, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7578.264,7583.219,2.11%,7365.625,7850.351,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 159.9013704, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "value": 17003.24, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16814.980,17003.240,6.09%,15183.292,18204.160,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1024.032282, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "value": 45299.47, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45174.224,45299.470,3.10%,37946.335,48945.728,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1400.400944, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "value": 1294.756, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1387.132,1294.756,30.54%,835.780,5520.376,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 423.6301128, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 42345.709, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=1", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42294.923,42345.709,0.38%,41898.689,42483.888,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 160.7207074, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 115640.718, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=4", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),115449.271,115640.718,0.40%,114276.245,115803.193,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 461.797084, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "value": 33.415, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.529,33.415,3.77%,31.550,75.956,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.2640433, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5", "value": 51.582, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.637,51.582,2.59%,47.767,81.529,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.3373983, "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "value": 270.764, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.010,270.764,2.96%,265.091,1029.799,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 8.021896, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100", "value": 312.175, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),312.533,312.175,1.13%,308.709,534.683,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 3.5316229, "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "Velocity-Bench Hashtable", "value": 309.843465, "command": ["/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl", "--no-verify"], "env": {}, "stdout": "hashtable - total time for whole calculation: 0.433179 s\n309.843465 million keys/second\n", "passed": true, "unit": "M keys/sec", "explicit_group": "", "stddev": 3.790939272577354, "name": "Velocity-Bench Hashtable", "lower_is_better": false, "suite": "Velocity Bench", "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."}, {"label": "Velocity-Bench Bitcracker", "value": 35.3838, "command": ["/home/test-user/ur_bench_workdir/bitcracker/bitcracker", "-f", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt", "-d", "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt", "-b", "60000"], "env": {}, "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00391978 s\nbitcracker - total time for whole calculation: 35.3838 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.04007695098182857, "name": "Velocity-Bench Bitcracker", "lower_is_better": true, "suite": "Velocity Bench", "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."}, {"label": "Velocity-Bench CudaSift", "value": 206.646, "command": ["/home/test-user/ur_bench_workdir/cudaSift/cudaSift"], "env": {}, "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1253 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1201 1263 32.6093% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1266 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1253 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1258 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1272 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1210 1262 32.8537% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1268 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1261 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1088 1263 29.5411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1266 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1142 1269 31.0073% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1102 1264 29.9213% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1272 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1184 1273 32.1477% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1277 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1255 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1108 1262 30.0842% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1028 1261 27.912% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1077 1262 29.2425% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1255 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1157 1251 31.4146% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1255 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1260 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1255 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1257 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1260 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1093 1264 29.6769% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1259 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1216 1253 33.0166% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1144 1268 31.0616% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1077 1282 29.2425% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1260 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1255 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1268 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1256 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1164 1250 31.6047% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1267 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1114 1253 30.2471% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1215 1268 32.9894% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1264 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.646 ms\n\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 10.213038186553497, "name": "Velocity-Bench CudaSift", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."}, {"label": "Velocity-Bench Easywave", "value": 240.0, "command": ["/home/test-user/ur_bench_workdir/easywave/easyWave_sycl", "-grid", "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd", "-source", "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt", "-time", "120"], "env": {}, "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 1.224744871391589, "name": "Velocity-Bench Easywave", "lower_is_better": true, "suite": "Velocity Bench", "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."}, {"label": "Velocity-Bench QuickSilver", "value": 118.23, "command": ["/home/test-user/ur_bench_workdir/QuickSilver/qs", "-i", "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"], "env": {"QS_DEVICE": "GPU"}, "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.662230e-01   6.062800e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.548990e-01   7.476050e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.418510e-01   7.618970e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.731050e-01   8.155130e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.439130e-01   7.887740e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.496360e-01   7.636090e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.449440e-01   7.615650e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.494920e-01   7.974620e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.461760e-01   8.031800e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.496380e-01   7.738110e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.114e+07    1.114e+07    1.114e+07    0.000e+00       100.00\ncycleInit                           10    3.520e+06    3.520e+06    3.520e+06    0.000e+00       100.00\ncycleTracking                       10    7.620e+06    7.620e+06    7.620e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.982e+06    4.982e+06    4.982e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    2.005e+05    2.005e+05    2.005e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.210e+02    4.210e+02    4.210e+02    0.000e+00       100.00\nFigure Of Merit                 118.23 [Num Mega Segments / Cycle Tracking Time]\n", "passed": true, "unit": "MMS/CTT", "explicit_group": "", "stddev": 3.606415579676496, "name": "Velocity-Bench QuickSilver", "lower_is_better": false, "suite": "Velocity Bench", "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."}, {"label": "Velocity-Bench Sobel Filter", "value": 719.147, "command": ["/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter", "-i", "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png", "-n", "5"], "env": {"OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"}, "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.49345 s\nsobelfilter - total time for whole calculation: 0.719147 s\n", "passed": true, "unit": "ms", "explicit_group": "", "stddev": 12.414760779008173, "name": "Velocity-Bench Sobel Filter", "lower_is_better": true, "suite": "Velocity Bench", "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."}, {"label": "Velocity-Bench dl-cifar", "value": 24.2248, "command": ["/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"], "env": {}, "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.4e-05 s\ndl-cifar - total time for whole calculation: 24.2248 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.10270683034735244, "name": "Velocity-Bench dl-cifar", "lower_is_better": true, "suite": "Velocity Bench", "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."}, {"label": "Velocity-Bench dl-mnist", "value": 2.71, "command": ["/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl", "-conv_algo", "ONEDNN_AUTO"], "env": {"NEOReadDebugKeys": "1", "DisableScratchPages": "0"}, "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.71 s\n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.020000000000000018, "name": "Velocity-Bench dl-mnist", "lower_is_better": true, "suite": "Velocity Bench", "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."}, {"label": "Velocity-Bench svm", "value": 0.1396, "command": ["/home/test-user/ur_bench_workdir/svm/svm_sycl", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a", "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"], "env": {}, "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.068488 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0632 s\nProcessing elapsed time : 0.0742 s\nStoring    elapsed time : 0.0022 s\nTotal      elapsed time : 0.1396 s\nResult's are correct: 0.0551 \n", "passed": true, "unit": "s", "explicit_group": "", "stddev": 0.006474892336497247, "name": "Velocity-Bench svm", "lower_is_better": true, "suite": "Velocity Bench", "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."}, {"label": "llama.cpp Prompt Processing Batched 128", "value": 879.601923, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:06Z\",\"582095472\",\"3200014\",\"879.601923\",\"4.803845\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:09Z\",\"2100077943\",\"2403130\",\"60.950182\",\"0.069654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:20Z\",\"541272840\",\"387671\",\"945.918901\",\"0.677061\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:23Z\",\"2096857911\",\"951180\",\"61.043727\",\"0.027616\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:34Z\",\"953098038\",\"1646412\",\"537.196805\",\"0.926786\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:40Z\",\"2098370756\",\"1221276\",\"60.999723\",\"0.035452\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 8.22756049421834, "name": "llama.cpp Prompt Processing Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 128", "value": 61.023105, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:51Z\",\"577403593\",\"3599481\",\"886.755480\",\"5.487524\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:55Z\",\"2097568757\",\"2620018\",\"61.023105\",\"0.076116\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:02:05Z\",\"543642846\",\"534395\",\"941.795515\",\"0.924647\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:02:08Z\",\"2094523713\",\"256983\",\"61.111746\",\"0.007439\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:02:19Z\",\"949841457\",\"1436445\",\"539.038314\",\"0.815826\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:02:25Z\",\"2091430538\",\"419952\",\"61.202130\",\"0.012216\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.10069233691299452, "name": "llama.cpp Text Generation Batched 128", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 256", "value": 941.795515, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:51Z\",\"577403593\",\"3599481\",\"886.755480\",\"5.487524\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:55Z\",\"2097568757\",\"2620018\",\"61.023105\",\"0.076116\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:02:05Z\",\"543642846\",\"534395\",\"941.795515\",\"0.924647\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:02:08Z\",\"2094523713\",\"256983\",\"61.111746\",\"0.007439\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:02:19Z\",\"949841457\",\"1436445\",\"539.038314\",\"0.815826\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:02:25Z\",\"2091430538\",\"419952\",\"61.202130\",\"0.012216\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 3.3614709360137836, "name": "llama.cpp Prompt Processing Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 256", "value": 61.062278, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:00:19Z\",\"588275491\",\"1527372\",\"870.345221\",\"2.260681\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:00:24Z\",\"2093243105\",\"2676493\",\"61.149212\",\"0.078052\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:00:35Z\",\"545115908\",\"1874355\",\"939.258651\",\"3.222854\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:00:38Z\",\"2096220581\",\"438321\",\"61.062278\",\"0.012734\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:00:48Z\",\"954633296\",\"1362950\",\"536.332471\",\"0.765419\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:00:54Z\",\"2098725141\",\"1128771\",\"60.989420\",\"0.032740\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.035161074561698126, "name": "llama.cpp Text Generation Batched 256", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Prompt Processing Batched 512", "value": 537.196805, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:06Z\",\"582095472\",\"3200014\",\"879.601923\",\"4.803845\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:09Z\",\"2100077943\",\"2403130\",\"60.950182\",\"0.069654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:20Z\",\"541272840\",\"387671\",\"945.918901\",\"0.677061\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:23Z\",\"2096857911\",\"951180\",\"61.043727\",\"0.027616\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:34Z\",\"953098038\",\"1646412\",\"537.196805\",\"0.926786\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:40Z\",\"2098370756\",\"1221276\",\"60.999723\",\"0.035452\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 1.3820163410325301, "name": "llama.cpp Prompt Processing Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}, {"label": "llama.cpp Text Generation Batched 512", "value": 60.999723, "command": ["/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench", "--output", "csv", "-n", "128", "-p", "512", "-b", "128,256,512", "--numa", "isolate", "-t", "56", "--model", "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"], "env": {}, "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:06Z\",\"582095472\",\"3200014\",\"879.601923\",\"4.803845\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:09Z\",\"2100077943\",\"2403130\",\"60.950182\",\"0.069654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:20Z\",\"541272840\",\"387671\",\"945.918901\",\"0.677061\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:23Z\",\"2096857911\",\"951180\",\"61.043727\",\"0.027616\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:34Z\",\"953098038\",\"1646412\",\"537.196805\",\"0.926786\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:40Z\",\"2098370756\",\"1221276\",\"60.999723\",\"0.035452\"\n", "passed": true, "unit": "token/s", "explicit_group": "", "stddev": 0.11994463275333542, "name": "llama.cpp Text Generation Batched 512", "lower_is_better": false, "suite": "llama.cpp bench", "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."}], "name": "Baseline_PVC_L0", "hostname": "gkdse-pre-dnp-06", "git_hash": "130212d", "github_repo": "intel/llvm", "date": "2025-03-13T15:02:35.798154+00:00"}
]

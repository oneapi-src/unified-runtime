[
{"results": [{"label": "api_overhead_benchmark_l0 SubmitKernel out of order", "value": 12.023, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.076,12.023,4.18%,11.198,92.087,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.5047768, "name": "api_overhead_benchmark_l0 SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_l0 SubmitKernel in order", "value": 12.056, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.117,12.056,3.93%,11.246,77.447,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 0.47619810000000007, "name": "api_overhead_benchmark_l0 SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel out of order", "value": 23.404, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.592,23.404,11.09%,22.453,821.466,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 2.6163528, "name": "api_overhead_benchmark_sycl SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "api_overhead_benchmark_sycl SubmitKernel in order", "value": 24.759, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.952,24.759,7.25%,23.738,554.238,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 1.80902, "name": "api_overhead_benchmark_sycl SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "value": 261.99, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),263.537,261.990,2.63%,258.391,819.571,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 6.931023099999999, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "value": 133.511, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueInOrderMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--IsCopyOnly=0", "--sourcePlacement=Host", "--destinationPlacement=Device", "--size=1024", "--count=100"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.678,133.511,1.82%,132.139,204.335,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 2.4511396, "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."}, {"label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "value": 5.796, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=QueueMemcpy", "--csv", "--noHeaders", "--iterations=10000", "--sourcePlacement=Device", "--destinationPlacement=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.951,5.796,10.16%,5.342,37.127,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.6046216, "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."}, {"label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "value": 3.182, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl", "--test=StreamMemory", "--csv", "--noHeaders", "--iterations=10000", "--type=Triad", "--size=10240", "--memoryPlacement=Device", "--useEvents=0", "--contents=Zeros", "--multiplier=1", "--vectorSize=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.163,3.182,3.61%,0.711,3.451,[CPU],[GB/s]\n", "passed": true, "unit": "GB/s", "explicit_group": "", "stddev": 0.11418429999999999, "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240", "lower_is_better": false, "suite": "Compute Benchmarks", "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "value": 2.158, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=0", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Device", "--dst=Device", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.170,2.158,8.02%,1.946,36.077,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.17403399999999997, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "value": 1.719, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl", "--test=ExecImmediateCopyQueue", "--csv", "--noHeaders", "--iterations=100000", "--ioq=1", "--IsCopyOnly=1", "--MeasureCompletionTime=0", "--src=Host", "--dst=Host", "--size=1024"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.735,1.719,7.04%,1.631,8.131,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 0.12214400000000002, "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."}, {"label": "miscellaneous_benchmark_sycl VectorSum", "value": 859.782, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl", "--test=VectorSum", "--csv", "--noHeaders", "--iterations=1000", "--numberOfElementsX=512", "--numberOfElementsY=256", "--numberOfElementsZ=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.085,859.782,0.44%,821.607,872.904,[GPU],bw [GB/s]\n", "passed": true, "unit": "bw GB/s", "explicit_group": "", "stddev": 3.779974, "name": "miscellaneous_benchmark_sycl VectorSum", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "value": 29.486, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.484,29.486,6.84%,27.849,156.627,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 2.0167056000000003, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "value": 312.69, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),313.725,312.690,2.55%,304.546,892.843,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 7.9999875000000005, "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "value": 25.954, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.058,25.954,5.15%,24.353,137.158,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.341987, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "value": 28.771, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.830,28.771,4.32%,28.004,139.033,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.245456, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "value": 257.192, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),257.362,257.192,1.66%,252.783,658.040,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.272209200000001, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "value": 252.051, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),252.165,252.051,1.49%,251.121,554.419,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 3.7572585, "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "value": 5.989, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),6.028,5.989,14.79%,5.153,71.473,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.8915411999999999, "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "value": 4.195, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=EmptyKernel", "--csv", "--noHeaders", "--iterations=10000", "--wgs=256", "--wgc=256"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.220,4.195,11.73%,3.710,48.843,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "EmptyKernel 1000 256", "stddev": 0.495006, "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "value": 0.594, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.609,0.594,10.25%,0.457,1.302,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.06242249999999999, "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "value": 1.005, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0", "--test=KernelSwitch", "--csv", "--noHeaders", "--iterations=1000", "--count=8", "--kernelTime=200", "--barrier=0", "--hostVisible=0", "--ioq=1", "--ctrBasedEvents=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.005,1.005,2.19%,0.937,1.051,[GPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "KernelSwitch 8 200", "stddev": 0.022009499999999998, "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200", "lower_is_better": true, "suite": "Compute Benchmarks", "description": ""}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "value": 107454.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.848,16.653,138.99%,15.890,7419.078,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 6483.265934399999, "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel out of order", "value": 16.653, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=0", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.848,16.653,138.99%,15.890,7419.078,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 23.4170352, "name": "api_overhead_benchmark_ur SubmitKernel out of order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "value": 113308.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113380.317,113308.000,3.97%,113308.000,1533329.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.808,17.592,127.14%,16.734,7155.333,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 4501.198584899999, "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order", "value": 17.439, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=0", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113380.342,113308.000,3.98%,113308.000,1535879.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.650,17.439,111.09%,16.764,6194.065,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 19.607384999999997, "name": "api_overhead_benchmark_ur SubmitKernel in order", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "value": 125825.0, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125969.691,125825.000,3.75%,125216.000,1612625.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.143,21.786,128.65%,20.817,9009.685,[CPU],time [us]\n", "passed": true, "unit": "instr", "explicit_group": "SubmitKernel CPU count", "stddev": 4723.8634125, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "value": 21.809, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur", "--test=SubmitKernel", "--csv", "--noHeaders", "--Ioq=1", "--DiscardEvents=0", "--MeasureCompletion=1", "--iterations=100000", "--Profiling=0", "--NumKernels=10", "--KernelExecTime=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125931.702,125825.000,3.74%,125216.000,1608004.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.136,21.809,159.27%,20.838,11156.429,[CPU],time [us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SubmitKernel", "stddev": 35.2560072, "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "value": 6944.627, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6963.308,6944.627,1.04%,6903.902,7140.328,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 72.4184032, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "value": 17942.638, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17700.091,17942.638,8.46%,15606.736,20262.374,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1497.4276986000002, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "value": 50173.127, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50276.918,50173.127,5.47%,42495.614,59830.147,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 2750.1474145999996, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "value": 2006.46, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=1", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2037.961,2006.460,13.69%,1382.381,5080.562,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 278.9968609, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "value": 7507.954, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=1", "--NumOpsPerThread=400", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7545.877,7507.954,1.99%,7368.172,7819.411,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 150.16295230000003, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "value": 16798.708, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=102400", "--NumThreads=8", "--NumOpsPerThread=100", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16939.411,16798.708,4.60%,15557.730,18267.231,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 779.212906, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "value": 45009.38, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=8", "--NumOpsPerThread=400", "--iterations=1000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),44837.337,45009.380,3.07%,38497.450,48174.187,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 1376.5062458999998, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "value": 1296.724, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=1", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=16", "--NumOpsPerThread=10", "--iterations=10000", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1384.617,1296.724,30.14%,863.854,5129.552,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 417.3235638, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 42355.416, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=1", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42404.845,42355.416,0.34%,42193.508,42634.983,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 144.17647300000002, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "value": 116377.189, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur", "--test=MemcpyExecute", "--csv", "--noHeaders", "--Ioq=1", "--UseEvents=0", "--MeasureCompletion=1", "--UseQueuePerThread=1", "--AllocSize=1024", "--NumThreads=4", "--NumOpsPerThread=4096", "--iterations=10", "--SrcUSM=0", "--DstUSM=1"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116143.778,116377.189,0.66%,114917.106,117298.751,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "", "stddev": 766.5489348, "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "value": 33.299, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.429,33.299,6.58%,31.303,208.165,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 2.1996282000000003, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5", "value": 51.295, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=5", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.400,51.295,2.88%,48.066,107.761,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 5", "stddev": 1.4803199999999999, "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "value": 271.269, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=0", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.505,271.269,2.95%,265.228,1018.188,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 8.0093975, "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."}, {"label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100", "value": 312.913, "command": ["/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur", "--test=SinKernelGraph", "--csv", "--noHeaders", "--iterations=10000", "--numKernels=100", "--withGraphs=1", "--withCopyOffload=1", "--immediateAppendCmdList=0"], "env": {}, "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),313.284,312.913,1.32%,309.458,592.959,[CPU],[us]\n", "passed": true, "unit": "\u03bcs", "explicit_group": "SinKernelGraph 100", "stddev": 4.1353488, "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100", "lower_is_better": true, "suite": "Compute Benchmarks", "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."}], "name": "This PR", "git_hash": "cd6097f", "github_repo": "intel/llvm", "date": "2025-03-13T11:08:00.567635+00:00"}
]

{
  "runs": [
    {
      "results": [
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.167,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.322,21.167,2.23%,20.320,62.702,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.4754806,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order with measure completion",
          "value": 24.957,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),25.109,24.957,7.49%,23.343,592.597,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 1.8806641000000004,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 21.844,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.015,21.844,7.71%,21.093,538.456,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.6973565000000002,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order with measure completion",
          "value": 25.001,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),25.186,25.001,9.81%,23.907,784.382,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 2.4707466,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.792,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.826,11.792,2.96%,11.044,70.943,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3500496,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order with measure completion",
          "value": 15.239,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),15.276,15.239,2.60%,14.320,77.903,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 0.39717600000000003,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.66,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.698,11.660,2.43%,10.871,30.349,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.28426140000000005,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order with measure completion",
          "value": 18.67,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),18.641,18.670,3.55%,16.717,66.953,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 0.6617554999999998,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.858,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),13.812,13.639,234.95%,12.945,10260.897,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206039999997,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 13.638,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.861,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),13.774,13.638,182.49%,12.805,7961.522,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 25.136172600000002,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98634.633,97528.000,319.84%,96669.000,99859366.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.781,20.314,4392.87%,18.154,330371.703,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel With Completion CPU count",
          "stddev": 315473.0101872,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion",
          "value": 20.312,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98584.935,97528.000,306.27%,96528.000,95579379.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.528,20.312,4124.75%,18.304,306911.475,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 970.47118,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.859,95034.000,0.38%,95034.000,101510.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.024,13.875,187.58%,12.975,8331.634,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206419999997,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 13.819,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.858,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),13.962,13.819,166.41%,12.997,7360.534,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.2341642,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98381.176,97528.000,287.43%,96454.000,89521093.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.706,19.870,3984.53%,17.270,286117.769,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel With Completion CPU count",
          "stddev": 282777.01417680003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.379,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98604.223,97528.000,313.50%,96745.000,97852960.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.750,20.379,4273.78%,17.732,321003.530,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 1015.02275,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.485,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.610,26.485,4.23%,24.526,99.270,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.1256030000000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 265.514,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),266.622,265.514,2.56%,256.229,763.656,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 6.825523200000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.197,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.206,30.197,3.75%,28.941,102.744,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.132725,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 252.304,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),252.476,252.304,2.01%,250.734,746.138,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.0747675999999995,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.698,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.750,25.698,4.19%,24.107,110.460,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.0789250000000001,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 248.127,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.317,248.127,1.67%,243.535,626.414,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.1468939,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.426,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.487,28.426,3.40%,27.746,101.918,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 0.968558,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 249.697,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),249.758,249.697,0.96%,247.683,463.667,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.3976767999999997,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 25.704,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.739,25.704,4.09%,24.012,111.781,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.0527251,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 245.985,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),246.254,245.985,1.89%,242.769,689.478,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.6542006,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.355,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.380,5.355,14.47%,4.845,54.038,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.778486,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.554,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.564,1.554,6.11%,1.348,2.194,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0955604,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.23,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.227,4.230,11.85%,3.652,48.928,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5008995,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.028,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.032,1.028,2.24%,0.960,1.074,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.023116800000000003,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.421,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.863,13.421,22.91%,12.259,84.870,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.1760132999999997,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.301,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.602,14.301,22.06%,13.093,87.655,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.2212012,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 0",
          "value": 27.225,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=0),27.672,27.225,11.67%,26.240,101.983,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 3.2293224,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 1",
          "value": 27.952,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=1),28.312,27.952,11.12%,26.624,101.762,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 3.1482944,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 76.68,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.139,76.680,4.10%,75.531,150.813,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.1626989999999995,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 77.881,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.302,77.881,4.21%,76.970,152.905,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.2965142000000003,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 14.262,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),14.186,14.262,6.47%,13.020,91.477,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9178341999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 14.82,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.880,14.820,6.34%,13.494,84.477,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.943392,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 0",
          "value": 27.232,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=0),27.219,27.232,1.90%,26.072,51.791,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 0.517161,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 1",
          "value": 28.352,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=1),28.227,28.352,2.66%,26.949,73.537,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 0.7508382000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 76.151,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),76.151,76.151,0.67%,74.858,98.558,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.5102117,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 80.662,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.679,80.662,0.64%,79.709,109.922,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.5163456000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 204.032,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),203.539,204.032,3.20%,195.740,766.793,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.513248,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.392,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),86.983,86.392,1.99%,84.641,148.607,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.7309617000000002,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.194,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.412,5.194,15.75%,4.789,68.020,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.85239,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.861,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.858,2.861,3.59%,0.917,3.271,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1026022,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.886,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.890,1.886,7.39%,1.693,25.456,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.139671,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.403,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.417,1.403,28.53%,1.347,125.679,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.4042701,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 859.489,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),858.647,859.489,0.50%,808.930,865.697,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 4.293235,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5501.148,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5497.638,5501.148,0.22%,5477.707,5514.482,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 12.0948036,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 5912.976,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),5934.577,5912.976,1.46%,5843.327,6098.450,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 86.6448242,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 87371.531,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),87302.018,87371.531,0.27%,86845.743,87658.357,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 235.7154486,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 317.082818,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.423289 s\n317.082818 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 2.0050710990172798,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3334,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00400571 s\nbitcracker - total time for whole calculation: 35.3334 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.011650035765323705,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.623,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1270 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1204 1266 32.6907% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1257 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1251 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1248 1283 33.8854% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1254 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1265 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1098 1257 29.8127% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1094 1264 29.704% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1251 1286 33.9669% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1180 1255 32.0391% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1263 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1265 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1132 1261 30.7358% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1250 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1271 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1264 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1259 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1264 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1257 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1140 1262 30.953% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1086 1270 29.4868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1268 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1097 1256 29.7855% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1257 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1135 1261 30.8173% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1276 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1272 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1074 1256 29.161% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1258 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1267 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1253 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1090 1272 29.5954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1267 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1260 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1254 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1118 1266 30.3557% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1104 1260 29.9756% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1256 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1118 1250 30.3557% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1115 1261 30.2742% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1258 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1151 1272 31.2517% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1214 1249 32.9623% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.623 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.10256867618007286,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.5275252316519468,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.57,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.665700e-01   6.159770e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.513680e-01   7.574280e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.425500e-01   7.694490e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.727780e-01   8.245780e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.424140e-01   8.119860e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.455570e-01   7.908190e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.417630e-01   7.873320e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.452950e-01   8.130770e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.430360e-01   7.914510e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.443310e-01   7.660490e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.122e+07    1.122e+07    1.122e+07    0.000e+00       100.00\ncycleInit                           10    3.496e+06    3.496e+06    3.496e+06    0.000e+00       100.00\ncycleTracking                       10    7.728e+06    7.728e+06    7.728e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.977e+06    4.977e+06    4.977e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    2.025e+05    2.025e+05    2.025e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.320e+02    4.320e+02    4.320e+02    0.000e+00       100.00\nFigure Of Merit                 116.57 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.2650157228040082,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 732.939,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47452 s\nsobelfilter - total time for whole calculation: 0.732939 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.802189848489851,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.3053,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.7e-05 s\ndl-cifar - total time for whole calculation: 17.3053 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.32169374152030583,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.64,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.64 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.011547005383792526,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.149,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073618 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0668 s\nProcessing elapsed time : 0.0800 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1490 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0004618802153516978,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 884.024488,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:36:34Z\",\"579177869\",\"2470842\",\"884.024488\",\"3.753687\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:36:38Z\",\"2075162279\",\"2418937\",\"61.681990\",\"0.071789\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:36:48Z\",\"543225677\",\"578118\",\"942.518889\",\"1.000841\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:36:52Z\",\"2075242244\",\"1684115\",\"61.679579\",\"0.050012\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:37:02Z\",\"945008889\",\"452184\",\"541.793944\",\"0.258436\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:37:08Z\",\"2076503512\",\"471436\",\"61.642085\",\"0.013997\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.569795558271592,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.866077,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:04Z\",\"578188704\",\"1602744\",\"885.529475\",\"2.448624\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:08Z\",\"2068987448\",\"2391573\",\"61.866077\",\"0.071418\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:18Z\",\"543841263\",\"973305\",\"941.453599\",\"1.688070\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:22Z\",\"2068106805\",\"627432\",\"61.892359\",\"0.018672\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:32Z\",\"955381410\",\"1179919\",\"535.912273\",\"0.661121\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:38Z\",\"2068056518\",\"405180\",\"61.893862\",\"0.012049\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.13299318818019737,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 941.453599,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:04Z\",\"578188704\",\"1602744\",\"885.529475\",\"2.448624\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:08Z\",\"2068987448\",\"2391573\",\"61.866077\",\"0.071418\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:18Z\",\"543841263\",\"973305\",\"941.453599\",\"1.688070\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:22Z\",\"2068106805\",\"627432\",\"61.892359\",\"0.018672\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:32Z\",\"955381410\",\"1179919\",\"535.912273\",\"0.661121\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:38Z\",\"2068056518\",\"405180\",\"61.893862\",\"0.012049\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 8.529721133073524,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.892359,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:04Z\",\"578188704\",\"1602744\",\"885.529475\",\"2.448624\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:08Z\",\"2068987448\",\"2391573\",\"61.866077\",\"0.071418\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:18Z\",\"543841263\",\"973305\",\"941.453599\",\"1.688070\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:22Z\",\"2068106805\",\"627432\",\"61.892359\",\"0.018672\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:32Z\",\"955381410\",\"1179919\",\"535.912273\",\"0.661121\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:38Z\",\"2068056518\",\"405180\",\"61.893862\",\"0.012049\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.1380478051557993,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 538.590351,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:37:19Z\",\"581476815\",\"1462522\",\"880.521067\",\"2.210065\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:37:23Z\",\"2066507653\",\"2150284\",\"61.940303\",\"0.064367\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:37:33Z\",\"552177731\",\"1195228\",\"927.241167\",\"2.012172\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:37:37Z\",\"2066571687\",\"528239\",\"61.938334\",\"0.015804\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:37:47Z\",\"950629957\",\"520330\",\"538.590351\",\"0.294650\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:37:53Z\",\"2065829074\",\"317574\",\"61.960597\",\"0.009378\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.9447457059417332,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.893862,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:04Z\",\"578188704\",\"1602744\",\"885.529475\",\"2.448624\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:08Z\",\"2068987448\",\"2391573\",\"61.866077\",\"0.071418\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:18Z\",\"543841263\",\"973305\",\"941.453599\",\"1.688070\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:22Z\",\"2068106805\",\"627432\",\"61.892359\",\"0.018672\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:38:32Z\",\"955381410\",\"1179919\",\"535.912273\",\"0.661121\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:38:38Z\",\"2068056518\",\"405180\",\"61.893862\",\"0.012049\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.16797574829817827,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "fae04f4",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T13:38:49.122811+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.849,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.023,23.849,7.30%,23.133,552.151,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7536789999999998,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order with measure completion",
          "value": 28.155,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),28.346,28.155,8.82%,27.225,793.113,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 2.5001172,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.832,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.998,24.832,9.56%,23.925,759.733,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.3898088000000004,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order with measure completion",
          "value": 29.445,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),29.641,29.445,5.90%,27.804,541.465,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 1.748819,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 12.025,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.054,12.025,3.08%,11.093,57.824,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3712632,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order with measure completion",
          "value": 15.737,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),15.778,15.737,2.83%,14.646,63.050,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 0.44651740000000006,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 12.39,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.434,12.390,13.31%,11.497,521.686,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.6549653999999998,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order with measure completion",
          "value": 18.731,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),18.830,18.731,3.55%,15.964,72.323,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 0.6684649999999999,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.768,16.598,153.29%,15.953,8143.923,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.2655123,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.835,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.842,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.997,16.835,135.74%,16.076,7311.811,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.0717278,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion CPU count",
          "value": 135409.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),135595.432,135409.000,5.71%,116231.000,2508279.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),20.667,20.541,115.83%,19.678,7589.440,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel With Completion CPU count",
          "stddev": 7742.4991672,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion",
          "value": 20.969,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),135769.047,135663.000,5.82%,116231.000,2547649.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.146,20.969,116.96%,20.046,7840.395,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 24.7323616,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.335,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.379,17.208,126.35%,16.554,6939.179,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1198995,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.336,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.498,17.336,113.65%,16.630,6284.013,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 19.886477000000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125928.641,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.189,21.946,88.70%,21.019,6242.273,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel With Completion CPU count",
          "stddev": 4671.9525811,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.922,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125989.512,125825.000,3.71%,125520.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.237,21.922,99.27%,20.835,6980.657,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 22.074669899999996,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 28.704,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),28.620,28.704,4.63%,26.892,135.577,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3251060000000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 310.591,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),312.300,310.591,2.29%,302.355,811.688,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.15167,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.853,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.885,25.853,4.68%,24.138,131.376,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2114179999999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 248.156,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.220,248.156,1.75%,241.992,636.980,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.343850000000001,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.414,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.461,28.414,3.83%,27.309,121.735,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.0900562999999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 245.332,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),245.383,245.332,1.02%,243.306,468.577,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.5029066,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.142,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.259,33.142,3.70%,31.250,98.061,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2305830000000002,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.19,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.460,271.190,2.75%,264.781,961.638,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.4651499999999995,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.487,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.567,51.487,2.43%,48.414,113.195,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2530781000000002,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 312.178,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),312.697,312.178,1.58%,309.058,647.844,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.940612600000001,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.81,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.850,5.810,16.48%,5.381,94.025,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.9640799999999999,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.64,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.642,0.640,9.50%,0.502,1.257,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.06099,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.274,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.270,4.274,6.65%,3.735,20.136,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.283955,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 0.937,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.938,0.937,1.74%,0.914,1.005,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.016321199999999998,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.468,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.825,6.468,22.22%,5.955,75.980,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.5165149999999998,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.783,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.915,31.783,4.05%,30.043,99.904,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.2925575,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 0",
          "value": 6.709,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=0),7.068,6.709,26.16%,6.227,138.943,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 1.8489887999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 1",
          "value": 33.14,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=1),33.274,33.140,4.68%,31.469,111.669,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 1.5572232,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.696,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.038,6.696,21.10%,6.164,87.947,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.4850180000000002,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 43.393,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.558,43.393,3.34%,41.892,121.968,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.4548372,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 7.069,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.106,7.069,4.89%,6.705,30.364,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.3474834,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 38.994,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),39.012,38.994,2.01%,36.842,74.916,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.7841411999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 0",
          "value": 7.097,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=0),7.138,7.097,5.19%,6.654,32.381,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 0.3704622,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 1",
          "value": 56.152,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=1),56.221,56.152,1.47%,54.436,100.690,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 0.8264486999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 7.11,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.168,7.110,13.37%,6.752,91.201,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.9583615999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 113.855,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),113.879,113.855,0.63%,111.998,141.659,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.7174377000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 257.15,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),258.629,257.150,2.53%,253.926,790.088,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.543313700000001,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 134.263,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),135.150,134.263,1.79%,131.799,200.780,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.419185,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.754,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.821,5.754,13.71%,5.302,75.473,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.7980590999999999,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.15,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.134,3.150,3.43%,0.403,3.349,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.10749620000000001,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.151,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.162,2.151,14.15%,1.940,91.495,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.305923,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.747,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.760,1.747,5.96%,1.645,10.430,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.104896,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 862.434,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),861.840,862.434,0.43%,822.681,871.091,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.705912,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6907.024,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6926.463,6907.024,0.93%,6864.406,7068.873,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 64.4161059,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7471.314,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7508.283,7471.314,1.80%,7359.757,7752.956,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 135.14909400000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 117418.603,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),117423.054,117418.603,0.30%,116876.044,118034.185,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 352.269162,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 321.261649,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.417783 s\n321.261649 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.05379676016172,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3653,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00400742 s\nbitcracker - total time for whole calculation: 35.3653 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.029783720385469024,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.519,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1073 1266 29.1339% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1043 1258 28.3193% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1268 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1183 1267 32.1206% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1254 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1253 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1278 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1255 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1196 1271 32.4735% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1260 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1248 1284 33.8854% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1268 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1209 1246 32.8265% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1068 1263 28.9981% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1210 1266 32.8537% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1251 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1257 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1266 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1270 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1275 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1265 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1267 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1268 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1259 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1263 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1266 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1263 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1123 1275 30.4914% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1240 1275 33.6682% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1263 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1254 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1113 1263 30.2199% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1028 1263 27.912% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1270 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1027 1254 27.8849% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1260 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1266 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1118 1262 30.3557% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1252 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1271 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1263 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1259 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1273 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.519 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.38782599190873657,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 118.28,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   4.036980e-01   6.056650e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.795390e-01   7.459370e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.718250e-01   7.612910e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   4.015260e-01   8.253170e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.711300e-01   7.889370e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.739660e-01   7.641520e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.710550e-01   7.622160e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.730880e-01   8.008360e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.706770e-01   8.043480e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.733920e-01   7.575990e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.141e+07    1.141e+07    1.141e+07    0.000e+00       100.00\ncycleInit                           10    3.790e+06    3.790e+06    3.790e+06    0.000e+00       100.00\ncycleTracking                       10    7.616e+06    7.616e+06    7.616e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.988e+06    4.988e+06    4.988e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.939e+05    1.939e+05    1.939e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.080e+02    4.080e+02    4.080e+02    0.000e+00       100.00\nFigure Of Merit                 118.28 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.42296571965113555,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 733.095,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47121 s\nsobelfilter - total time for whole calculation: 0.733095 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 7.493254413137186,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.3533,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.5e-05 s\ndl-cifar - total time for whole calculation: 24.3533 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.1159245875558769,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.67,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.67 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.028867513459481443,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1514,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.075930 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0669 s\nProcessing elapsed time : 0.0822 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1514 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.002842885857715705,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 877.006381,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:06Z\",\"583806796\",\"1381328\",\"877.006381\",\"2.069241\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:10Z\",\"2095468756\",\"2253051\",\"61.084241\",\"0.065579\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:20Z\",\"555014311\",\"1678954\",\"922.505476\",\"2.785445\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:24Z\",\"2094584713\",\"461259\",\"61.109968\",\"0.013361\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:34Z\",\"954874572\",\"870548\",\"536.196434\",\"0.488654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:40Z\",\"2092800757\",\"363745\",\"61.162059\",\"0.010630\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.803027077410686,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.084241,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:06Z\",\"583806796\",\"1381328\",\"877.006381\",\"2.069241\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:10Z\",\"2095468756\",\"2253051\",\"61.084241\",\"0.065579\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:20Z\",\"555014311\",\"1678954\",\"922.505476\",\"2.785445\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:24Z\",\"2094584713\",\"461259\",\"61.109968\",\"0.013361\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:34Z\",\"954874572\",\"870548\",\"536.196434\",\"0.488654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:40Z\",\"2092800757\",\"363745\",\"61.162059\",\"0.010630\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.02865323386635517,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 941.557364,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:19:21Z\",\"579821958\",\"2397506\",\"883.041697\",\"3.631694\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:19:24Z\",\"2096754570\",\"2270043\",\"61.046782\",\"0.066005\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:19:35Z\",\"543781445\",\"1013304\",\"941.557364\",\"1.756710\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:19:38Z\",\"2096742859\",\"805844\",\"61.047073\",\"0.023456\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:19:49Z\",\"954240748\",\"631166\",\"536.552416\",\"0.354698\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:19:55Z\",\"2095710794\",\"638660\",\"61.077134\",\"0.018540\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 12.602796811632595,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.109968,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:06Z\",\"583806796\",\"1381328\",\"877.006381\",\"2.069241\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:10Z\",\"2095468756\",\"2253051\",\"61.084241\",\"0.065579\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:20Z\",\"555014311\",\"1678954\",\"922.505476\",\"2.785445\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:24Z\",\"2094584713\",\"461259\",\"61.109968\",\"0.013361\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:34Z\",\"954874572\",\"870548\",\"536.196434\",\"0.488654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:40Z\",\"2092800757\",\"363745\",\"61.162059\",\"0.010630\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.047574831668996835,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 536.552416,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:19:21Z\",\"579821958\",\"2397506\",\"883.041697\",\"3.631694\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:19:24Z\",\"2096754570\",\"2270043\",\"61.046782\",\"0.066005\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:19:35Z\",\"543781445\",\"1013304\",\"941.557364\",\"1.756710\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:19:38Z\",\"2096742859\",\"805844\",\"61.047073\",\"0.023456\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:19:49Z\",\"954240748\",\"631166\",\"536.552416\",\"0.354698\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:19:55Z\",\"2095710794\",\"638660\",\"61.077134\",\"0.018540\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.8983241347149644,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.162059,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:06Z\",\"583806796\",\"1381328\",\"877.006381\",\"2.069241\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:10Z\",\"2095468756\",\"2253051\",\"61.084241\",\"0.065579\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:20Z\",\"555014311\",\"1678954\",\"922.505476\",\"2.785445\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:24Z\",\"2094584713\",\"461259\",\"61.109968\",\"0.013361\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:20:34Z\",\"954874572\",\"870548\",\"536.196434\",\"0.488654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:20:40Z\",\"2092800757\",\"363745\",\"61.162059\",\"0.010630\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.05282017251959574,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "fae04f4",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T13:21:36.529306+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.231,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.392,21.231,2.44%,20.632,90.202,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5219647999999999,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order with measure completion",
          "value": 24.792,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),24.958,24.792,8.16%,23.717,643.556,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 2.0365728,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 22.05,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.213,22.050,8.14%,21.095,566.278,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.8081382000000001,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order with measure completion",
          "value": 25.231,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),25.407,25.231,6.84%,23.959,544.923,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 1.7378388,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.883,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.917,11.883,2.52%,11.162,27.035,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3003084,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order with measure completion",
          "value": 15.333,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),15.374,15.333,2.54%,14.434,64.570,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 0.3904996,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.741,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.783,11.741,2.81%,11.045,52.012,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.33110229999999996,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order with measure completion",
          "value": 18.238,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),18.391,18.238,3.67%,16.594,77.911,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 0.6749496999999999,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists"
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.861,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.156,14.008,202.71%,13.245,9088.133,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29207180000003,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 13.982,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.859,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.116,13.982,162.67%,13.191,7274.387,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.962497199999998,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98576.941,97528.000,310.91%,96528.000,97018093.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.722,20.413,4238.46%,17.852,317968.232,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel With Completion CPU count",
          "stddev": 306485.56726310006,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion",
          "value": 20.307,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98527.687,97528.000,301.49%,96524.000,94033276.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.409,20.307,4052.74%,17.790,300023.474,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 948.7059065999999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.861,95034.000,0.38%,95034.000,101510.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.065,13.902,207.19%,13.028,9228.652,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29207180000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 13.858,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),13.992,13.858,163.28%,13.118,7217.974,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.846137600000002,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98644.857,97528.000,323.12%,96497.000,100891782.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),24.740,20.895,4660.50%,18.908,364629.771,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel With Completion CPU count",
          "stddev": 318741.2619384,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.299,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98386.473,97528.000,280.23%,96669.000,87283926.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.048,20.299,3823.96%,17.279,278721.845,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel With Completion",
          "stddev": 881.3463008,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. "
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.757,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.832,26.757,4.27%,25.219,103.199,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.1457263999999998,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 265.466,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),266.950,265.466,2.55%,257.550,780.719,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 6.807224999999999,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.038,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.101,30.038,3.83%,28.792,108.395,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.1528683,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 257.391,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),257.432,257.391,1.65%,253.829,658.762,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.247628000000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.415,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.457,26.415,4.30%,24.801,104.955,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.137651,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 246.177,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),246.381,246.177,1.58%,242.311,610.072,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.8928198000000003,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 29.164,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.184,29.164,3.50%,28.257,109.052,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.0214400000000001,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 256.271,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),256.379,256.271,1.62%,255.384,660.741,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.153339800000001,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 25.598,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.670,25.598,4.42%,24.093,111.719,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.134614,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 248.549,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.608,248.549,1.76%,241.833,629.184,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.3755008,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.313,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.354,5.313,14.70%,4.647,72.989,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.787038,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.554,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.567,1.554,6.91%,1.325,2.240,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.10827969999999999,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.238,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.233,4.238,10.59%,3.679,43.614,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.4482746999999999,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.005,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.003,1.005,2.74%,0.937,1.097,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0274822,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.019,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.269,13.019,26.54%,11.697,106.437,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.5215925999999995,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.381,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.739,14.381,22.08%,13.035,89.099,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.2543712,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 0",
          "value": 26.972,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=0),27.439,26.972,13.27%,25.937,112.681,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 3.6411552999999994,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 1",
          "value": 28.229,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=1),28.688,28.229,12.00%,27.195,105.112,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 3.44256,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 77.815,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.227,77.815,4.24%,76.493,151.382,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.3168248,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 78.522,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.982,78.522,4.83%,77.182,180.380,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.8148306,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.648,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.694,13.648,5.98%,12.672,83.236,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8189012000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 14.879,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.046,14.879,5.30%,14.438,67.426,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.797438,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 0",
          "value": 27.334,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=0),27.257,27.334,2.51%,25.980,65.626,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 0.6841507,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 1",
          "value": 28.672,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=10",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=10 KernelExecutionTime=1 MeasureCompletionTime=1),28.554,28.672,2.08%,27.547,60.922,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 10",
          "stddev": 0.5939232,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 77.42,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.477,77.420,0.82%,76.504,123.293,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.6353114,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 78.827,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.868,78.827,0.56%,77.686,100.985,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.4416608,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 204.655,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),204.208,204.655,3.06%,196.629,747.948,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.2487648,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.105,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),86.712,86.105,1.97%,84.313,155.293,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.7082264,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.237,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.302,5.237,14.94%,4.814,75.537,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.7921188,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.871,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.864,2.871,3.28%,0.439,3.256,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.09393919999999999,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.895,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.904,1.895,6.21%,1.698,19.010,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1182384,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.4,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.414,1.400,33.61%,1.349,124.208,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.4752454,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.959,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.211,860.959,0.48%,815.484,870.489,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 4.1290128,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5529.765,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5528.900,5529.765,0.30%,5490.731,5559.231,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 16.5867,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 5937.448,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),5946.993,5937.448,1.04%,5830.441,6068.785,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 61.8487272,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 85236.325,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),85210.245,85236.325,0.38%,84601.095,85553.788,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 323.798931,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 316.604495,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.423929 s\n316.604495 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 0.34947997788476004,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3548,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00396816 s\nbitcracker - total time for whole calculation: 35.3548 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.024556872765073498,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 239.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.1547005383792515,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.78,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.637570e-01   6.109740e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.518740e-01   7.531420e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.409480e-01   7.684670e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.697240e-01   8.234640e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.434230e-01   8.136650e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.455370e-01   7.876590e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.428750e-01   7.869690e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.463430e-01   8.130080e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.433630e-01   7.909860e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.467340e-01   7.656370e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.121e+07    1.121e+07    1.121e+07    0.000e+00       100.00\ncycleInit                           10    3.495e+06    3.495e+06    3.495e+06    0.000e+00       100.00\ncycleTracking                       10    7.714e+06    7.714e+06    7.714e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.974e+06    4.974e+06    4.974e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.927e+05    1.927e+05    1.927e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.250e+02    4.250e+02    4.250e+02    0.000e+00       100.00\nFigure Of Merit                 116.78 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.2844878439113636,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 721.985,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.48746 s\nsobelfilter - total time for whole calculation: 0.721985 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 16.28903067506878,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.3975,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.5e-05 s\ndl-cifar - total time for whole calculation: 17.3975 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.10098961992865194,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.64,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.64 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02516611478423574,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1488,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073367 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0672 s\nProcessing elapsed time : 0.0792 s\nStoring    elapsed time : 0.0025 s\nTotal      elapsed time : 0.1488 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.00015275252316518997,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 878.045046,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:02:34Z\",\"583122318\",\"2523205\",\"878.045046\",\"3.796671\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:02:38Z\",\"2069392987\",\"2522633\",\"61.853960\",\"0.075289\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:02:48Z\",\"552524393\",\"2957081\",\"926.677009\",\"4.925779\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:02:52Z\",\"2066020366\",\"387603\",\"61.954861\",\"0.011585\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:02Z\",\"948865872\",\"396560\",\"539.591618\",\"0.225083\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:08Z\",\"2068418622\",\"1638887\",\"61.883055\",\"0.048966\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.8748917001701066,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.599032,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:19Z\",\"581477616\",\"2477169\",\"880.528127\",\"3.732475\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:23Z\",\"2077956525\",\"2165361\",\"61.599032\",\"0.064092\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:33Z\",\"551817149\",\"540065\",\"927.844288\",\"0.906086\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:37Z\",\"2074301232\",\"174160\",\"61.707528\",\"0.005001\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:47Z\",\"944809694\",\"452961\",\"541.908171\",\"0.258647\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:53Z\",\"2072991225\",\"919198\",\"61.746532\",\"0.027314\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.19262375569055276,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 927.844288,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:19Z\",\"581477616\",\"2477169\",\"880.528127\",\"3.732475\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:23Z\",\"2077956525\",\"2165361\",\"61.599032\",\"0.064092\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:33Z\",\"551817149\",\"540065\",\"927.844288\",\"0.906086\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:37Z\",\"2074301232\",\"174160\",\"61.707528\",\"0.005001\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:47Z\",\"944809694\",\"452961\",\"541.908171\",\"0.258647\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:53Z\",\"2072991225\",\"919198\",\"61.746532\",\"0.027314\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 8.533209080973405,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.707528,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:19Z\",\"581477616\",\"2477169\",\"880.528127\",\"3.732475\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:23Z\",\"2077956525\",\"2165361\",\"61.599032\",\"0.064092\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:33Z\",\"551817149\",\"540065\",\"927.844288\",\"0.906086\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:37Z\",\"2074301232\",\"174160\",\"61.707528\",\"0.005001\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:47Z\",\"944809694\",\"452961\",\"541.908171\",\"0.258647\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:53Z\",\"2072991225\",\"919198\",\"61.746532\",\"0.027314\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.19255189429432615,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 539.591618,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:02:34Z\",\"583122318\",\"2523205\",\"878.045046\",\"3.796671\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:02:38Z\",\"2069392987\",\"2522633\",\"61.853960\",\"0.075289\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:02:48Z\",\"552524393\",\"2957081\",\"926.677009\",\"4.925779\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:02:52Z\",\"2066020366\",\"387603\",\"61.954861\",\"0.011585\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:02Z\",\"948865872\",\"396560\",\"539.591618\",\"0.225083\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:08Z\",\"2068418622\",\"1638887\",\"61.883055\",\"0.048966\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.9252268905246006,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.746532,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:19Z\",\"581477616\",\"2477169\",\"880.528127\",\"3.732475\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:23Z\",\"2077956525\",\"2165361\",\"61.599032\",\"0.064092\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:33Z\",\"551817149\",\"540065\",\"927.844288\",\"0.906086\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:37Z\",\"2074301232\",\"174160\",\"61.707528\",\"0.005001\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T13:03:47Z\",\"944809694\",\"452961\",\"541.908171\",\"0.258647\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T13:03:53Z\",\"2072991225\",\"919198\",\"61.746532\",\"0.027314\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.16003765830683003,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "fae04f4",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T13:04:03.886955+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 12.142,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.178,12.142,3.40%,11.266,81.267,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.41405200000000003,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 12.093,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.127,12.093,2.85%,11.218,50.124,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3456195,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.295,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.470,23.295,9.69%,22.363,717.555,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.274243,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.608,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.792,24.608,7.13%,23.712,557.758,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7676696,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 256.712,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),258.205,256.712,2.65%,253.071,828.218,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.842432499999999,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.932,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.919,133.932,1.78%,132.192,217.963,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.4015582,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.743,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.823,5.743,12.70%,5.306,56.079,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.7395210000000001,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.165,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.147,3.165,3.40%,0.389,3.401,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.106998,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.127,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.141,2.127,5.59%,1.952,16.872,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1196819,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.701,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.715,1.701,6.33%,1.594,16.246,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1085595,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 861.253,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.802,861.253,0.43%,820.268,872.601,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.7014486,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 28.935,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),28.817,28.935,6.47%,27.246,158.936,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.8644598999999997,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 308.89,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),310.591,308.890,2.28%,300.178,791.589,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.0814748,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.756,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.721,26.756,5.22%,24.749,139.004,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3948361999999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.882,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.929,28.882,4.52%,28.037,143.797,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3075907999999998,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 247.923,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.128,247.923,1.70%,244.473,639.652,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.218176,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 251.486,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.565,251.486,1.64%,250.689,649.751,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.125666,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.84,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.888,5.840,12.50%,5.273,57.540,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.736,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.285,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.313,4.285,12.18%,3.710,51.107,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5253233999999999,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.64,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.638,0.640,9.79%,0.502,1.234,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.062460199999999994,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 0.96,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.972,0.960,1.82%,0.914,1.028,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.017690400000000002,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.47,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.901,6.470,30.28%,6.114,136.485,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 2.0896228,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.401,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.539,31.401,3.78%,29.592,70.533,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.1921742,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.486,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.842,6.486,19.18%,6.167,59.452,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.3122956,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 43.258,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.374,43.258,2.54%,41.435,86.976,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.1016996000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 7.115,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.153,7.115,5.26%,6.712,30.783,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.37624779999999997,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 37.857,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),37.875,37.857,2.32%,36.158,92.482,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8786999999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 7.277,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.323,7.277,5.15%,6.877,35.480,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.37713450000000004,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 114.124,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),114.151,114.124,0.65%,112.257,142.655,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.7419815000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.614,16.432,155.11%,15.819,8164.785,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.466,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.648,16.466,145.41%,15.824,7670.831,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 24.2078568,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.306,17.122,120.04%,16.585,6564.559,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1199392,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.117,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.339,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.211,17.117,114.50%,16.536,6248.392,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 19.706595,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125935.635,125825.000,3.75%,125216.000,1611710.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.184,21.892,155.13%,20.956,10889.270,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4722.5863125,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.731,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125944.462,125825.000,3.71%,125520.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.025,21.731,97.07%,20.578,6758.622,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 21.379667499999996,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6910.021,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6928.320,6910.021,0.90%,6877.838,7050.195,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 62.35488,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7521.994,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7535.227,7521.994,1.38%,7343.145,7775.519,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 103.98613259999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 117617.926,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),117537.030,117617.926,0.48%,116416.530,118357.395,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 564.177744,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.587,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.696,33.587,4.00%,31.528,118.972,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.34784,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.92,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),52.030,51.920,3.29%,48.710,100.742,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.711787,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.351,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.628,271.351,2.65%,265.121,937.781,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.198142,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 313.41,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),313.768,313.410,1.46%,310.466,663.480,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.5810128,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 321.756159,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.417141 s\n321.756159 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.2978661477474356,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3286,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00408307 s\nbitcracker - total time for whole calculation: 35.3286 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.012124493116551206,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.632,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1263 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1256 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1210 1243 32.8537% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1199 1259 32.555% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1260 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1269 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1255 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1266 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1271 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1266 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1259 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1065 1262 28.9166% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1255 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1125 1266 30.5458% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1259 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1269 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1259 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1258 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1264 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1263 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1081 1253 29.3511% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1256 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1245 1281 33.804% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1267 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1263 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1273 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1261 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1267 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1264 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1053 1263 28.5908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1261 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1261 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1267 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1273 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1251 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1270 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1265 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1266 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1260 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1264 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.632 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.14457293430422566,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 241.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 118.16,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.678680e-01   6.070420e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.507060e-01   7.454300e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.428510e-01   7.600670e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.684720e-01   8.235100e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.425470e-01   7.874770e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.444970e-01   7.628390e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.431420e-01   7.615110e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.436600e-01   7.991350e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.422000e-01   8.028580e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.430670e-01   7.740600e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.111e+07    1.111e+07    1.111e+07    0.000e+00       100.00\ncycleInit                           10    3.489e+06    3.489e+06    3.489e+06    0.000e+00       100.00\ncycleTracking                       10    7.624e+06    7.624e+06    7.624e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.972e+06    4.972e+06    4.972e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.989e+05    1.989e+05    1.989e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.160e+02    4.160e+02    4.160e+02    0.000e+00       100.00\nFigure Of Merit                 118.16 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.4409459528483455,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 723.24,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.4706 s\nsobelfilter - total time for whole calculation: 0.72324 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 35.94393951697558,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.2531,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.4e-05 s\ndl-cifar - total time for whole calculation: 24.2531 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.03842035051028773,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.67,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.67 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.03605551275464005,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1515,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.075947 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0674 s\nProcessing elapsed time : 0.0817 s\nStoring    elapsed time : 0.0024 s\nTotal      elapsed time : 0.1515 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0003055050463303981,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 881.468348,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:35:55Z\",\"580851809\",\"1432861\",\"881.468348\",\"2.168535\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:35:58Z\",\"2096670012\",\"2737771\",\"61.049270\",\"0.079598\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:36:09Z\",\"541448681\",\"544900\",\"945.612080\",\"0.949638\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:36:12Z\",\"2092046581\",\"302425\",\"61.184107\",\"0.008795\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:36:23Z\",\"945537821\",\"891597\",\"541.491152\",\"0.510470\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:36:28Z\",\"2094851726\",\"1302074\",\"61.102195\",\"0.037951\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.2059641065181017,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.04927,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:35:55Z\",\"580851809\",\"1432861\",\"881.468348\",\"2.168535\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:35:58Z\",\"2096670012\",\"2737771\",\"61.049270\",\"0.079598\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:36:09Z\",\"541448681\",\"544900\",\"945.612080\",\"0.949638\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:36:12Z\",\"2092046581\",\"302425\",\"61.184107\",\"0.008795\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:36:23Z\",\"945537821\",\"891597\",\"541.491152\",\"0.510470\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:36:28Z\",\"2094851726\",\"1302074\",\"61.102195\",\"0.037951\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.09052730732951943,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 942.193113,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:35:09Z\",\"582672487\",\"2749098\",\"878.725366\",\"4.135785\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:35:13Z\",\"2099928778\",\"2601236\",\"60.954523\",\"0.075362\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:35:24Z\",\"543413673\",\"669687\",\"942.193113\",\"1.160333\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:35:27Z\",\"2095450996\",\"103989\",\"61.084702\",\"0.002553\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:35:37Z\",\"961811429\",\"1636932\",\"532.330113\",\"0.906614\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:35:43Z\",\"2094155324\",\"930676\",\"61.122505\",\"0.027135\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.036167069486729,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.184107,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:35:55Z\",\"580851809\",\"1432861\",\"881.468348\",\"2.168535\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:35:58Z\",\"2096670012\",\"2737771\",\"61.049270\",\"0.079598\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:36:09Z\",\"541448681\",\"544900\",\"945.612080\",\"0.949638\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:36:12Z\",\"2092046581\",\"302425\",\"61.184107\",\"0.008795\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:36:23Z\",\"945537821\",\"891597\",\"541.491152\",\"0.510470\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:36:28Z\",\"2094851726\",\"1302074\",\"61.102195\",\"0.037951\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.07896261746126008,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.792326,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:34:24Z\",\"579793250\",\"2773419\",\"883.089493\",\"4.204606\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:34:27Z\",\"2093712012\",\"2562433\",\"61.135511\",\"0.074712\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:34:38Z\",\"547185900\",\"625274\",\"935.697602\",\"1.069677\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:34:42Z\",\"2090114163\",\"646814\",\"61.240679\",\"0.018880\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:34:52Z\",\"952040855\",\"766839\",\"537.792326\",\"0.433135\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:34:58Z\",\"2091012532\",\"563536\",\"61.214366\",\"0.016392\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.6087185528294805,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.122505,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:35:09Z\",\"582672487\",\"2749098\",\"878.725366\",\"4.135785\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:35:13Z\",\"2099928778\",\"2601236\",\"60.954523\",\"0.075362\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:35:24Z\",\"543413673\",\"669687\",\"942.193113\",\"1.160333\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:35:27Z\",\"2095450996\",\"103989\",\"61.084702\",\"0.002553\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:35:37Z\",\"961811429\",\"1636932\",\"532.330113\",\"0.906614\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:35:43Z\",\"2094155324\",\"930676\",\"61.122505\",\"0.027135\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.05976798566400924,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "1041db6",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T12:36:39.758785+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.981,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.033,11.981,3.28%,11.158,91.225,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.39468239999999993,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.876,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.912,11.876,2.41%,11.145,28.663,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.28707920000000003,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.256,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.409,21.256,2.40%,20.597,88.408,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5138159999999999,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 21.81,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.979,21.810,9.42%,21.218,661.194,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.0704218,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 200.993,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),201.643,200.993,3.19%,195.665,744.326,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.432411699999999,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.439,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),87.057,86.439,1.87%,84.766,108.048,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.6279659000000002,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.184,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.479,5.184,18.55%,4.753,88.624,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.0163545,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.833,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.833,2.833,3.89%,0.306,3.206,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.11020370000000002,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.873,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.875,1.873,6.20%,1.676,20.502,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.11624999999999999,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.417,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.431,1.417,28.52%,1.359,127.625,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.4081212,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 864.508,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),864.144,864.508,0.36%,829.187,871.997,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.1109184,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.706,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.803,26.706,5.17%,25.026,151.034,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3857150999999999,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.749,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.723,30.749,4.94%,28.850,151.697,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5177162000000002,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 268.265,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),269.253,268.265,2.61%,259.512,783.446,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.027503299999999,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 257.862,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),257.725,257.862,2.07%,253.081,741.048,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.334907500000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.704,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.761,25.704,4.89%,24.152,132.581,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2597129,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 29.056,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.088,29.056,3.76%,28.282,120.839,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.0937088,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 247.865,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.979,247.865,1.63%,242.885,620.317,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.0420577,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 250.688,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),250.719,250.688,1.09%,248.803,496.827,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.7328371,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.35,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.380,5.350,14.86%,4.797,61.169,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.7994679999999998,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.277,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.276,4.277,15.28%,3.707,64.744,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.6533728,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.554,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.547,1.554,6.47%,1.348,2.217,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.10009089999999998,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.142,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.148,1.142,1.94%,1.097,1.211,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.022271199999999998,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.128,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.802,13.128,28.35%,12.253,161.671,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.9128670000000003,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.521,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.933,14.521,22.77%,13.242,94.031,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.4002440999999997,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 77.556,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.107,77.556,4.96%,76.597,186.807,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.8741071999999996,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 78.506,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.990,78.506,4.29%,77.401,155.561,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.388671,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.912,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),14.061,13.912,6.12%,13.106,70.650,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8605332000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 15.258,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.256,15.258,4.75%,13.958,61.276,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.72466,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 78.305,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.308,78.305,0.51%,77.373,100.630,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.3993708000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 80.764,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.577,80.764,2.49%,76.922,103.609,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 2.0063673,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.861,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.294,14.114,246.54%,13.379,11140.418,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29207180000003,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 13.771,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.858,95034.000,0.38%,95034.000,101510.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),13.977,13.771,309.57%,13.028,13683.186,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 43.2685989,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.105,13.964,169.73%,13.146,7561.859,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206800000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 13.964,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.105,13.964,169.73%,13.146,7561.859,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.940416499999998,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98614.140,97528.000,320.30%,96669.000,99981323.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.862,20.304,4471.58%,18.211,337444.935,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 315861.09042,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.304,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98614.140,97528.000,320.30%,96669.000,99981323.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.862,20.304,4471.58%,18.211,337444.935,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1067.0084196,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5501.13,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5501.493,5501.130,0.25%,5477.811,5524.723,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 13.753732500000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 5973.042,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),5971.714,5973.042,1.13%,5877.808,6111.455,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 67.4803682,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 86514.726,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),86457.962,86514.726,0.34%,85669.166,86731.320,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 293.9570708,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.084,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.167,26.084,4.47%,24.596,112.543,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.1696649,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 249.346,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),249.519,249.346,1.74%,245.952,662.010,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.3416306,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 323.117111,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.415384 s\n323.117111 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 2.295698918591852,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3483,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00400281 s\nbitcracker - total time for whole calculation: 35.3483 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.03931602726624103,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 207.183,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1257 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1063 1274 28.8623% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1270 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1261 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1267 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1266 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1259 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1259 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1267 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1267 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1259 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1146 1268 31.1159% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1153 1264 31.306% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1275 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1138 1258 30.8987% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1259 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1271 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1265 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1201 1249 32.6093% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1269 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1272 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1267 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1267 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1066 1256 28.9438% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1268 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1159 1263 31.4689% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1280 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1257 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1274 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1275 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1262 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1148 1250 31.1702% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1093 1253 29.6769% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1265 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1048 1274 28.4551% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1268 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1271 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1271 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1260 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1264 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 207.183 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.5671836857080268,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 237.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.5773502691896257,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.75,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.672850e-01   6.104410e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.589290e-01   7.538980e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.496260e-01   7.695990e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.775430e-01   8.232880e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.515390e-01   8.120870e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.534240e-01   7.894690e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.511860e-01   7.883490e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.529540e-01   8.108690e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.513490e-01   7.922620e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.516810e-01   7.658700e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.128e+07    1.128e+07    1.128e+07    0.000e+00       100.00\ncycleInit                           10    3.566e+06    3.566e+06    3.566e+06    0.000e+00       100.00\ncycleTracking                       10    7.716e+06    7.716e+06    7.716e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.988e+06    4.988e+06    4.988e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.889e+05    1.889e+05    1.889e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.350e+02    4.350e+02    4.350e+02    0.000e+00       100.00\nFigure Of Merit                 116.75 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.10785793124909096,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 730.612,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.48318 s\nsobelfilter - total time for whole calculation: 0.730612 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 26.322867935187727,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.6577,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.5e-05 s\ndl-cifar - total time for whole calculation: 17.6577 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.15782822941413222,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.65,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.65 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.015275252316519577,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.149,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073930 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0667 s\nProcessing elapsed time : 0.0800 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1490 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0006429100507328663,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 882.066386,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:17:42Z\",\"580461027\",\"2064302\",\"882.066386\",\"3.125499\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:17:46Z\",\"2069567197\",\"2556426\",\"61.848756\",\"0.076294\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:17:56Z\",\"537443258\",\"453711\",\"952.659250\",\"0.803320\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:17:59Z\",\"2069549898\",\"402119\",\"61.849199\",\"0.011941\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:10Z\",\"942994660\",\"717532\",\"542.951363\",\"0.412745\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:18:15Z\",\"2067377675\",\"414687\",\"61.914185\",\"0.012344\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 9.242549149529193,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.621646,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:27Z\",\"577163014\",\"2208865\",\"887.108093\",\"3.384806\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:18:30Z\",\"2077194952\",\"2687049\",\"61.621646\",\"0.079571\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:41Z\",\"544995041\",\"414118\",\"939.458523\",\"0.713435\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:18:44Z\",\"2079056033\",\"1190105\",\"61.566418\",\"0.035170\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:55Z\",\"952284568\",\"934354\",\"537.654827\",\"0.527417\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:19:00Z\",\"2077438338\",\"442674\",\"61.614346\",\"0.012990\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.13633153581740937,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 943.918632,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:19:12Z\",\"589064186\",\"2279721\",\"869.185615\",\"3.354176\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:19:15Z\",\"2077771735\",\"2543585\",\"61.604531\",\"0.075280\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:19:26Z\",\"542420052\",\"531905\",\"943.918632\",\"0.925325\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:19:29Z\",\"2075976507\",\"384240\",\"61.657732\",\"0.011332\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:19:40Z\",\"953081795\",\"518190\",\"537.204806\",\"0.292221\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:19:45Z\",\"2079753189\",\"614699\",\"61.545769\",\"0.018192\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 6.715034979337231,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.657732,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:19:12Z\",\"589064186\",\"2279721\",\"869.185615\",\"3.354176\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:19:15Z\",\"2077771735\",\"2543585\",\"61.604531\",\"0.075280\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:19:26Z\",\"542420052\",\"531905\",\"943.918632\",\"0.925325\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:19:29Z\",\"2075976507\",\"384240\",\"61.657732\",\"0.011332\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:19:40Z\",\"953081795\",\"518190\",\"537.204806\",\"0.292221\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:19:45Z\",\"2079753189\",\"614699\",\"61.545769\",\"0.018192\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.14431617641253244,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.654827,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:27Z\",\"577163014\",\"2208865\",\"887.108093\",\"3.384806\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:18:30Z\",\"2077194952\",\"2687049\",\"61.621646\",\"0.079571\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:41Z\",\"544995041\",\"414118\",\"939.458523\",\"0.713435\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:18:44Z\",\"2079056033\",\"1190105\",\"61.566418\",\"0.035170\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:55Z\",\"952284568\",\"934354\",\"537.654827\",\"0.527417\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:19:00Z\",\"2077438338\",\"442674\",\"61.614346\",\"0.012990\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.1957974970781873,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.614346,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:27Z\",\"577163014\",\"2208865\",\"887.108093\",\"3.384806\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:18:30Z\",\"2077194952\",\"2687049\",\"61.621646\",\"0.079571\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:41Z\",\"544995041\",\"414118\",\"939.458523\",\"0.713435\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:18:44Z\",\"2079056033\",\"1190105\",\"61.566418\",\"0.035170\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T12:18:55Z\",\"952284568\",\"934354\",\"537.654827\",\"0.527417\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T12:19:00Z\",\"2077438338\",\"442674\",\"61.614346\",\"0.012990\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.19593220762379593,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "1041db6",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T12:19:56.629306+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.893,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.930,11.893,3.15%,11.129,75.972,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.375795,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 12.007,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.056,12.007,2.45%,11.279,29.551,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.29537199999999997,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.605,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.757,21.605,8.34%,20.850,573.818,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.8145338000000002,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 22.243,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.403,22.243,7.52%,21.553,530.652,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.6847055999999996,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 204.264,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),205.231,204.264,3.30%,199.870,803.538,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.772623,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.226,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),86.866,86.226,1.93%,84.801,142.026,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.6765137999999997,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.313,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.424,5.313,13.13%,4.895,34.750,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.7121712,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.819,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.867,2.819,5.47%,0.318,3.255,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1568249,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.955,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.961,1.955,6.42%,1.713,18.678,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.12589619999999999,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.448,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.456,1.448,29.08%,1.356,131.469,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.42340479999999997,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 862.73,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),861.834,862.730,0.52%,822.681,868.386,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 4.4815368,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.445,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.386,26.445,6.05%,24.688,150.953,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.596353,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.696,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.771,30.696,4.41%,29.032,152.511,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3570011,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 269.267,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),270.889,269.267,2.72%,263.509,861.554,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.368180800000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 250.31,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),250.499,250.310,1.92%,249.368,708.747,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.809580799999999,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.878,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.981,25.878,6.39%,24.324,141.378,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.6601859,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.565,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.620,28.565,4.69%,27.865,147.146,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.342278,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 247.58,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.780,247.580,1.89%,243.786,693.807,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.683042,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 253.654,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),253.708,253.654,2.00%,250.644,742.398,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.07416,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.357,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.400,5.357,16.50%,4.866,63.172,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.8910000000000001,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.317,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.331,4.317,12.30%,3.797,51.305,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5327130000000001,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.531,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.529,1.531,7.54%,1.234,2.148,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.11528659999999999,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 0.982,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.990,0.982,1.82%,0.960,1.051,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.018018,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.033,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.687,13.033,30.80%,12.001,141.820,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 4.215596,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.291,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.856,14.291,23.13%,13.445,100.365,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.4361927999999997,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 79.262,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),79.808,79.262,4.12%,78.438,157.074,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.2880896,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 79.009,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),79.415,79.009,4.00%,77.997,149.868,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.1766000000000005,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 14.222,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),14.249,14.222,2.94%,13.418,47.059,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.4189206,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 15.16,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.026,15.160,6.64%,13.911,95.862,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9977264,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 78.975,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.973,78.975,0.91%,78.060,138.351,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.7186543000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 77.447,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),77.472,77.447,0.86%,76.532,131.943,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.6662591999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.789,14.641,184.39%,13.675,8616.372,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.577,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.674,14.577,137.57%,13.593,6368.476,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.187021799999997,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.858,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.349,14.180,216.71%,13.402,9847.127,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206039999997,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.18,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.858,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.349,14.180,216.71%,13.402,9847.127,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 31.0957179,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97313.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98179.999,97313.000,257.94%,96454.000,80179678.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.229,19.723,3404.81%,17.122,239354.896,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 253245.4894206,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.214,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98297.372,97313.000,270.41%,96669.000,84153387.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.800,20.214,3487.29%,17.541,251455.817,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 795.10212,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5434.508,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5432.936,5434.508,0.34%,5405.087,5469.382,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 18.4719824,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11083.255,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),10956.074,11083.255,5.48%,10149.020,11828.495,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 600.3928552000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17948.083,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18224.216,17948.083,7.62%,15712.964,24071.638,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1388.6852592,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 771.72,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),761.089,771.720,7.10%,533.971,1248.304,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.037319,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6114.567,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6131.136,6114.567,1.26%,6035.153,6323.540,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 77.25231360000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6322.626,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6321.499,6322.626,2.30%,6100.008,6618.313,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 145.394477,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17474.861,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),17806.534,17474.861,8.51%,15119.341,22902.705,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1515.3360433999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 776.487,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),766.913,776.487,7.13%,383.207,1374.429,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.6808969,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29711.428,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29741.401,29711.428,0.32%,29647.347,29916.175,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 95.17248320000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 86397.83,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),86283.088,86397.830,0.31%,85790.508,86657.545,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 267.4775728,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 25.998,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.111,25.998,5.10%,24.618,139.027,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.331661,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 247.036,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.216,247.036,1.83%,241.548,644.024,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.524052800000001,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 316.656501,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.423859 s\n316.656501 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.318883117803554,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3605,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00396667 s\nbitcracker - total time for whole calculation: 35.3605 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.01839411137656028,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.651,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1139 1277 30.9259% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1276 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1259 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1113 1272 30.2199% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1285 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1183 1273 32.1206% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1261 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1268 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1254 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1272 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1261 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1258 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1148 1257 31.1702% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1272 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1270 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1258 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1113 1259 30.2199% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1266 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1093 1262 29.6769% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1260 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1275 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1176 1248 31.9305% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1102 1272 29.9213% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1256 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1269 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1258 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1251 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1080 1246 29.3239% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1264 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1271 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1058 1270 28.7266% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1264 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1259 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1130 1281 30.6815% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1084 1261 29.4325% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1082 1262 29.3782% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1102 1256 29.9213% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1200 1262 32.5821% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1257 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1283 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1271 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.651 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.08259136355171588,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 239.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.1547005383792515,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.25,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.652770e-01   6.138760e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.527770e-01   7.566760e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.440970e-01   7.717470e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.721120e-01   8.255610e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.438840e-01   7.999870e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.468860e-01   7.735000e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.441410e-01   7.740650e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.463750e-01   7.940680e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.438110e-01   7.932450e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.467240e-01   7.806640e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.119e+07    1.119e+07    1.119e+07    0.000e+00       100.00\ncycleInit                           10    3.506e+06    3.506e+06    3.506e+06    0.000e+00       100.00\ncycleTracking                       10    7.683e+06    7.683e+06    7.683e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.994e+06    4.994e+06    4.994e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.971e+05    1.971e+05    1.971e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.430e+02    4.430e+02    4.430e+02    0.000e+00       100.00\nFigure Of Merit                 117.25 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.30353473167552264,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 727.463,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.46738 s\nsobelfilter - total time for whole calculation: 0.727463 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 5.387299852430728,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.4544,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8e-05 s\ndl-cifar - total time for whole calculation: 17.4544 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.2877444931416304,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.64,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.64 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.010000000000000009,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1492,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073960 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0670 s\nProcessing elapsed time : 0.0800 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1492 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0004163331998932229,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 878.708813,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:33:47Z\",\"582678454\",\"1975415\",\"878.708813\",\"2.969728\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:33:51Z\",\"2081689318\",\"2208373\",\"61.488578\",\"0.065144\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:34:01Z\",\"542217585\",\"368941\",\"944.270720\",\"0.642464\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:34:05Z\",\"2081617931\",\"231348\",\"61.490631\",\"0.006563\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:34:15Z\",\"949509934\",\"588315\",\"539.225697\",\"0.333096\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:34:21Z\",\"2080244524\",\"471494\",\"61.531230\",\"0.013944\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.922897687288144,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.844955,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:17Z\",\"585730200\",\"2181023\",\"874.132262\",\"3.247231\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:21Z\",\"2069695155\",\"2917226\",\"61.844955\",\"0.087009\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:31Z\",\"542651802\",\"591922\",\"943.515682\",\"1.027285\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:34Z\",\"2070035422\",\"566377\",\"61.834694\",\"0.016919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:45Z\",\"950002020\",\"337488\",\"538.946276\",\"0.190266\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:51Z\",\"2067985716\",\"422160\",\"61.895981\",\"0.012564\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.22871770746126016,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 943.515682,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:17Z\",\"585730200\",\"2181023\",\"874.132262\",\"3.247231\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:21Z\",\"2069695155\",\"2917226\",\"61.844955\",\"0.087009\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:31Z\",\"542651802\",\"591922\",\"943.515682\",\"1.027285\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:34Z\",\"2070035422\",\"566377\",\"61.834694\",\"0.016919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:45Z\",\"950002020\",\"337488\",\"538.946276\",\"0.190266\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:51Z\",\"2067985716\",\"422160\",\"61.895981\",\"0.012564\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.8703562540959824,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.834694,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:17Z\",\"585730200\",\"2181023\",\"874.132262\",\"3.247231\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:21Z\",\"2069695155\",\"2917226\",\"61.844955\",\"0.087009\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:31Z\",\"542651802\",\"591922\",\"943.515682\",\"1.027285\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:34Z\",\"2070035422\",\"566377\",\"61.834694\",\"0.016919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:45Z\",\"950002020\",\"337488\",\"538.946276\",\"0.190266\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:51Z\",\"2067985716\",\"422160\",\"61.895981\",\"0.012564\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.2346067286382314,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 538.946276,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:17Z\",\"585730200\",\"2181023\",\"874.132262\",\"3.247231\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:21Z\",\"2069695155\",\"2917226\",\"61.844955\",\"0.087009\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:31Z\",\"542651802\",\"591922\",\"943.515682\",\"1.027285\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:34Z\",\"2070035422\",\"566377\",\"61.834694\",\"0.016919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:45Z\",\"950002020\",\"337488\",\"538.946276\",\"0.190266\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:51Z\",\"2067985716\",\"422160\",\"61.895981\",\"0.012564\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.9479959075034556,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.895981,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:17Z\",\"585730200\",\"2181023\",\"874.132262\",\"3.247231\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:21Z\",\"2069695155\",\"2917226\",\"61.844955\",\"0.087009\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:31Z\",\"542651802\",\"591922\",\"943.515682\",\"1.027285\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:34Z\",\"2070035422\",\"566377\",\"61.834694\",\"0.016919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:35:45Z\",\"950002020\",\"337488\",\"538.946276\",\"0.190266\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:35:51Z\",\"2067985716\",\"422160\",\"61.895981\",\"0.012564\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.2375513600346945,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T11:36:01.747770+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.783,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.816,11.783,3.27%,11.090,86.063,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.38638320000000004,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.827,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.876,11.827,2.31%,11.170,26.105,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.27433559999999996,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.369,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.549,23.369,2.25%,22.498,73.264,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5298525,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.482,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.666,24.482,7.04%,23.558,549.496,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7364864000000002,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 253.655,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),255.183,253.655,2.68%,250.081,823.442,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.8389044,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.317,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.258,133.317,1.77%,131.295,200.147,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.3763666000000003,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.688,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.775,5.688,14.89%,5.230,77.490,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.8598975000000001,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.148,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.131,3.148,3.39%,0.346,3.394,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1061409,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.114,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.129,2.114,8.33%,1.936,37.662,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1773457,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.709,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.723,1.709,5.31%,1.635,7.693,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.0914913,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 859.489,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),858.856,859.489,0.41%,812.063,870.188,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.5213095999999995,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 28.849,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),28.967,28.849,5.22%,27.342,150.195,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5120774,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 307.901,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),309.723,307.901,2.42%,300.926,860.894,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.4952966000000005,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.215,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.219,26.215,5.94%,24.544,155.997,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5574086,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 29.321,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.374,29.321,4.77%,28.571,143.041,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4011397999999997,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 247.503,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.607,247.503,1.83%,242.310,658.733,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.5312081,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 250.421,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),250.470,250.421,1.05%,247.694,468.869,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.629935,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.879,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.919,5.879,17.30%,5.294,100.064,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 1.023987,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.25,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.249,4.250,12.71%,3.657,53.819,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5400479,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.64,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.655,0.640,9.41%,0.525,1.097,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0616355,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.005,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.013,1.005,2.43%,0.982,1.097,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0246159,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.37,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.712,6.370,18.12%,6.065,63.114,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.2162144,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.601,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.722,31.601,3.92%,29.730,95.023,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.2435024000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.464,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.799,6.464,17.44%,6.154,55.485,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.1857456,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 43.968,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),44.095,43.968,2.57%,42.262,103.867,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.1332414999999998,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 6.923,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.991,6.923,4.45%,6.710,28.718,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.31109950000000003,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 37.514,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),37.554,37.514,2.92%,35.545,122.386,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.0965768,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 6.919,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.997,6.919,4.62%,6.691,29.452,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.3232614,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 113.24,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),113.267,113.240,0.65%,111.396,152.929,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.7362355,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156040.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.706,16.520,152.66%,16.004,8080.944,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.307,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.483,16.307,139.06%,15.713,7263.665,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.9212598,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.335,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.168,16.994,116.14%,16.398,6320.956,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1198995,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.065,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.335,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.244,17.065,119.88%,16.367,6553.100,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.672107199999996,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125969.648,125825.000,3.75%,125216.000,1613540.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.970,21.629,92.70%,20.752,6436.502,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4723.8618,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.449,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),126007.520,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.785,21.449,104.23%,20.410,7181.152,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.7065055,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6932.337,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6961.513,6932.337,1.06%,6906.873,7137.736,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 73.7920378,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 18155.388,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17971.103,18155.388,7.28%,16144.759,20848.692,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1308.2962984,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 49623.146,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),49773.119,49623.146,5.09%,42743.517,58286.180,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2533.4517571,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2030.983,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2059.786,2030.983,13.27%,1359.448,4911.651,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 273.3336022,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7504.636,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7514.059,7504.636,1.68%,7283.267,7720.501,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 126.2361912,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 16891.715,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16583.983,16891.715,8.39%,14339.610,18436.846,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1391.3961737,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45378.484,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45244.471,45378.484,3.09%,34693.126,48974.832,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1398.0541538999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1407.796,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1527.831,1407.796,31.32%,902.311,5129.063,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 478.5166691999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42169.334,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42142.136,42169.334,0.64%,41791.716,42750.170,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 269.7096704,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 115232.387,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),115297.147,115232.387,0.48%,114605.337,116146.135,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 553.4263056,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.376,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.492,33.376,3.64%,31.176,74.298,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2191087999999999,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.573,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.612,51.573,2.70%,47.818,98.663,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3935240000000002,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 270.778,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.004,270.778,2.85%,265.067,995.148,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.723614,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 312.318,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),313.031,312.318,1.89%,309.116,725.714,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.9162859,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 318.26903,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.421712 s\n318.269030 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 4.111656753023184,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.369,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00400725 s\nbitcracker - total time for whole calculation: 35.369 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.045044126513156,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.741,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1266 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1114 1258 30.2471% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1252 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1090 1254 29.5954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1258 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1092 1272 29.6497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1261 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1259 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1128 1261 30.6272% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1207 1263 32.7722% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1274 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1055 1258 28.6451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1267 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1066 1254 28.9438% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1272 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1262 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1266 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1259 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1171 1262 31.7947% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1265 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1162 1270 31.5504% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1273 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1258 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1261 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1266 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1265 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1038 1263 28.1835% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1254 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1261 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1087 1260 29.514% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1267 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1273 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1113 1267 30.2199% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1183 1271 32.1206% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1264 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1265 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1078 1262 29.2696% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1240 1279 33.6682% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1085 1268 29.4597% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1138 1277 30.8987% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1256 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1259 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1275 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.741 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.13700121653961128,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.5773502691896257,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.8,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.709730e-01   6.061780e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.561760e-01   7.477820e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.424660e-01   7.623810e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.760250e-01   8.159060e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.448550e-01   7.886750e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.491930e-01   7.648500e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.465390e-01   7.770530e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.493000e-01   8.051910e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.475890e-01   8.044650e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.501660e-01   7.746980e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.118e+07    1.118e+07    1.118e+07    0.000e+00       100.00\ncycleInit                           10    3.533e+06    3.533e+06    3.533e+06    0.000e+00       100.00\ncycleTracking                       10    7.647e+06    7.647e+06    7.647e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.983e+06    4.983e+06    4.983e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    2.016e+05    2.016e+05    2.016e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.180e+02    4.180e+02    4.180e+02    0.000e+00       100.00\nFigure Of Merit                 117.80 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.08717797887081243,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 725.334,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.46679 s\nsobelfilter - total time for whole calculation: 0.725334 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 12.923269181338487,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.2233,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.2e-05 s\ndl-cifar - total time for whole calculation: 24.2233 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.09071765723018524,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.66,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.66 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.03214550253664317,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1525,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076908 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0670 s\nProcessing elapsed time : 0.0831 s\nStoring    elapsed time : 0.0024 s\nTotal      elapsed time : 0.1525 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0004509249752822818,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 871.005423,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:59Z\",\"587839377\",\"3095558\",\"871.005423\",\"4.557160\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:14:03Z\",\"2097303804\",\"2505798\",\"61.030808\",\"0.072814\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:14:13Z\",\"543586372\",\"449734\",\"941.893148\",\"0.778232\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:14:16Z\",\"2096871434\",\"968235\",\"61.043333\",\"0.028120\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:14:27Z\",\"952260055\",\"303985\",\"537.668295\",\"0.169907\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:14:33Z\",\"2095323940\",\"478133\",\"61.088409\",\"0.013904\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 10.290144104852285,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.051449,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:14Z\",\"590117616\",\"2253838\",\"867.633749\",\"3.305180\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:17Z\",\"2096593755\",\"1938100\",\"61.051449\",\"0.056357\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:28Z\",\"551319880\",\"838561\",\"928.682175\",\"1.411492\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:31Z\",\"2096153781\",\"469122\",\"61.064224\",\"0.013598\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:42Z\",\"946278311\",\"832589\",\"541.067369\",\"0.475251\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:48Z\",\"2093616351\",\"418366\",\"61.138233\",\"0.012106\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.0573897781345558,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 941.893148,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:59Z\",\"587839377\",\"3095558\",\"871.005423\",\"4.557160\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:14:03Z\",\"2097303804\",\"2505798\",\"61.030808\",\"0.072814\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:14:13Z\",\"543586372\",\"449734\",\"941.893148\",\"0.778232\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:14:16Z\",\"2096871434\",\"968235\",\"61.043333\",\"0.028120\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:14:27Z\",\"952260055\",\"303985\",\"537.668295\",\"0.169907\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:14:33Z\",\"2095323940\",\"478133\",\"61.088409\",\"0.013904\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 7.862859670074804,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.064224,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:14Z\",\"590117616\",\"2253838\",\"867.633749\",\"3.305180\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:17Z\",\"2096593755\",\"1938100\",\"61.051449\",\"0.056357\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:28Z\",\"551319880\",\"838561\",\"928.682175\",\"1.411492\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:31Z\",\"2096153781\",\"469122\",\"61.064224\",\"0.013598\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:42Z\",\"946278311\",\"832589\",\"541.067369\",\"0.475251\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:48Z\",\"2093616351\",\"418366\",\"61.138233\",\"0.012106\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.09846584385968406,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 541.067369,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:14Z\",\"590117616\",\"2253838\",\"867.633749\",\"3.305180\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:17Z\",\"2096593755\",\"1938100\",\"61.051449\",\"0.056357\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:28Z\",\"551319880\",\"838561\",\"928.682175\",\"1.411492\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:31Z\",\"2096153781\",\"469122\",\"61.064224\",\"0.013598\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:42Z\",\"946278311\",\"832589\",\"541.067369\",\"0.475251\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:48Z\",\"2093616351\",\"418366\",\"61.138233\",\"0.012106\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.1629444325021847,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.138233,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:14Z\",\"590117616\",\"2253838\",\"867.633749\",\"3.305180\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:17Z\",\"2096593755\",\"1938100\",\"61.051449\",\"0.056357\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:28Z\",\"551319880\",\"838561\",\"928.682175\",\"1.411492\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:31Z\",\"2096153781\",\"469122\",\"61.064224\",\"0.013598\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T11:13:42Z\",\"946278311\",\"832589\",\"541.067369\",\"0.475251\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T11:13:48Z\",\"2093616351\",\"418366\",\"61.138233\",\"0.012106\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.06969003179078269,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T11:14:44.077800+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 12.046,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.083,12.046,3.36%,11.124,81.971,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.4059888,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.735,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.776,11.735,2.96%,11.038,69.878,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.34856960000000003,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.883,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.033,21.883,2.37%,21.042,71.948,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5221821000000001,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 22.577,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.735,22.577,7.41%,21.837,529.350,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.6846634999999999,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 203.464,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),203.730,203.464,3.04%,198.038,737.951,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.193391999999999,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.703,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),87.272,86.703,1.99%,84.813,149.598,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.7367128000000003,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.248,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.362,5.248,17.84%,4.843,86.066,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.9565808,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.849,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.864,2.849,4.61%,0.441,3.255,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1320304,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.945,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.953,1.945,6.14%,1.731,20.519,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1199142,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.41,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.424,1.410,27.55%,1.343,122.290,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.392312,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 858.902,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),857.990,858.902,0.52%,821.875,866.293,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 4.461548,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.19,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.158,26.190,6.43%,24.518,148.124,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.6819594,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.094,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.145,30.094,5.10%,28.490,154.329,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5373949999999998,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 268.927,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),269.795,268.927,2.64%,259.107,761.582,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.122588,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 254.786,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),254.827,254.786,1.18%,253.309,525.218,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.0069586,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.915,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.004,25.915,5.41%,24.273,137.610,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4068164,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.62,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.689,28.620,8.32%,27.642,235.181,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 2.3869248,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 248.363,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.550,248.363,1.55%,244.435,604.536,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.852525,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 246.898,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),246.972,246.898,1.17%,245.875,511.782,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.8895723999999996,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.461,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.494,5.461,18.27%,4.986,94.918,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 1.0037538,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.262,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.264,4.262,14.18%,3.667,60.916,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.6046352,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.577,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.591,1.577,5.71%,1.394,2.262,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0908461,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.051,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.063,1.051,3.17%,0.982,1.165,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0336971,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.281,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.559,13.281,22.97%,12.024,85.075,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.1145023,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.146,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.704,14.146,21.96%,13.219,90.098,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.2289984000000005,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 77.178,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.541,77.178,4.34%,75.998,174.899,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.3652794,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 78.498,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.996,78.498,4.54%,77.652,193.690,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.5864184,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.832,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.749,13.832,6.74%,12.489,89.511,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9266826,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 15.191,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.100,15.191,6.33%,13.870,86.735,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.95583,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 78.077,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.092,78.077,1.06%,77.169,151.107,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.8277752,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 77.438,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),77.423,77.438,0.96%,76.395,135.219,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.7432607999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.299,14.141,210.24%,13.358,9502.692,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.141,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.299,14.141,210.24%,13.358,9502.692,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 30.062217600000004,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.095,13.965,160.43%,13.061,7163.831,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206800000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.081,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.206,14.081,146.38%,13.320,6588.775,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.794742799999998,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98551.619,97528.000,304.84%,96668.000,95100280.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.632,20.433,4134.35%,17.786,308989.609,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 300424.75535959995,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.433,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98551.619,97528.000,304.84%,96668.000,95100280.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.632,20.433,4134.35%,17.786,308989.609,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 977.0295920000002,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5386.37,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5379.701,5386.370,0.27%,5353.828,5393.338,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 14.525192700000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11237.375,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11097.188,11237.375,5.47%,9874.050,12164.828,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 607.0161836,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17795.084,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18158.307,17795.084,8.75%,15602.002,23695.660,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1588.8518625,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 771.6,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),761.163,771.600,6.91%,478.224,1409.750,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 52.5963633,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 5956.146,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),5959.390,5956.146,1.20%,5834.943,6109.319,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 71.51268,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6534.788,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6521.592,6534.788,1.39%,6323.432,6678.817,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 90.65012879999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17783.418,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18054.346,17783.418,7.85%,15432.788,23251.900,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1417.266161,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 763.741,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),754.425,763.741,7.17%,466.946,1346.680,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.0922725,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29748.963,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29800.307,29748.963,0.45%,29666.732,30120.835,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 134.10138150000003,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 85726.385,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),85538.681,85726.385,0.78%,83816.375,86281.423,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 667.2017118,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.2,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.235,26.200,4.95%,24.635,138.386,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2986325,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 249.264,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),249.421,249.264,1.72%,245.065,644.532,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.2900412,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 324.005054,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.414246 s\n324.005054 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 2.280541609887559,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3854,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00394387 s\nbitcracker - total time for whole calculation: 35.3854 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.048897273270941954,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.593,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1085 1265 29.4597% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1261 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1272 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1252 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1265 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1272 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1135 1266 30.8173% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1160 1259 31.4961% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1271 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1267 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1261 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1088 1261 29.5411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1269 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1249 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1267 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1260 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1268 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1061 1264 28.808% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1071 1256 29.0796% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1258 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1033 1255 28.0478% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1252 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1208 1256 32.7993% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1263 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1261 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1268 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1257 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1268 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1054 1270 28.618% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1104 1252 29.9756% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1265 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1130 1272 30.6815% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1245 1277 33.804% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1259 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1253 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1256 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1258 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.593 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.30359402717005524,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 237.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.35,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.691020e-01   6.123070e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.563760e-01   7.545320e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.436290e-01   7.709440e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.759120e-01   8.252070e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.462070e-01   7.992190e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.508930e-01   7.736350e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.482030e-01   7.733460e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.508090e-01   7.945990e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.474730e-01   7.914570e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.509600e-01   7.817590e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.122e+07    1.122e+07    1.122e+07    0.000e+00       100.00\ncycleInit                           10    3.540e+06    3.540e+06    3.540e+06    0.000e+00       100.00\ncycleTracking                       10    7.677e+06    7.677e+06    7.677e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.992e+06    4.992e+06    4.992e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.948e+05    1.948e+05    1.948e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.280e+02    4.280e+02    4.280e+02    0.000e+00       100.00\nFigure Of Merit                 117.35 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.4986314604327871,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 719.404,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.55707 s\nsobelfilter - total time for whole calculation: 0.719404 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 6.655372266071995,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 18.0343,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.3e-05 s\ndl-cifar - total time for whole calculation: 18.0343 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.3418147646508757,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.64,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.64 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.020000000000000018,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1499,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.074104 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0672 s\nProcessing elapsed time : 0.0801 s\nStoring    elapsed time : 0.0025 s\nTotal      elapsed time : 0.1499 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0006506407098647827,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 877.417942,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:48Z\",\"583538518\",\"2446805\",\"877.417942\",\"3.661026\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:52Z\",\"2081781441\",\"2239194\",\"61.485858\",\"0.066028\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:48:02Z\",\"546020495\",\"473952\",\"937.694301\",\"0.811392\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:48:06Z\",\"2081795379\",\"507154\",\"61.485393\",\"0.014980\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:48:16Z\",\"965981458\",\"887799\",\"530.031235\",\"0.486752\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:48:22Z\",\"2080162321\",\"418514\",\"61.533662\",\"0.012379\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.6098042746897756,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.733915,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:03Z\",\"582571897\",\"3101688\",\"878.881288\",\"4.650572\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:07Z\",\"2073416188\",\"2040620\",\"61.733915\",\"0.060689\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:17Z\",\"544276901\",\"226820\",\"940.697775\",\"0.389860\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:21Z\",\"2073116564\",\"1172504\",\"61.742805\",\"0.034871\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:31Z\",\"950345096\",\"597112\",\"538.751831\",\"0.337669\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:37Z\",\"2072214054\",\"356046\",\"61.769682\",\"0.010569\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.1671932118508394,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 940.697775,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:03Z\",\"582571897\",\"3101688\",\"878.881288\",\"4.650572\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:07Z\",\"2073416188\",\"2040620\",\"61.733915\",\"0.060689\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:17Z\",\"544276901\",\"226820\",\"940.697775\",\"0.389860\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:21Z\",\"2073116564\",\"1172504\",\"61.742805\",\"0.034871\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:31Z\",\"950345096\",\"597112\",\"538.751831\",\"0.337669\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:37Z\",\"2072214054\",\"356046\",\"61.769682\",\"0.010569\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.6510158291198613,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.742805,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:03Z\",\"582571897\",\"3101688\",\"878.881288\",\"4.650572\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:07Z\",\"2073416188\",\"2040620\",\"61.733915\",\"0.060689\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:17Z\",\"544276901\",\"226820\",\"940.697775\",\"0.389860\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:21Z\",\"2073116564\",\"1172504\",\"61.742805\",\"0.034871\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:31Z\",\"950345096\",\"597112\",\"538.751831\",\"0.337669\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:37Z\",\"2072214054\",\"356046\",\"61.769682\",\"0.010569\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.21431662521683298,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.52828,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:46:18Z\",\"584707388\",\"2651691\",\"875.665994\",\"3.948977\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:46:22Z\",\"2071062070\",\"1912100\",\"61.804081\",\"0.056983\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:46:32Z\",\"542960046\",\"562650\",\"942.979953\",\"0.976742\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:46:36Z\",\"2067487088\",\"824630\",\"61.910914\",\"0.024608\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:46:46Z\",\"952508744\",\"925815\",\"537.528280\",\"0.522074\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:46:52Z\",\"2069282285\",\"884461\",\"61.857205\",\"0.026359\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.72143261056856,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.769682,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:03Z\",\"582571897\",\"3101688\",\"878.881288\",\"4.650572\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:07Z\",\"2073416188\",\"2040620\",\"61.733915\",\"0.060689\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:17Z\",\"544276901\",\"226820\",\"940.697775\",\"0.389860\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:21Z\",\"2073116564\",\"1172504\",\"61.742805\",\"0.034871\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:47:31Z\",\"950345096\",\"597112\",\"538.751831\",\"0.337669\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:47:37Z\",\"2072214054\",\"356046\",\"61.769682\",\"0.010569\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.16735480711052275,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T10:48:33.069115+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.817,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.849,11.817,2.85%,11.119,53.216,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3376965,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.689,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.738,11.689,3.23%,10.979,96.392,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3791374,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.271,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.445,23.271,11.00%,22.362,776.905,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.57895,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.548,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.720,24.548,7.06%,23.678,542.915,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.745232,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 255.347,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),256.899,255.347,2.66%,252.298,820.951,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.8335134,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.125,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),139.992,133.125,19.71%,131.187,310.866,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 27.5924232,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.712,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.813,5.712,14.78%,5.307,80.331,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.8591613999999999,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.187,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.168,3.187,3.46%,0.494,3.407,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1096128,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.109,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.124,2.109,6.05%,1.925,21.816,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.128502,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.705,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.722,1.705,5.90%,1.623,8.210,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.10159800000000001,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 859.782,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.066,859.782,0.45%,825.380,871.695,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.8657970000000006,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 29.153,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.104,29.153,2.24%,27.432,50.573,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 0.6519296000000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 303.932,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),305.763,303.932,2.35%,296.733,812.552,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.1854305,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.787,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.773,25.787,5.28%,23.902,140.411,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3608144,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.75,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.806,28.750,3.79%,27.797,121.128,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.0917474,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 254.957,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),255.142,254.957,1.82%,247.975,668.661,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.6435844,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 251.307,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.398,251.307,1.68%,250.481,664.323,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.2234864,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.725,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.779,5.725,15.52%,5.223,86.209,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.8969008,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.26,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.266,4.260,13.47%,3.672,57.558,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5746302000000001,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.617,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.618,0.617,9.76%,0.480,1.120,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0603168,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.005,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.004,1.005,1.46%,0.960,1.051,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0146584,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.348,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.760,6.348,21.22%,6.044,81.953,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.434472,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.523,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.665,31.523,3.98%,29.594,77.321,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.260267,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.454,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.913,6.454,32.51%,6.125,150.542,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 2.2474163000000003,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 42.806,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.009,42.806,3.80%,41.105,142.739,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.634342,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 6.903,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.971,6.903,6.89%,6.686,43.372,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.4803019,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 37.982,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),38.080,37.982,2.46%,36.386,103.743,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9367679999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 6.837,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.919,6.837,9.01%,6.614,60.035,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.6234019,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 113.162,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),113.198,113.162,0.94%,111.310,142.200,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.0640611999999998,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.421,16.248,142.02%,15.557,7390.107,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.236,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.858,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.477,16.236,151.31%,15.660,7897.474,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 24.9313487,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.309,17.127,124.13%,16.481,6792.012,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1199392,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 16.896,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.076,16.896,120.63%,16.152,6510.814,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.598778799999998,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125976.262,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.707,21.357,105.00%,20.446,7207.782,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4673.7193202,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.357,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125976.262,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.707,21.357,105.00%,20.446,7207.782,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.792350000000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6926.477,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6937.507,6926.477,0.73%,6884.850,7034.918,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 50.6438011,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 18296.127,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18547.368,18296.127,4.95%,17380.917,20256.595,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 918.094716,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 49647.156,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),49734.739,49647.156,5.21%,40788.213,59171.895,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2591.1799019,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2003.709,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2025.954,2003.709,13.59%,1270.415,5136.774,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 275.3271486,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7476.314,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7521.795,7476.314,1.87%,7375.782,7767.523,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 140.6575665,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 16905.868,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16507.434,16905.868,8.92%,13609.957,18143.504,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1472.4631128,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45568.42,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45477.071,45568.420,3.03%,38618.319,48918.430,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1377.9552512999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1407.892,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1520.592,1407.892,31.06%,903.962,5251.443,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 472.2958752,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42023.092,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42015.641,42023.092,0.48%,41650.676,42336.192,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 201.6750768,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 115610.174,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),115772.415,115610.174,0.47%,115010.295,117007.416,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 544.1303504999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.313,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.438,33.313,3.67%,31.349,93.418,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2271746,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.427,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.486,51.427,3.03%,48.098,148.909,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5600257999999998,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 270.95,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.202,270.950,2.86%,264.579,993.160,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.7563772,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 313.933,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),314.385,313.933,1.55%,310.446,656.939,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.8729675,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 314.282397,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.427061 s\n314.282397 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 5.991385490524912,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3314,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00399358 s\nbitcracker - total time for whole calculation: 35.3314 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.015098454667060906,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.77,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1261 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1275 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1258 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1207 1258 32.7722% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1266 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1261 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1094 1263 29.704% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1259 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1264 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1274 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1259 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1263 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1270 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1194 1265 32.4192% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1181 1273 32.0662% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1269 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1261 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1252 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1162 1270 31.5504% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1277 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1136 1258 30.8444% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1216 1250 33.0166% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1269 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1271 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1089 1258 29.5683% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1264 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1267 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1259 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1259 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1271 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1253 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1257 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1262 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1082 1274 29.3782% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1266 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.77 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.012503332888995845,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.5275252316519468,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 118.75,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.598740e-01   6.064120e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.421140e-01   7.479840e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.363500e-01   7.618620e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.623500e-01   8.146270e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.365770e-01   7.889480e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.394090e-01   7.649220e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.375420e-01   7.625660e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.394300e-01   7.833330e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.376310e-01   7.824380e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.394430e-01   7.731300e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.102e+07    1.102e+07    1.102e+07    0.000e+00       100.00\ncycleInit                           10    3.431e+06    3.431e+06    3.431e+06    0.000e+00       100.00\ncycleTracking                       10    7.586e+06    7.586e+06    7.586e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.991e+06    4.991e+06    4.991e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.943e+05    1.943e+05    1.943e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.160e+02    4.160e+02    4.160e+02    0.000e+00       100.00\nFigure Of Merit                 118.75 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.39068316233660744,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 696.705,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.46846 s\nsobelfilter - total time for whole calculation: 0.696705 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 8.858152612142103,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.2345,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.5e-05 s\ndl-cifar - total time for whole calculation: 24.2345 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.045821828859180486,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.69,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.69 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.020000000000000018,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1519,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076237 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0671 s\nProcessing elapsed time : 0.0826 s\nStoring    elapsed time : 0.0022 s\nTotal      elapsed time : 0.1519 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0004932882862316182,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 879.737564,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:00Z\",\"581998495\",\"2221162\",\"879.737564\",\"3.342584\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:04Z\",\"2097029668\",\"2012963\",\"61.038762\",\"0.058510\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:14Z\",\"552402202\",\"201319\",\"926.860994\",\"0.336635\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:18Z\",\"2093968883\",\"425363\",\"61.127940\",\"0.012345\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:28Z\",\"951712018\",\"311893\",\"537.977911\",\"0.175888\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:34Z\",\"2097480500\",\"1316708\",\"61.025616\",\"0.038236\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.118230112343409,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.132117,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:21:15Z\",\"578906020\",\"2215531\",\"884.437111\",\"3.367657\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:21:18Z\",\"2093826797\",\"1679145\",\"61.132117\",\"0.048967\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:21:29Z\",\"546168392\",\"794851\",\"937.441411\",\"1.365039\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:21:32Z\",\"2092421377\",\"830976\",\"61.173154\",\"0.024215\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:21:43Z\",\"947497985\",\"496959\",\"540.370660\",\"0.282562\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:21:49Z\",\"2089640988\",\"328237\",\"61.254542\",\"0.009482\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.06640777923556941,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 929.687817,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:45Z\",\"585677447\",\"2268290\",\"874.211772\",\"3.372095\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:49Z\",\"2092624440\",\"1980440\",\"61.167254\",\"0.057796\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:23:00Z\",\"550723753\",\"929382\",\"929.687817\",\"1.566993\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:23:03Z\",\"2095937256\",\"1085358\",\"61.070543\",\"0.031568\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:23:14Z\",\"963287102\",\"800607\",\"531.513690\",\"0.441392\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:23:20Z\",\"2093460131\",\"443523\",\"61.142795\",\"0.012917\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.478052757505087,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.12794,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:00Z\",\"581998495\",\"2221162\",\"879.737564\",\"3.342584\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:04Z\",\"2097029668\",\"2012963\",\"61.038762\",\"0.058510\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:14Z\",\"552402202\",\"201319\",\"926.860994\",\"0.336635\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:18Z\",\"2093968883\",\"425363\",\"61.127940\",\"0.012345\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:28Z\",\"951712018\",\"311893\",\"537.977911\",\"0.175888\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:34Z\",\"2097480500\",\"1316708\",\"61.025616\",\"0.038236\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.05142589932125456,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.977911,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:00Z\",\"581998495\",\"2221162\",\"879.737564\",\"3.342584\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:04Z\",\"2097029668\",\"2012963\",\"61.038762\",\"0.058510\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:14Z\",\"552402202\",\"201319\",\"926.860994\",\"0.336635\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:18Z\",\"2093968883\",\"425363\",\"61.127940\",\"0.012345\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:28Z\",\"951712018\",\"311893\",\"537.977911\",\"0.175888\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:34Z\",\"2097480500\",\"1316708\",\"61.025616\",\"0.038236\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.581799473546441,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.142795,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:22:45Z\",\"585677447\",\"2268290\",\"874.211772\",\"3.372095\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:22:49Z\",\"2092624440\",\"1980440\",\"61.167254\",\"0.057796\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:23:00Z\",\"550723753\",\"929382\",\"929.687817\",\"1.566993\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:23:03Z\",\"2095937256\",\"1085358\",\"61.070543\",\"0.031568\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T10:23:14Z\",\"963287102\",\"800607\",\"531.513690\",\"0.441392\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T10:23:20Z\",\"2093460131\",\"443523\",\"61.142795\",\"0.012917\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.11447374045751052,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T10:23:30.790871+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.777,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.820,11.777,3.18%,11.003,73.166,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.37587600000000004,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.66,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.708,11.660,2.80%,10.995,63.131,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.32782399999999995,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.331,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.495,21.331,7.52%,20.549,502.238,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.6164239999999999,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 21.858,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.029,21.858,8.86%,21.214,620.290,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.9517693999999999,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 208.68,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),208.591,208.680,3.60%,198.738,882.674,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 7.509276000000002,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.536,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),87.113,86.536,1.99%,84.707,149.222,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.7335487,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.107,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.348,5.107,15.33%,4.693,52.903,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.8198483999999999,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.843,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.842,2.843,3.81%,0.902,3.249,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.10828020000000001,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.912,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.920,1.912,6.61%,1.715,18.306,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.126912,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.408,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.422,1.408,33.63%,1.343,123.369,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.47821860000000005,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 862.73,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),861.972,862.730,0.46%,824.298,868.086,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.9650711999999997,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.429,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.389,26.429,6.45%,24.515,142.852,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.7020905,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 31.249,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),31.257,31.249,5.03%,29.803,153.076,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5722271000000003,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 267.513,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),269.169,267.513,2.47%,260.982,746.523,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 6.6484743,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 258.506,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),258.305,258.506,1.82%,253.946,680.610,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.701151,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.811,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.880,25.811,4.93%,24.462,132.444,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2758839999999998,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.257,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.313,28.257,3.57%,27.441,112.407,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.0107741,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 246.579,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),246.720,246.579,1.56%,240.669,575.402,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.8488320000000003,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 248.481,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),248.543,248.481,1.03%,246.781,477.801,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.5599929,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.316,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.361,5.316,17.68%,4.708,91.552,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.9478247999999999,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.215,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.226,4.215,12.53%,3.656,47.280,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5295177999999999,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.554,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.561,1.554,6.09%,1.371,2.285,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0950649,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.005,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.993,1.005,2.15%,0.914,1.051,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.021349499999999997,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.363,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.931,13.363,25.07%,12.601,114.140,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.4925016999999996,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.144,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.390,14.144,23.22%,13.022,105.521,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.341358,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 76.74,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.177,76.740,4.38%,75.740,152.409,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.3803526,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 75.642,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),76.056,75.642,4.74%,74.451,180.506,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.6050544,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 14.136,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),14.295,14.136,5.11%,13.243,51.429,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.7304745000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 15.214,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.322,15.214,4.26%,13.979,55.312,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.6527172,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 77.761,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.741,77.761,0.55%,76.780,98.026,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.42757550000000005,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 80.835,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.828,80.835,0.80%,76.824,109.789,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.6466240000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.235,14.105,138.66%,13.337,6229.418,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206800000003,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 13.939,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.859,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.097,13.939,208.22%,13.253,9295.695,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 29.352773399999997,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.299,14.145,156.91%,13.446,7085.770,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 13.999,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.152,13.999,183.68%,13.277,8214.881,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 25.9943936,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98452.189,97528.000,294.97%,96669.000,91931160.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.303,20.379,3970.96%,17.868,292644.948,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 290404.4218933,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.096,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98304.430,97528.000,266.11%,96527.000,82822086.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.641,20.096,3583.84%,17.538,256613.333,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 811.4172143999999,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5348.364,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5343.600,5348.364,0.29%,5311.831,5359.778,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 15.49644,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 10932.099,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),10915.174,10932.099,3.52%,10217.239,11670.223,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 384.21412480000004,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17467.379,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17767.098,17467.379,7.41%,15539.681,22279.149,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1316.5419618,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 782.769,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),771.976,782.769,6.78%,534.305,1501.913,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 52.3399728,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6011.483,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6012.685,6011.483,0.88%,5923.283,6087.752,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 52.91162800000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6353.624,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6488.579,6353.624,5.97%,6121.382,7438.539,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 387.3681663,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17569.216,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),17906.881,17569.216,8.31%,15675.461,23543.694,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1488.0618111000003,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 784.501,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),774.460,784.501,6.83%,516.480,1644.214,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 52.895618,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29396.405,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29392.404,29396.405,0.12%,29335.203,29448.892,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 35.2708848,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 87259.944,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),87176.265,87259.944,0.48%,86056.193,87567.214,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 418.44607199999996,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.007,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.050,26.007,4.17%,24.189,117.629,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.086285,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 248.791,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),249.016,248.791,1.78%,244.808,664.290,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.4324848,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 319.615304,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.419935 s\n319.615304 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 5.151112358057461,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3579,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.0039703 s\nbitcracker - total time for whole calculation: 35.3579 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.019294299676330673,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.641,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1265 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1131 1273 30.7087% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1272 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1270 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1268 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1240 1275 33.6682% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1269 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1279 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1136 1273 30.8444% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1262 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1266 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1261 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1074 1262 29.161% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1083 1249 29.4054% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1258 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1113 1253 30.2199% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1268 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1260 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1268 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1207 1255 32.7722% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1270 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1067 1267 28.9709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1048 1259 28.4551% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1081 1273 29.3511% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1268 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1267 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1261 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1260 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1263 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1102 1261 29.9213% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1102 1257 29.9213% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1280 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1085 1262 29.4597% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1273 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1026 1263 27.8577% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1116 1259 30.3014% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1168 1261 31.7133% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1264 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1046 1258 28.4008% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1272 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1127 1273 30.6001% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1262 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1115 1253 30.2742% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1256 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.641 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.20167052337910418,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 238.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.62,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.633350e-01   6.153530e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.537950e-01   7.571930e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.454660e-01   7.698100e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.750710e-01   8.238510e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.454260e-01   8.111800e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.481050e-01   7.894940e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.456100e-01   7.884260e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.487690e-01   8.133650e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.458820e-01   7.909590e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.477060e-01   7.653490e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.125e+07    1.125e+07    1.125e+07    0.000e+00       100.00\ncycleInit                           10    3.519e+06    3.519e+06    3.519e+06    0.000e+00       100.00\ncycleTracking                       10    7.725e+06    7.725e+06    7.725e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.976e+06    4.976e+06    4.976e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    2.060e+05    2.060e+05    2.060e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.330e+02    4.330e+02    4.330e+02    0.000e+00       100.00\nFigure Of Merit                 116.62 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.14047538337137022,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 719.461,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47054 s\nsobelfilter - total time for whole calculation: 0.719461 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 10.882615021216198,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.675,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.1e-05 s\ndl-cifar - total time for whole calculation: 17.675 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.33319329725151015,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.63,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.63 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.017320508075688915,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1495,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.074125 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0670 s\nProcessing elapsed time : 0.0801 s\nStoring    elapsed time : 0.0024 s\nTotal      elapsed time : 0.1495 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0006557438524301977,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 883.949933,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:06Z\",\"579232002\",\"3157777\",\"883.949933\",\"4.786162\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:10Z\",\"2071540307\",\"2571329\",\"61.789846\",\"0.076588\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:20Z\",\"544285092\",\"1037599\",\"940.686216\",\"1.788949\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:23Z\",\"2070530396\",\"496512\",\"61.819911\",\"0.014762\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:34Z\",\"949019055\",\"273301\",\"539.504481\",\"0.153876\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:40Z\",\"2072822180\",\"1394497\",\"61.751581\",\"0.041470\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 8.708883684884324,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.789846,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:06Z\",\"579232002\",\"3157777\",\"883.949933\",\"4.786162\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:10Z\",\"2071540307\",\"2571329\",\"61.789846\",\"0.076588\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:20Z\",\"544285092\",\"1037599\",\"940.686216\",\"1.788949\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:23Z\",\"2070530396\",\"496512\",\"61.819911\",\"0.014762\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:34Z\",\"949019055\",\"273301\",\"539.504481\",\"0.153876\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:40Z\",\"2072822180\",\"1394497\",\"61.751581\",\"0.041470\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.16685656464261156,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 940.686216,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:06Z\",\"579232002\",\"3157777\",\"883.949933\",\"4.786162\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:10Z\",\"2071540307\",\"2571329\",\"61.789846\",\"0.076588\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:20Z\",\"544285092\",\"1037599\",\"940.686216\",\"1.788949\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:23Z\",\"2070530396\",\"496512\",\"61.819911\",\"0.014762\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:34Z\",\"949019055\",\"273301\",\"539.504481\",\"0.153876\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:40Z\",\"2072822180\",\"1394497\",\"61.751581\",\"0.041470\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 9.22883531021783,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.791445,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:51Z\",\"577362058\",\"2271146\",\"886.802834\",\"3.472379\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:54Z\",\"2070283046\",\"2512942\",\"61.827367\",\"0.074924\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:57:05Z\",\"551790479\",\"864698\",\"927.890247\",\"1.452146\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:57:08Z\",\"2071484251\",\"485478\",\"61.791445\",\"0.014356\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:57:19Z\",\"949980661\",\"363255\",\"538.958403\",\"0.206113\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:57:24Z\",\"2069586991\",\"584563\",\"61.848093\",\"0.017359\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.0923227506865613,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 539.504481,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:06Z\",\"579232002\",\"3157777\",\"883.949933\",\"4.786162\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:10Z\",\"2071540307\",\"2571329\",\"61.789846\",\"0.076588\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:20Z\",\"544285092\",\"1037599\",\"940.686216\",\"1.788949\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:23Z\",\"2070530396\",\"496512\",\"61.819911\",\"0.014762\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:34Z\",\"949019055\",\"273301\",\"539.504481\",\"0.153876\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:40Z\",\"2072822180\",\"1394497\",\"61.751581\",\"0.041470\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.5707585314821104,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.751581,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:06Z\",\"579232002\",\"3157777\",\"883.949933\",\"4.786162\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:10Z\",\"2071540307\",\"2571329\",\"61.789846\",\"0.076588\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:20Z\",\"544285092\",\"1037599\",\"940.686216\",\"1.788949\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:23Z\",\"2070530396\",\"496512\",\"61.819911\",\"0.014762\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:56:34Z\",\"949019055\",\"273301\",\"539.504481\",\"0.153876\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:56:40Z\",\"2072822180\",\"1394497\",\"61.751581\",\"0.041470\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.07221102555011845,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T09:57:35.564036+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.988,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.021,11.988,3.13%,11.263,69.607,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3762573,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.849,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.897,11.849,3.05%,11.098,67.718,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3628585,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.421,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.585,23.421,9.99%,22.621,746.522,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.3561415,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.831,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.963,24.831,7.35%,23.730,578.374,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.8347805,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 255.916,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),257.413,255.916,2.77%,252.465,856.154,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 7.1303401,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.683,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),137.734,133.683,14.53%,132.018,317.721,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 20.0127502,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.643,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.847,5.643,16.91%,5.250,82.794,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.9887277000000001,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.15,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.134,3.150,3.23%,0.343,3.380,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1012282,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.118,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.129,2.118,11.65%,1.899,70.590,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.2480285,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.712,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.727,1.712,14.65%,1.615,72.481,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.2530055,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 807.892,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),807.721,807.892,0.33%,774.333,822.950,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 2.6654793,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 29.2,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.277,29.200,8.63%,27.566,216.022,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 2.5266051000000003,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 310.213,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),312.010,310.213,2.79%,302.339,1013.185,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 8.705079,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.864,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.888,25.864,5.95%,24.112,161.629,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5403360000000001,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.339,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.390,28.339,4.49%,27.606,144.908,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2747110000000001,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 247.611,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.707,247.611,1.86%,240.470,641.593,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.6073502,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 247.917,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),247.982,247.917,1.47%,245.401,589.637,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.6453354,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.945,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.976,5.945,16.08%,5.512,97.583,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.9609407999999998,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.331,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.333,4.331,10.41%,3.768,43.288,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.4510653,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.64,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.637,0.640,9.77%,0.525,1.257,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.062234899999999996,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 0.982,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.992,0.982,2.45%,0.914,1.051,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.024304,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.661,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.111,6.661,26.48%,6.181,112.215,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.8829927999999998,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 32.255,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),32.384,32.255,4.03%,30.302,105.469,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.3050752,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.536,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.923,6.536,18.50%,6.172,64.717,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.280755,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 43.401,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.544,43.401,2.42%,41.596,84.926,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.0537648,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 7.014,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.081,7.014,4.87%,6.758,31.894,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.3448447,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 37.91,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),37.895,37.910,2.26%,35.906,76.983,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.856427,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 6.956,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.997,6.956,5.26%,6.519,32.745,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.3680422,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 113.625,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),113.761,113.625,1.68%,111.981,167.104,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.9111847999999998,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.044,16.872,150.30%,16.201,8117.123,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.2655123,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.736,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.901,16.736,144.30%,15.944,7727.969,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 24.388143,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.340,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.469,17.242,202.57%,16.702,11195.224,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.120097999999,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.242,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.340,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.469,17.242,202.57%,16.702,11195.224,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 35.3869533,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125945.960,125825.000,3.75%,125216.000,1610490.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.855,21.554,100.29%,20.655,6930.520,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4722.9735,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.72,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125938.498,125825.000,3.74%,125216.000,1609270.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.984,21.720,96.18%,20.705,6686.477,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 21.144211200000004,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6904.349,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6934.839,6904.349,1.16%,6867.664,7104.459,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 80.4441324,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 17721.867,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17274.796,17721.867,8.49%,14440.895,19661.393,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1466.6301804,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 50734.625,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50819.522,50734.625,5.33%,43754.333,60074.145,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2708.6805225999997,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2024.454,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2052.397,2024.454,13.89%,1284.911,5264.217,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 285.07794329999996,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7512.59,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7554.222,7512.590,1.53%,7439.384,7778.383,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 115.5795966,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 16724.995,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16579.163,16724.995,6.22%,13927.486,18035.530,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1031.2239386,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45428.554,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45338.542,45428.554,3.02%,39322.767,49257.571,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1369.2239684,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1297.028,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1406.783,1297.028,31.58%,870.914,5111.321,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 444.2620713999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42265.582,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42252.497,42265.582,0.75%,41715.565,42932.795,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 316.8937275,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 116979.844,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116918.062,116979.844,0.41%,116063.758,117531.190,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 479.36405419999994,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.212,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.323,33.212,3.69%,31.273,68.408,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2296187,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.679,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.770,51.679,2.80%,48.430,96.941,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.44956,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.049,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.337,271.049,2.81%,264.510,978.544,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.6245696999999995,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 310.146,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),310.475,310.146,1.31%,306.733,598.830,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.067222500000001,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 324.399736,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.413742 s\n324.399736 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 2.613062364658424,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3505,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00388756 s\nbitcracker - total time for whole calculation: 35.3505 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02310353508304192,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.658,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1063 1256 28.8623% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1258 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1268 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1265 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1271 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1134 1264 30.7901% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1257 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1139 1281 30.9259% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1259 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1214 1248 32.9623% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1174 1261 31.8762% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1259 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1130 1269 30.6815% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1080 1255 29.3239% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1208 1266 32.7993% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1259 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1267 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1085 1261 29.4597% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1269 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1256 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1280 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1260 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1070 1264 29.0524% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1052 1260 28.5637% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1267 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1179 1259 32.0119% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1268 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1270 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1039 1273 28.2107% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1182 1258 32.0934% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1003 1253 27.2332% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1273 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1194 1254 32.4192% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1113 1265 30.2199% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1094 1247 29.704% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1163 1270 31.5775% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1056 1257 28.6723% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1088 1266 29.5411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1053 1262 28.5908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1118 1260 30.3557% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1259 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1179 1267 32.0119% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.658 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.3624118283573787,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 239.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.1547005383792515,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 118.2,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.724820e-01   6.038080e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.540020e-01   7.436820e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.456530e-01   7.603850e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.717680e-01   8.232940e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.490890e-01   8.106720e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.498130e-01   7.818710e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.474410e-01   7.628980e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.472200e-01   7.825630e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.464640e-01   7.816220e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.501450e-01   7.709980e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.116e+07    1.116e+07    1.116e+07    0.000e+00       100.00\ncycleInit                           10    3.534e+06    3.534e+06    3.534e+06    0.000e+00       100.00\ncycleTracking                       10    7.622e+06    7.622e+06    7.622e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.986e+06    4.986e+06    4.986e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.866e+05    1.866e+05    1.866e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.300e+02    4.300e+02    4.300e+02    0.000e+00       100.00\nFigure Of Merit                 118.20 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.4828043081829291,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 721.116,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.53199 s\nsobelfilter - total time for whole calculation: 0.721116 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 5.9182462182643025,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.1263,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.1e-05 s\ndl-cifar - total time for whole calculation: 24.1263 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.09284056225594503,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.68,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.68 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02645751311064601,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1517,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076436 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0672 s\nProcessing elapsed time : 0.0822 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1517 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.00045092497528229514,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 882.545146,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:12Z\",\"580143636\",\"1559560\",\"882.545146\",\"2.364516\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:16Z\",\"2095301170\",\"2360607\",\"61.089132\",\"0.068727\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:26Z\",\"544291695\",\"366722\",\"940.672418\",\"0.632779\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:30Z\",\"2097513968\",\"1013228\",\"61.024635\",\"0.029408\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:40Z\",\"952996464\",\"337672\",\"537.252834\",\"0.190002\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:46Z\",\"2095092592\",\"859565\",\"61.095160\",\"0.025042\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.8075057221101285,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.072459,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:33:27Z\",\"577931192\",\"3605931\",\"885.946026\",\"5.492018\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:33:30Z\",\"2095873254\",\"2389017\",\"61.072459\",\"0.069550\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:33:41Z\",\"557664835\",\"570454\",\"918.114959\",\"0.938077\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:33:44Z\",\"2094269034\",\"533998\",\"61.119180\",\"0.015585\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:33:55Z\",\"951267090\",\"322025\",\"538.229537\",\"0.180534\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:01Z\",\"2095961978\",\"308641\",\"61.069811\",\"0.008991\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.028329487682152803,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 940.672418,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:12Z\",\"580143636\",\"1559560\",\"882.545146\",\"2.364516\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:16Z\",\"2095301170\",\"2360607\",\"61.089132\",\"0.068727\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:26Z\",\"544291695\",\"366722\",\"940.672418\",\"0.632779\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:30Z\",\"2097513968\",\"1013228\",\"61.024635\",\"0.029408\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:40Z\",\"952996464\",\"337672\",\"537.252834\",\"0.190002\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:46Z\",\"2095092592\",\"859565\",\"61.095160\",\"0.025042\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 14.16294970821862,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.024635,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:12Z\",\"580143636\",\"1559560\",\"882.545146\",\"2.364516\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:16Z\",\"2095301170\",\"2360607\",\"61.089132\",\"0.068727\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:26Z\",\"544291695\",\"366722\",\"940.672418\",\"0.632779\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:30Z\",\"2097513968\",\"1013228\",\"61.024635\",\"0.029408\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:40Z\",\"952996464\",\"337672\",\"537.252834\",\"0.190002\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:46Z\",\"2095092592\",\"859565\",\"61.095160\",\"0.025042\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.06501771281991757,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.252834,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:12Z\",\"580143636\",\"1559560\",\"882.545146\",\"2.364516\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:16Z\",\"2095301170\",\"2360607\",\"61.089132\",\"0.068727\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:26Z\",\"544291695\",\"366722\",\"940.672418\",\"0.632779\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:30Z\",\"2097513968\",\"1013228\",\"61.024635\",\"0.029408\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:34:40Z\",\"952996464\",\"337672\",\"537.252834\",\"0.190002\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:46Z\",\"2095092592\",\"859565\",\"61.095160\",\"0.025042\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.6154528302935574,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.069811,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:33:27Z\",\"577931192\",\"3605931\",\"885.946026\",\"5.492018\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:33:30Z\",\"2095873254\",\"2389017\",\"61.072459\",\"0.069550\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:33:41Z\",\"557664835\",\"570454\",\"918.114959\",\"0.938077\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:33:44Z\",\"2094269034\",\"533998\",\"61.119180\",\"0.015585\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:33:55Z\",\"951267090\",\"322025\",\"538.229537\",\"0.180534\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:34:01Z\",\"2095961978\",\"308641\",\"61.069811\",\"0.008991\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.04249392938212908,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T09:35:42.458192+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 12.182,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.220,12.182,3.52%,11.245,85.967,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.430144,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.948,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.983,11.948,2.74%,11.061,33.606,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3283342,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.523,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.647,21.523,7.93%,20.514,534.016,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7166070999999998,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 22.673,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.831,22.673,9.59%,21.870,693.685,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.1894929,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 209.034,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),210.239,209.034,2.97%,205.946,755.439,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.2440983,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 87.948,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),88.539,87.948,2.13%,86.179,185.665,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.8858807,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.384,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.445,5.384,13.13%,4.962,56.045,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.7149285000000001,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.847,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.834,2.847,2.92%,0.879,3.169,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.0827528,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.911,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.921,1.911,15.44%,1.715,87.363,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.2966024,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.468,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.478,1.468,28.70%,1.384,129.536,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.42418599999999995,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.076,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.516,860.076,0.42%,812.850,869.887,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.6099672,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.304,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.422,26.304,5.98%,24.907,151.652,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5800356000000002,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.462,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.525,30.462,4.88%,28.934,150.509,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4896199999999997,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 272.75,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),274.354,272.750,2.93%,265.542,937.334,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 8.0385722,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 249.419,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),249.467,249.419,1.52%,245.984,591.953,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.7918984,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.022,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.110,26.022,4.88%,24.429,132.421,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.274168,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.277,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.335,28.277,3.78%,27.350,125.252,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.071063,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 247.062,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.195,247.062,1.74%,242.052,630.452,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.301193,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 257.589,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),257.659,257.589,1.45%,255.510,606.323,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.7360554999999995,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.322,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.364,5.322,14.05%,4.787,51.863,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.753642,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.272,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.271,4.272,13.71%,3.730,59.014,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5855541,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.554,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.557,1.554,5.69%,1.348,2.148,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0885933,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.051,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.055,1.051,2.85%,0.982,1.120,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0300675,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.225,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.713,13.225,23.42%,12.268,85.446,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.2115846,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.448,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.957,14.448,21.78%,13.530,88.673,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.2576346000000003,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 76.887,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.345,76.887,4.85%,75.915,182.523,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.7512324999999995,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 78.827,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),79.347,78.827,4.23%,77.744,157.680,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.3563781,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.916,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.815,13.916,5.55%,12.756,59.085,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.7667324999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 14.956,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.879,14.956,5.59%,13.733,79.370,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8317361,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 78.393,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.425,78.393,0.54%,77.417,100.922,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.423495,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 78.403,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.411,78.403,0.76%,77.416,118.811,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.5959236,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.735,14.561,245.86%,13.657,11455.769,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.695,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.861,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.847,14.695,184.40%,13.931,8651.765,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 27.377868,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.317,14.188,158.18%,13.303,7148.492,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.441,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.569,14.441,155.97%,13.548,7174.591,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.723269300000002,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97313.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98192.944,97313.000,258.39%,96454.000,80332535.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.988,20.474,3322.25%,17.857,241532.328,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 253720.7480016,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.474,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98192.944,97313.000,258.39%,96454.000,80332535.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.988,20.474,3322.25%,17.857,241532.328,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 763.7188299999999,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5421.506,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5418.310,5421.506,0.25%,5390.936,5434.624,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 13.545775,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11361.438,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11155.421,11361.438,5.34%,9806.951,11734.145,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 595.6994814,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17542.219,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17864.688,17542.219,8.31%,15280.619,24106.618,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1484.5555728,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 780.531,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),770.663,780.531,7.08%,530.684,1307.236,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.5629404,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6103.164,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6094.746,6103.164,1.47%,5960.976,6228.301,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 89.5927662,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6379.175,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6409.060,6379.175,2.81%,6131.114,6743.771,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 180.09458600000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17688.681,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),17972.860,17688.681,7.88%,15556.783,23180.831,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1416.261368,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 781.457,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),771.043,781.457,7.13%,539.484,1513.630,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.9753659,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 30136.929,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),30153.662,30136.929,0.25%,30010.721,30307.559,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 75.384155,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 85837.231,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),85785.633,85837.231,0.17%,85418.901,85931.489,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 145.83557610000003,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 25.949,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.075,25.949,5.67%,24.447,145.056,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4784525,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 247.657,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.837,247.657,1.84%,242.037,654.069,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.5602008,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 319.294879,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.420357 s\n319.294879 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 4.437629883159391,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3685,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00395047 s\nbitcracker - total time for whole calculation: 35.3685 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.030845637184753662,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.869,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1254 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1189 1272 32.2835% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1257 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1258 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1274 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1264 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1126 1269 30.5729% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1258 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1198 1249 32.5278% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1264 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1262 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1265 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1084 1260 29.4325% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1256 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1268 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1072 1256 29.1067% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1256 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1262 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1216 1252 33.0166% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1191 1268 32.3378% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1265 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1091 1261 29.6226% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1136 1270 30.8444% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1267 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1137 1276 30.8716% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1258 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1253 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1042 1262 28.2922% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1262 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1271 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1259 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1267 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1268 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1266 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1077 1257 29.2425% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1264 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1108 1271 30.0842% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1259 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1280 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1273 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1255 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1273 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1258 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.869 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.29162304435691827,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 238.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.1547005383792515,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.73,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.668930e-01   6.140800e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.521430e-01   7.549920e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.446110e-01   7.698660e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.704990e-01   8.329500e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.452330e-01   8.202750e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.456720e-01   7.898350e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.453460e-01   7.723580e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.450320e-01   7.926060e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.448220e-01   7.911990e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.447550e-01   7.794280e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.122e+07    1.122e+07    1.122e+07    0.000e+00       100.00\ncycleInit                           10    3.505e+06    3.505e+06    3.505e+06    0.000e+00       100.00\ncycleTracking                       10    7.718e+06    7.718e+06    7.718e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.988e+06    4.988e+06    4.988e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.987e+05    1.987e+05    1.987e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.300e+02    4.300e+02    4.300e+02    0.000e+00       100.00\nFigure Of Merit                 116.73 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.6460908088909288,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 728.753,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47831 s\nsobelfilter - total time for whole calculation: 0.728753 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 8.904296172822065,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.6822,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.3e-05 s\ndl-cifar - total time for whole calculation: 17.6822 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.1574502143536166,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.65,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.65 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.030000000000000027,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1493,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073878 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0667 s\nProcessing elapsed time : 0.0803 s\nStoring    elapsed time : 0.0024 s\nTotal      elapsed time : 0.1493 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0007505553499465147,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 885.274811,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:43Z\",\"578355982\",\"1807343\",\"885.274811\",\"2.755354\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:47Z\",\"2082362576\",\"2561604\",\"61.468716\",\"0.075475\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:57Z\",\"543928715\",\"1174854\",\"941.303322\",\"2.029243\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:11:01Z\",\"2079113994\",\"313968\",\"61.564687\",\"0.009149\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:11:11Z\",\"952257885\",\"416353\",\"537.669560\",\"0.234399\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:11:17Z\",\"2082933965\",\"1021484\",\"61.451792\",\"0.030114\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.496377395714937,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.860421,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:09:58Z\",\"583473328\",\"2499575\",\"877.516523\",\"3.744496\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:02Z\",\"2069176262\",\"2188357\",\"61.860421\",\"0.065332\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:12Z\",\"546502464\",\"2666148\",\"936.884508\",\"4.544338\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:16Z\",\"2068052801\",\"517352\",\"61.893974\",\"0.015454\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:26Z\",\"951075664\",\"1307443\",\"538.338633\",\"0.738902\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:32Z\",\"2065573043\",\"401849\",\"61.968278\",\"0.011901\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.2657512577775191,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 941.303322,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:43Z\",\"578355982\",\"1807343\",\"885.274811\",\"2.755354\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:47Z\",\"2082362576\",\"2561604\",\"61.468716\",\"0.075475\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:57Z\",\"543928715\",\"1174854\",\"941.303322\",\"2.029243\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:11:01Z\",\"2079113994\",\"313968\",\"61.564687\",\"0.009149\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:11:11Z\",\"952257885\",\"416353\",\"537.669560\",\"0.234399\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:11:17Z\",\"2082933965\",\"1021484\",\"61.451792\",\"0.030114\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.7051564878804317,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.893974,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:09:58Z\",\"583473328\",\"2499575\",\"877.516523\",\"3.744496\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:02Z\",\"2069176262\",\"2188357\",\"61.860421\",\"0.065332\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:12Z\",\"546502464\",\"2666148\",\"936.884508\",\"4.544338\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:16Z\",\"2068052801\",\"517352\",\"61.893974\",\"0.015454\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:26Z\",\"951075664\",\"1307443\",\"538.338633\",\"0.738902\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:32Z\",\"2065573043\",\"401849\",\"61.968278\",\"0.011901\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.27534232302051515,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.66956,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:43Z\",\"578355982\",\"1807343\",\"885.274811\",\"2.755354\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:47Z\",\"2082362576\",\"2561604\",\"61.468716\",\"0.075475\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:57Z\",\"543928715\",\"1174854\",\"941.303322\",\"2.029243\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:11:01Z\",\"2079113994\",\"313968\",\"61.564687\",\"0.009149\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:11:11Z\",\"952257885\",\"416353\",\"537.669560\",\"0.234399\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:11:17Z\",\"2082933965\",\"1021484\",\"61.451792\",\"0.030114\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.4731895278565579,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.968278,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:09:58Z\",\"583473328\",\"2499575\",\"877.516523\",\"3.744496\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:02Z\",\"2069176262\",\"2188357\",\"61.860421\",\"0.065332\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:12Z\",\"546502464\",\"2666148\",\"936.884508\",\"4.544338\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:16Z\",\"2068052801\",\"517352\",\"61.893974\",\"0.015454\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T09:10:26Z\",\"951075664\",\"1307443\",\"538.338633\",\"0.738902\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T09:10:32Z\",\"2065573043\",\"401849\",\"61.968278\",\"0.011901\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.3401597754526554,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T09:11:27.900053+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.976,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.017,11.976,3.27%,11.272,86.492,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.39295589999999997,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.824,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.870,11.824,3.11%,11.198,85.595,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.36915699999999996,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.377,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.543,23.377,7.59%,22.447,558.820,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7869137,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.441,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.634,24.441,7.15%,23.639,556.400,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7613310000000002,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 253.659,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),255.173,253.659,2.68%,250.443,827.991,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.8386364,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 134.378,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),135.237,134.378,1.76%,131.837,189.192,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.3801712,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.674,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.938,5.674,15.85%,5.277,79.545,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.9411729999999999,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.193,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.176,3.193,3.21%,0.693,3.407,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.10194959999999999,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.14,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.150,2.140,13.61%,1.927,87.808,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.29261499999999996,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.693,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.710,1.693,12.14%,1.589,48.503,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.207594,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 808.93,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),808.546,808.930,0.45%,777.443,822.413,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.6384570000000007,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 28.774,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),28.853,28.774,7.87%,27.250,187.262,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 2.2707311000000003,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 305.781,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),307.844,305.781,2.60%,301.903,937.912,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 8.003944,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.799,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.788,25.799,5.38%,23.991,137.859,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3873944,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.602,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.652,28.602,4.56%,27.855,146.103,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3065312,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 246.721,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),246.889,246.721,1.78%,241.653,632.164,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.3946242,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 251.559,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.635,251.559,1.13%,250.558,511.732,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.8434755,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.795,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.830,5.795,16.64%,5.232,97.573,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.970112,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.234,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.228,4.234,11.75%,3.666,49.612,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.49678999999999995,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.617,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.623,0.617,9.82%,0.502,1.142,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.06117860000000001,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.005,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.007,1.005,3.22%,0.937,1.097,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.03242539999999999,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.446,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.841,6.446,20.15%,6.125,78.430,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.3784615,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.302,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.441,31.302,4.52%,29.599,106.421,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.4211331999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.468,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.864,6.468,20.40%,6.149,69.969,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.400256,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 43.421,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.550,43.421,2.27%,41.858,80.199,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.988585,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 6.859,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.936,6.859,13.52%,6.615,91.751,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9377471999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 37.737,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),37.686,37.737,2.07%,35.694,68.731,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.7801002,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 6.914,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.988,6.914,4.66%,6.699,30.188,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.32564080000000006,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 113.885,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),113.919,113.885,0.59%,111.949,141.578,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.6721221,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.526,16.341,157.56%,15.690,8249.756,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.2655123,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.352,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.536,16.352,150.87%,15.733,7904.910,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 24.947863200000004,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.339,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.115,16.934,115.88%,16.421,6267.091,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1200583,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.053,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.232,17.053,117.26%,16.455,6386.893,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.2062432,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125991.225,125825.000,3.75%,125520.000,1613540.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.766,21.421,99.60%,20.392,6872.860,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4724.6709375,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.432,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125986.042,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.788,21.432,102.70%,20.536,7076.574,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.376276000000004,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6885.041,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6907.302,6885.041,0.96%,6845.164,7068.266,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 66.3100992,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 17653.752,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18305.002,17653.752,14.31%,14970.658,24661.354,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2619.4457862,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 50269.135,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50328.231,50269.135,4.94%,42923.017,59242.730,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2486.2146114,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2003.343,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2028.629,2003.343,13.87%,1318.235,4971.847,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 281.3708423,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7490.228,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7528.215,7490.228,1.91%,7364.833,7799.826,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 143.7889065,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 17023.7,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16857.158,17023.700,5.21%,15037.888,17950.564,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 878.2579317999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45155.067,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45035.975,45155.067,3.21%,36982.316,48588.210,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1445.6547974999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1398.503,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1516.403,1398.503,31.58%,869.916,5651.264,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 478.8800674,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 41867.223,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),41931.066,41867.223,0.60%,41638.671,42412.406,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 251.586396,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 114906.792,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),115226.931,114906.792,0.59%,114060.723,116192.204,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 679.8388929,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.511,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.624,33.511,3.61%,31.732,85.518,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2138264,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.659,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.738,51.659,2.75%,48.162,125.555,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.422795,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.531,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.777,271.531,2.73%,265.446,961.547,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.4195121,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 311.559,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),311.977,311.559,1.56%,308.131,664.324,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.8668412,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 316.405978,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.424195 s\n316.405978 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 2.7195129821475996,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3843,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00396915 s\nbitcracker - total time for whole calculation: 35.3843 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.024803695961153272,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.961,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1251 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1272 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1260 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1114 1261 30.2471% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1208 1260 32.7993% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1267 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1279 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1058 1270 28.7266% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1245 1281 33.804% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1271 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1271 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1087 1254 29.514% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1076 1268 29.2153% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1098 1267 29.8127% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1251 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1256 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1269 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1252 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1245 1281 33.804% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1130 1262 30.6815% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1027 1253 27.8849% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1258 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1079 1268 29.2968% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1098 1262 29.8127% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1268 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1261 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1257 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1260 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1266 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1260 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1264 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1064 1263 28.8895% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1261 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1257 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1133 1265 30.763% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1077 1268 29.2425% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1265 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1279 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1272 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1102 1270 29.9213% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1265 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1159 1266 31.4689% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1276 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1272 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1263 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.961 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.4170783299733214,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.5773502691896257,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.83,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.699450e-01   6.072450e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.538610e-01   7.474500e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.437600e-01   7.616680e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.733410e-01   8.148750e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.443790e-01   7.885620e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.471370e-01   7.642820e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.453520e-01   7.762990e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.489530e-01   8.059180e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.469540e-01   8.035140e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.482310e-01   7.759680e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.117e+07    1.117e+07    1.117e+07    0.000e+00       100.00\ncycleInit                           10    3.522e+06    3.522e+06    3.522e+06    0.000e+00       100.00\ncycleTracking                       10    7.646e+06    7.646e+06    7.646e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.982e+06    4.982e+06    4.982e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    2.002e+05    2.002e+05    2.002e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.270e+02    4.270e+02    4.270e+02    0.000e+00       100.00\nFigure Of Merit                 117.83 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.07571877794400485,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 720.353,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47567 s\nsobelfilter - total time for whole calculation: 0.720353 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 4.576733409321557,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.1486,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.6e-05 s\ndl-cifar - total time for whole calculation: 24.1486 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0629102800290486,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.68,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.68 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02081665999466131,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1526,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076028 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0679 s\nProcessing elapsed time : 0.0824 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1526 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0004041451884327416,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 879.149186,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:48:21Z\",\"582391912\",\"2794481\",\"879.149186\",\"4.194163\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:48:25Z\",\"2092910194\",\"2792636\",\"61.158946\",\"0.081509\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:48:36Z\",\"550232346\",\"344685\",\"930.516286\",\"0.580902\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:48:39Z\",\"2095468750\",\"829771\",\"61.084192\",\"0.024107\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:48:50Z\",\"950817675\",\"372124\",\"538.483956\",\"0.210722\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:48:55Z\",\"2095307595\",\"583220\",\"61.088886\",\"0.016929\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.324113665085358,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.068607,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:52Z\",\"580170316\",\"3022616\",\"882.518534\",\"4.572787\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:56Z\",\"2096005102\",\"2187390\",\"61.068607\",\"0.063623\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:50:06Z\",\"544630794\",\"183161\",\"940.086481\",\"0.316122\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:50:10Z\",\"2095873539\",\"1007072\",\"61.072398\",\"0.029271\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:50:20Z\",\"954463780\",\"1628406\",\"536.428098\",\"0.913994\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:50:26Z\",\"2092214261\",\"609256\",\"61.179207\",\"0.017766\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.05352993387193096,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 938.419348,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:07Z\",\"583171752\",\"7105007\",\"878.060751\",\"10.596300\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:10Z\",\"2096163151\",\"2562641\",\"61.064022\",\"0.074551\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:21Z\",\"545598642\",\"485210\",\"938.419348\",\"0.832707\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:24Z\",\"2093448126\",\"1890419\",\"61.143184\",\"0.055150\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:35Z\",\"950934810\",\"578710\",\"538.417718\",\"0.326765\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:41Z\",\"2093871148\",\"768239\",\"61.130798\",\"0.022388\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.112506784894569,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.084192,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:48:21Z\",\"582391912\",\"2794481\",\"879.149186\",\"4.194163\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:48:25Z\",\"2092910194\",\"2792636\",\"61.158946\",\"0.081509\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:48:36Z\",\"550232346\",\"344685\",\"930.516286\",\"0.580902\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:48:39Z\",\"2095468750\",\"829771\",\"61.084192\",\"0.024107\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:48:50Z\",\"950817675\",\"372124\",\"538.483956\",\"0.210722\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:48:55Z\",\"2095307595\",\"583220\",\"61.088886\",\"0.016929\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.03792495285868168,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 538.417718,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:07Z\",\"583171752\",\"7105007\",\"878.060751\",\"10.596300\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:10Z\",\"2096163151\",\"2562641\",\"61.064022\",\"0.074551\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:21Z\",\"545598642\",\"485210\",\"938.419348\",\"0.832707\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:24Z\",\"2093448126\",\"1890419\",\"61.143184\",\"0.055150\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:35Z\",\"950934810\",\"578710\",\"538.417718\",\"0.326765\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:41Z\",\"2093871148\",\"768239\",\"61.130798\",\"0.022388\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.1682984302828674,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.130798,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:07Z\",\"583171752\",\"7105007\",\"878.060751\",\"10.596300\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:10Z\",\"2096163151\",\"2562641\",\"61.064022\",\"0.074551\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:21Z\",\"545598642\",\"485210\",\"938.419348\",\"0.832707\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:24Z\",\"2093448126\",\"1890419\",\"61.143184\",\"0.055150\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:49:35Z\",\"950934810\",\"578710\",\"538.417718\",\"0.326765\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:49:41Z\",\"2093871148\",\"768239\",\"61.130798\",\"0.022388\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.045199428584144184,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T08:50:37.300287+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.832,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.866,11.832,3.10%,11.078,72.218,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.367846,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.795,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.840,11.795,2.33%,11.091,25.133,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.275872,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.417,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.592,23.417,8.41%,22.656,624.154,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.9840872,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.532,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.695,24.532,9.49%,23.608,748.259,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.3435555,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 256.356,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),257.831,256.356,2.59%,252.587,803.555,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.677822900000001,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 135.355,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),142.124,135.355,19.21%,133.296,312.795,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 27.302020400000004,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.869,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.926,5.869,19.89%,5.494,118.967,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.1786814,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.162,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.144,3.162,3.33%,0.323,3.381,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.10469520000000002,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.124,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.134,2.124,5.75%,1.929,16.977,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.122705,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.71,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.728,1.710,6.23%,1.628,16.063,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1076544,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.076,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.563,860.076,0.47%,823.220,873.207,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 4.039946099999999,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 29.114,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.008,29.114,5.34%,27.233,152.133,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5490271999999998,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 311.328,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),313.297,311.328,2.28%,305.292,826.177,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.1431716,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.881,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.837,25.881,5.27%,23.864,143.991,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3616099,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 29.102,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.140,29.102,4.76%,28.256,150.044,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3870639999999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 249.255,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),249.508,249.255,1.60%,246.013,621.635,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.992128,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 251.248,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.329,251.248,1.22%,250.313,538.263,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.0662138,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.844,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.894,5.844,16.30%,5.381,83.274,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.9607220000000001,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.261,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.260,4.261,10.98%,3.745,45.687,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.467748,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.64,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.642,0.640,9.11%,0.525,1.165,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0584862,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 0.982,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.986,0.982,2.12%,0.937,1.051,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0209032,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.524,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.878,6.524,18.02%,6.023,72.397,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.2394156,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.275,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.396,31.275,3.93%,29.178,84.888,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.2338628,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.524,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.883,6.524,17.22%,6.175,63.935,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.1852525999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 43.362,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.482,43.362,2.46%,41.637,92.547,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.0696572,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 7.012,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.051,7.012,4.84%,6.665,30.216,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.34126839999999997,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 38.26,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),38.329,38.260,1.99%,36.356,70.111,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.7627471,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 7.174,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.223,7.174,4.73%,6.859,31.570,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.3416479,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 113.901,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),113.929,113.901,0.62%,111.780,134.684,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.7063598,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.590,16.425,145.83%,15.676,7666.177,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.2655123,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.425,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.590,16.425,145.83%,15.676,7666.177,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 24.193197,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.339,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.701,17.609,109.15%,16.745,6125.856,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1200583,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.146,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.317,17.146,117.84%,16.544,6448.796,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.4063528,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125956.310,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.786,21.471,93.10%,20.641,6412.819,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4672.979101,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.449,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125951.569,125825.000,3.75%,125520.000,1612930.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.760,21.449,107.31%,20.387,7382.164,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.350656,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6902.663,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6919.766,6902.663,0.97%,6857.968,7090.932,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 67.1217302,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 17974.17,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17534.755,17974.170,9.57%,14893.927,20395.507,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1678.0760535000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 50743.63,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50781.851,50743.630,5.23%,42848.404,61860.244,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2655.8908073000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2005.403,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2028.986,2005.403,13.43%,1348.979,4983.099,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 272.4928198,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7464.494,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7483.500,7464.494,1.77%,7307.660,7737.057,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 132.45795,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 17077.213,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16638.671,17077.213,9.82%,13654.097,18563.567,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1633.9174922,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45279.519,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45126.707,45279.519,3.18%,37663.586,49140.891,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1435.0292826000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1409.659,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1526.452,1409.659,31.65%,899.549,6919.975,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 483.122058,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42353.976,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42422.148,42353.976,0.49%,42087.982,42809.716,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 207.8685252,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 116868.122,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116982.041,116868.122,0.45%,116160.546,117962.677,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 526.4191845,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.394,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.509,33.394,4.33%,31.241,124.547,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4509397,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.922,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),52.001,51.922,2.45%,48.615,98.658,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2740245,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.137,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.366,271.137,2.54%,265.037,907.675,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 6.892696399999999,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 312.036,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),312.624,312.036,1.72%,308.303,661.180,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.3771328,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 317.17873,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.423161 s\n317.178730 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.4539041318276347,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3459,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00396301 s\nbitcracker - total time for whole calculation: 35.3459 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.023350160599020085,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.628,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1250 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1279 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1258 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1260 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1069 1262 29.0253% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1073 1262 29.1339% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1262 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1273 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1083 1261 29.4054% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1256 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1079 1265 29.2968% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1108 1259 30.0842% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1124 1262 30.5186% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1264 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1141 1264 30.9802% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1067 1268 28.9709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1114 1256 30.2471% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1148 1265 31.1702% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1115 1269 30.2742% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1269 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1268 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1259 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1210 1274 32.8537% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1256 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1146 1265 31.1159% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1203 1260 32.6636% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1271 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1265 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1249 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1073 1266 29.1339% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1056 1252 28.6723% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1083 1268 29.4054% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1079 1263 29.2968% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1084 1260 29.4325% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1125 1273 30.5458% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1146 1261 31.1159% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1259 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1028 1269 27.912% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1211 1261 32.8808% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1084 1266 29.4325% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1181 1266 32.0662% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.628 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.3019177592215022,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.1547005383792515,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.92,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.633990e-01   6.039020e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.494590e-01   7.455560e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.394620e-01   7.619710e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.696380e-01   8.143790e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.415010e-01   8.049130e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.448260e-01   7.814410e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.434600e-01   7.806560e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.456090e-01   8.060160e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.423640e-01   7.826990e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.447210e-01   7.581100e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.113e+07    1.113e+07    1.113e+07    0.000e+00       100.00\ncycleInit                           10    3.484e+06    3.484e+06    3.484e+06    0.000e+00       100.00\ncycleTracking                       10    7.640e+06    7.640e+06    7.640e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.989e+06    4.989e+06    4.989e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.914e+05    1.914e+05    1.914e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.110e+02    4.110e+02    4.110e+02    0.000e+00       100.00\nFigure Of Merit                 117.92 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.10785793124909096,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 724.346,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.46258 s\nsobelfilter - total time for whole calculation: 0.724346 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 41.65580366527575,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.1421,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 9e-05 s\ndl-cifar - total time for whole calculation: 24.1421 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.015602029782478693,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.69,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.69 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02081665999466131,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1518,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076243 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0669 s\nProcessing elapsed time : 0.0825 s\nStoring    elapsed time : 0.0024 s\nTotal      elapsed time : 0.1518 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0006999999999999923,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 871.845188,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:58:58Z\",\"587302298\",\"5572815\",\"871.845188\",\"8.228153\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:02Z\",\"2095650202\",\"2744893\",\"61.078979\",\"0.079905\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:59:13Z\",\"543190115\",\"629399\",\"942.580757\",\"1.092281\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:16Z\",\"2094023993\",\"680405\",\"61.126334\",\"0.019818\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:59:27Z\",\"948386284\",\"744779\",\"539.864674\",\"0.423831\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:32Z\",\"2093349297\",\"447002\",\"61.146033\",\"0.013021\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.550708357612778,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.098861,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:00:29Z\",\"582137054\",\"2710796\",\"879.533135\",\"4.071215\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:00:33Z\",\"2094967746\",\"2486929\",\"61.098861\",\"0.072416\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:00:43Z\",\"539961814\",\"286127\",\"948.215413\",\"0.501689\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:00:47Z\",\"2091597599\",\"519537\",\"61.197243\",\"0.015083\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:00:57Z\",\"953271947\",\"604126\",\"537.097693\",\"0.339456\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:01:03Z\",\"2092533044\",\"452695\",\"61.169885\",\"0.013199\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.05334004688162239,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 942.580757,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:58:58Z\",\"587302298\",\"5572815\",\"871.845188\",\"8.228153\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:02Z\",\"2095650202\",\"2744893\",\"61.078979\",\"0.079905\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:59:13Z\",\"543190115\",\"629399\",\"942.580757\",\"1.092281\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:16Z\",\"2094023993\",\"680405\",\"61.126334\",\"0.019818\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:59:27Z\",\"948386284\",\"744779\",\"539.864674\",\"0.423831\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:32Z\",\"2093349297\",\"447002\",\"61.146033\",\"0.013021\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.633690764445633,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.197243,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:00:29Z\",\"582137054\",\"2710796\",\"879.533135\",\"4.071215\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:00:33Z\",\"2094967746\",\"2486929\",\"61.098861\",\"0.072416\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:00:43Z\",\"539961814\",\"286127\",\"948.215413\",\"0.501689\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:00:47Z\",\"2091597599\",\"519537\",\"61.197243\",\"0.015083\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:00:57Z\",\"953271947\",\"604126\",\"537.097693\",\"0.339456\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:01:03Z\",\"2092533044\",\"452695\",\"61.169885\",\"0.013199\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.042027051577923386,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.110094,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:59:44Z\",\"589366892\",\"3529815\",\"868.753551\",\"5.163813\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:47Z\",\"2092199754\",\"2354971\",\"61.179689\",\"0.068750\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:59:58Z\",\"543857440\",\"197504\",\"941.423275\",\"0.338142\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:00:01Z\",\"2091473420\",\"405344\",\"61.200875\",\"0.011747\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T08:00:12Z\",\"953249967\",\"632470\",\"537.110094\",\"0.355563\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T08:00:18Z\",\"2094584542\",\"526067\",\"61.109974\",\"0.015293\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.5939494249380535,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.146033,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:58:58Z\",\"587302298\",\"5572815\",\"871.845188\",\"8.228153\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:02Z\",\"2095650202\",\"2744893\",\"61.078979\",\"0.079905\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:59:13Z\",\"543190115\",\"629399\",\"942.580757\",\"1.092281\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:16Z\",\"2094023993\",\"680405\",\"61.126334\",\"0.019818\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:59:27Z\",\"948386284\",\"744779\",\"539.864674\",\"0.423831\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:59:32Z\",\"2093349297\",\"447002\",\"61.146033\",\"0.013021\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.030162054820585343,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T08:01:14.192612+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.815,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.852,11.815,3.49%,11.033,100.575,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.4136348,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.703,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.747,11.703,2.41%,11.049,25.887,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.2831027,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.52,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.689,21.520,7.85%,20.962,535.721,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7025865,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 22.164,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.341,22.164,7.56%,21.571,531.740,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.6889796000000001,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 200.958,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),202.009,200.958,3.10%,196.551,747.038,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.2622789999999995,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.867,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),87.581,86.867,2.09%,85.732,176.801,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.8304429,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.237,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.322,5.237,15.35%,4.790,59.437,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.816927,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.861,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.854,2.861,3.24%,0.327,3.263,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.09246960000000001,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.895,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.904,1.895,13.60%,1.673,69.934,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.258944,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.434,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.444,1.434,26.75%,1.351,120.295,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.38627,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.664,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.795,860.664,0.54%,813.901,867.787,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 4.642893,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.587,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.534,26.587,5.97%,24.633,153.420,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5840797999999998,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 31.253,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),31.124,31.253,5.10%,29.241,152.906,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5873239999999997,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 268.632,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),270.233,268.632,3.04%,260.642,958.579,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 8.2150832,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 250.799,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),250.971,250.799,2.02%,249.639,737.449,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.0696142,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.778,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.771,25.778,4.39%,24.022,117.789,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.1313468999999998,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.832,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.900,28.832,3.72%,27.979,106.351,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.07508,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 244.029,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),244.135,244.029,1.92%,238.968,684.070,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.687391999999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 248.3,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),248.412,248.300,2.22%,247.432,788.438,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.5147464,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.594,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.627,5.594,15.31%,4.984,72.551,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.8614937,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.319,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.322,4.319,11.88%,3.743,51.482,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5134536000000001,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.531,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.544,1.531,5.67%,1.371,2.102,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0875448,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.051,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.053,1.051,3.25%,0.982,1.165,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.034222499999999996,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.233,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.734,13.233,23.22%,12.372,85.797,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.1890348,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.529,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.049,14.529,29.31%,13.371,197.181,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 4.4108619,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 77.658,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.086,77.658,4.70%,76.433,177.076,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.670042,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 79.871,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.298,79.871,4.16%,78.736,155.985,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.3403967999999997,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.648,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.786,13.648,4.68%,12.610,47.277,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.6451847999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 15.196,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.363,15.196,5.61%,14.223,78.651,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8618643,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 76.238,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),76.261,76.238,0.59%,75.281,97.386,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.44993989999999995,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 80.591,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.646,80.591,0.63%,79.798,104.873,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.5080698,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.859,95034.000,0.38%,95034.000,101509.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.147,13.993,204.26%,13.282,9136.470,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206419999997,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 13.993,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.859,95034.000,0.38%,95034.000,101509.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.147,13.993,204.26%,13.282,9136.470,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 28.896662199999998,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.080,13.928,189.97%,13.212,8455.836,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206800000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.064,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.863,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.229,14.064,193.23%,13.396,8689.449,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 27.4946967,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97313.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98308.348,97313.000,275.35%,96525.000,85698968.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.699,19.945,3732.27%,17.001,267929.505,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 270692.036218,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 19.945,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98308.348,97313.000,275.35%,96525.000,85698968.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.699,19.945,3732.27%,17.001,267929.505,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 847.1879673,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5450.056,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5450.148,5450.056,0.42%,5412.269,5496.713,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 22.8906216,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11160.444,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11204.718,11160.444,5.31%,10522.700,12088.199,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 594.9705258,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17781.356,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18108.284,17781.356,8.13%,15276.214,23306.331,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1472.2034892000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 763.354,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),753.758,763.354,7.35%,483.980,1454.121,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 55.401213,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6013.306,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6012.078,6013.306,0.94%,5937.524,6147.992,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 56.5135332,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6478.113,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6500.657,6478.113,2.57%,6276.922,6905.080,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 167.0668849,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17810.337,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18216.576,17810.337,8.71%,15592.152,23887.898,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1586.6637696000003,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 772.605,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),762.175,772.605,7.13%,521.990,1211.966,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.3430775,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29576.367,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29603.482,29576.367,0.31%,29514.739,29833.491,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 91.7707942,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 85406.267,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),85340.851,85406.267,0.57%,84237.529,85957.309,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 486.4428506999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.073,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.166,26.073,4.92%,24.575,139.672,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2873672,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 244.517,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),244.694,244.517,1.87%,239.104,656.847,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.5757778,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 324.889181,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.413118 s\n324.889181 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 2.7070670706475415,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3385,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00402415 s\nbitcracker - total time for whole calculation: 35.3385 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.03485632415119928,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.595,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1080 1252 29.3239% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1118 1260 30.3557% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1039 1260 28.2107% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1168 1269 31.7133% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1081 1273 29.3511% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1084 1262 29.4325% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1253 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1056 1263 28.6723% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1260 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1245 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1279 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1253 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1209 1252 32.8265% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1269 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1270 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1264 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1168 1260 31.7133% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1272 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1087 1255 29.514% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1264 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1277 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1258 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1086 1257 29.4868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1150 1262 31.2245% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1258 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1272 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1252 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1044 1258 28.3465% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1179 1274 32.0119% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1258 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1271 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1260 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1279 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1268 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1272 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1266 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1267 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1270 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1267 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1253 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1128 1257 30.6272% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1277 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1098 1264 29.8127% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1149 1267 31.1974% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1255 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1263 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.595 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.2117931380695169,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 238.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.7,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.647450e-01   6.136360e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.505600e-01   7.547930e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.419140e-01   7.689360e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.706900e-01   8.244430e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.408370e-01   7.977520e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.448770e-01   7.730320e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.426490e-01   7.713390e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.437720e-01   7.919940e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.421880e-01   7.920720e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.443970e-01   7.658470e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.114e+07    1.114e+07    1.114e+07    0.000e+00       100.00\ncycleInit                           10    3.487e+06    3.487e+06    3.487e+06    0.000e+00       100.00\ncycleTracking                       10    7.654e+06    7.654e+06    7.654e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.989e+06    4.989e+06    4.989e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.945e+05    1.945e+05    1.945e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.180e+02    4.180e+02    4.180e+02    0.000e+00       100.00\nFigure Of Merit                 117.70 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.46500896048714696,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 711.8,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47327 s\nsobelfilter - total time for whole calculation: 0.7118 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 4.776076716301774,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.6851,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.8e-05 s\ndl-cifar - total time for whole calculation: 17.6851 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.2258149906449969,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.64,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.64 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.030000000000000027,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1501,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.074478 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0671 s\nProcessing elapsed time : 0.0808 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1501 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0003214550253664281,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 876.883102,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:35:08Z\",\"583896738\",\"2772453\",\"876.883102\",\"4.140351\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:35:12Z\",\"2076673231\",\"2704194\",\"61.637128\",\"0.080117\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:35:22Z\",\"544393610\",\"750121\",\"940.497403\",\"1.294159\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:35:26Z\",\"2071874774\",\"434830\",\"61.779798\",\"0.012821\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:35:36Z\",\"954125119\",\"898926\",\"536.617633\",\"0.505431\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:35:42Z\",\"2074624493\",\"854973\",\"61.697921\",\"0.025404\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.7129847439343084,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.928051,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:34:23Z\",\"581285694\",\"1876679\",\"880.813443\",\"2.833525\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:34:27Z\",\"2066916864\",\"2349506\",\"61.928051\",\"0.070304\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:34:37Z\",\"543091395\",\"261506\",\"942.751255\",\"0.453045\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:34:41Z\",\"2066303432\",\"528354\",\"61.946375\",\"0.015719\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:34:51Z\",\"944588472\",\"611158\",\"542.035168\",\"0.350605\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:34:57Z\",\"2066164678\",\"623779\",\"61.950536\",\"0.018631\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.1783458583548671,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 941.054568,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:35:53Z\",\"584746099\",\"2708656\",\"875.608647\",\"4.033663\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:35:57Z\",\"2065807189\",\"2428047\",\"61.961320\",\"0.072723\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:36:07Z\",\"544071970\",\"1010021\",\"941.054568\",\"1.748560\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:36:11Z\",\"2065983973\",\"160606\",\"61.955950\",\"0.004518\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:36:21Z\",\"953695307\",\"1191348\",\"536.859764\",\"0.669606\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:36:27Z\",\"2068189587\",\"855444\",\"61.889886\",\"0.025542\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.1739554542300064,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.946375,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:34:23Z\",\"581285694\",\"1876679\",\"880.813443\",\"2.833525\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:34:27Z\",\"2066916864\",\"2349506\",\"61.928051\",\"0.070304\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:34:37Z\",\"543091395\",\"261506\",\"942.751255\",\"0.453045\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:34:41Z\",\"2066303432\",\"528354\",\"61.946375\",\"0.015719\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:34:51Z\",\"944588472\",\"611158\",\"542.035168\",\"0.350605\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:34:57Z\",\"2066164678\",\"623779\",\"61.950536\",\"0.018631\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.09905310415630755,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 536.859764,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:35:53Z\",\"584746099\",\"2708656\",\"875.608647\",\"4.033663\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:35:57Z\",\"2065807189\",\"2428047\",\"61.961320\",\"0.072723\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:36:07Z\",\"544071970\",\"1010021\",\"941.054568\",\"1.748560\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:36:11Z\",\"2065983973\",\"160606\",\"61.955950\",\"0.004518\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:36:21Z\",\"953695307\",\"1191348\",\"536.859764\",\"0.669606\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:36:27Z\",\"2068189587\",\"855444\",\"61.889886\",\"0.025542\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.0603136947215632,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.889886,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:35:53Z\",\"584746099\",\"2708656\",\"875.608647\",\"4.033663\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:35:57Z\",\"2065807189\",\"2428047\",\"61.961320\",\"0.072723\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:36:07Z\",\"544071970\",\"1010021\",\"941.054568\",\"1.748560\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:36:11Z\",\"2065983973\",\"160606\",\"61.955950\",\"0.004518\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T07:36:21Z\",\"953695307\",\"1191348\",\"536.859764\",\"0.669606\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T07:36:27Z\",\"2068189587\",\"855444\",\"61.889886\",\"0.025542\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.1318732484559815,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T07:36:37.833536+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.624,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.651,11.624,3.20%,10.919,85.695,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.372832,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.734,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.779,11.734,2.32%,11.031,25.491,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.2732728,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.341,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.526,23.341,7.38%,22.687,546.153,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7362188,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.341,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.477,24.341,2.34%,23.422,87.195,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5727618,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 254.545,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),256.045,254.545,2.61%,250.845,811.366,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.6827745,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.922,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),144.073,133.922,23.45%,132.046,308.625,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 33.7851185,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.775,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.864,5.775,16.06%,5.366,85.975,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.9417583999999999,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.157,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.138,3.157,3.36%,0.583,3.366,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.10543679999999998,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.129,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.138,2.129,5.31%,1.936,10.633,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.11352779999999998,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.701,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.715,1.701,5.68%,1.610,7.369,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.097412,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.664,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.057,860.664,0.41%,823.220,871.997,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.5262336999999997,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 28.847,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),28.935,28.847,5.11%,27.357,147.473,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4785785,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 307.028,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),308.969,307.028,2.74%,300.139,981.335,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 8.4657506,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.759,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.774,25.759,5.17%,24.075,139.247,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3325158,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.918,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.951,28.918,4.31%,28.031,143.333,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2477881,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 248.375,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.561,248.375,1.93%,244.323,702.239,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.797227299999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 252.036,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),252.127,252.036,1.03%,251.150,487.580,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.5969081000000003,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 6.001,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),6.035,6.001,8.05%,5.052,43.943,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.4858175,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.271,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.283,4.271,9.34%,3.747,38.127,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.4000322,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.708,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.708,0.708,9.31%,0.571,1.234,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0659148,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.005,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.006,1.005,1.71%,0.960,1.051,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.017202600000000002,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.378,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.808,6.378,26.51%,6.086,116.380,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.8048008,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 32.089,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),32.282,32.089,5.57%,30.239,127.849,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.7981073999999997,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.371,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.746,6.371,22.62%,6.053,99.763,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.5259452000000002,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 43.143,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.309,43.143,2.37%,41.283,64.475,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.0264233,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 6.911,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.973,6.911,5.58%,6.672,38.831,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.38909340000000003,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 38.637,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),38.630,38.637,3.03%,36.023,109.356,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.170489,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 6.942,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.009,6.942,4.59%,6.695,30.259,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.3217131,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 114.288,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),114.329,114.288,0.92%,112.318,143.612,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.0518268,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.334,16.148,157.98%,15.564,8175.196,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.222,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.843,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.330,16.222,139.17%,15.731,7202.270,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.726460999999997,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.242,17.058,121.87%,16.527,6640.965,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1199392,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 16.987,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.172,16.987,120.74%,16.329,6555.211,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.7334728,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),126022.783,125825.000,3.75%,125216.000,1613235.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.937,21.694,151.25%,20.512,10501.422,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4725.854362499999,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.493,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125978.673,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.837,21.493,97.79%,20.577,6755.021,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 21.3544023,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6950.835,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6978.570,6950.835,1.00%,6920.139,7139.471,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 69.7857,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 18224.673,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18246.300,18224.673,6.38%,16467.988,19728.235,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1164.11394,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 49931.122,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50006.507,49931.122,5.10%,42868.149,59421.675,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2550.3318569999997,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2034.472,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2067.261,2034.472,13.64%,1424.843,4995.301,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 281.9744004,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7425.482,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7467.763,7425.482,1.74%,7315.204,7717.105,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 129.9390762,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 16702.764,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16386.705,16702.764,7.59%,13665.630,17954.990,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1243.7509095,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45464.794,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45390.922,45464.794,2.99%,40337.804,48867.041,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1357.1885678,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1409.811,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1526.441,1409.811,31.51%,910.317,5235.917,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 480.98155909999997,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42362.076,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42446.709,42362.076,0.49%,42209.480,42962.038,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 207.9888741,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 117743.168,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),117510.734,117743.168,0.41%,116369.208,117990.368,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 481.79400939999994,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.534,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.630,33.534,3.54%,31.744,78.234,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.1905020000000002,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 52.097,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),52.140,52.097,2.40%,48.346,79.100,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.25136,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.264,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.549,271.264,2.83%,265.538,982.825,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.6848367,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 313.093,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),313.771,313.093,1.64%,309.823,613.567,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.1458444,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 316.696616,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.423805 s\n316.696616 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 6.155036790120135,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.4262,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00401576 s\nbitcracker - total time for whole calculation: 35.4262 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.06699529834249576,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.772,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1161 1270 31.5232% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1271 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1075 1264 29.1882% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1272 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1259 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1270 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1270 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1250 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1261 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1270 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1204 1250 32.6907% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1261 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1271 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1265 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1256 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1117 1263 30.3285% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1270 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1257 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1277 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1115 1271 30.2742% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1162 1253 31.5504% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1276 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1257 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1257 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1263 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1256 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1142 1260 31.0073% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1126 1268 30.5729% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1257 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1264 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1269 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1260 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1056 1267 28.6723% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1120 1265 30.41% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1193 1267 32.3921% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1264 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1257 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1253 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1260 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1256 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1167 1256 31.6861% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.772 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.06069870948655014,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.5275252316519468,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 118.91,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.635510e-01   6.052450e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.523260e-01   7.453030e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.419930e-01   7.614320e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.733150e-01   8.148860e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.445670e-01   7.885840e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.474770e-01   7.642010e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.449510e-01   7.616410e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.473010e-01   7.828960e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.450100e-01   7.819080e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.472600e-01   7.700980e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.109e+07    1.109e+07    1.109e+07    0.000e+00       100.00\ncycleInit                           10    3.508e+06    3.508e+06    3.508e+06    0.000e+00       100.00\ncycleTracking                       10    7.576e+06    7.576e+06    7.576e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.981e+06    4.981e+06    4.981e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.943e+05    1.943e+05    1.943e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.240e+02    4.240e+02    4.240e+02    0.000e+00       100.00\nFigure Of Merit                 118.91 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.49802945026707995,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 715.425,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47024 s\nsobelfilter - total time for whole calculation: 0.715425 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 8.278573504406248,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.1354,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.6e-05 s\ndl-cifar - total time for whole calculation: 24.1354 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.08477619555826577,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.66,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.66 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.023094010767585053,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1515,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.075991 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0669 s\nProcessing elapsed time : 0.0822 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1515 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.00034641016151376933,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 878.106349,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:37:21Z\",\"583088410\",\"3376422\",\"878.106349\",\"5.048028\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:37:25Z\",\"2097228308\",\"2193012\",\"61.032989\",\"0.063713\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:37:36Z\",\"544288629\",\"292051\",\"940.677590\",\"0.501777\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:37:39Z\",\"2097921607\",\"1569291\",\"61.012793\",\"0.045582\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:37:50Z\",\"956970695\",\"697045\",\"535.021834\",\"0.388998\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:37:55Z\",\"2095268121\",\"521401\",\"61.090037\",\"0.015085\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.398081692029307,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.059001,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:07Z\",\"588552551\",\"2793944\",\"869.946440\",\"4.114910\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:10Z\",\"2096335046\",\"2298051\",\"61.059001\",\"0.066836\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:21Z\",\"553810285\",\"1228331\",\"924.507948\",\"2.046088\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:24Z\",\"2093893344\",\"358928\",\"61.130145\",\"0.010352\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:35Z\",\"949881431\",\"486856\",\"539.014755\",\"0.275674\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:41Z\",\"2094858864\",\"401009\",\"61.101970\",\"0.011659\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.015532689958062843,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 939.018191,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:36:36Z\",\"581742377\",\"4048204\",\"880.148467\",\"6.071317\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:36:40Z\",\"2096276809\",\"2414016\",\"61.060703\",\"0.070222\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:36:50Z\",\"545250722\",\"501707\",\"939.018191\",\"0.863839\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:36:54Z\",\"2093547546\",\"373903\",\"61.140242\",\"0.010879\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:37:04Z\",\"941501870\",\"631966\",\"543.812179\",\"0.364541\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:37:10Z\",\"2091475114\",\"572628\",\"61.200827\",\"0.016731\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 8.895299127145856,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.130145,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:07Z\",\"588552551\",\"2793944\",\"869.946440\",\"4.114910\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:10Z\",\"2096335046\",\"2298051\",\"61.059001\",\"0.066836\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:21Z\",\"553810285\",\"1228331\",\"924.507948\",\"2.046088\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:24Z\",\"2093893344\",\"358928\",\"61.130145\",\"0.010352\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:35Z\",\"949881431\",\"486856\",\"539.014755\",\"0.275674\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:41Z\",\"2094858864\",\"401009\",\"61.101970\",\"0.011659\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.07084806385733596,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 539.014755,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:07Z\",\"588552551\",\"2793944\",\"869.946440\",\"4.114910\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:10Z\",\"2096335046\",\"2298051\",\"61.059001\",\"0.066836\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:21Z\",\"553810285\",\"1228331\",\"924.507948\",\"2.046088\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:24Z\",\"2093893344\",\"358928\",\"61.130145\",\"0.010352\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:35Z\",\"949881431\",\"486856\",\"539.014755\",\"0.275674\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:41Z\",\"2094858864\",\"401009\",\"61.101970\",\"0.011659\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.401303980394939,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.10197,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:07Z\",\"588552551\",\"2793944\",\"869.946440\",\"4.114910\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:10Z\",\"2096335046\",\"2298051\",\"61.059001\",\"0.066836\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:21Z\",\"553810285\",\"1228331\",\"924.507948\",\"2.046088\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:24Z\",\"2093893344\",\"358928\",\"61.130145\",\"0.010352\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:38:35Z\",\"949881431\",\"486856\",\"539.014755\",\"0.275674\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:38:41Z\",\"2094858864\",\"401009\",\"61.101970\",\"0.011659\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.060813275740852574,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T06:38:51.892541+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.797,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.835,11.797,2.98%,11.025,61.309,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.352683,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.685,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.726,11.685,3.03%,10.884,76.525,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3552978,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.465,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.609,21.465,8.16%,20.509,553.773,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7632944000000004,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 22.297,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.429,22.297,7.61%,21.265,533.581,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7068469,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 203.52,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),204.165,203.520,3.00%,198.588,729.767,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.124949999999999,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 85.275,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),85.943,85.275,1.96%,83.881,134.115,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.6844827999999998,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.208,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.276,5.208,19.46%,4.765,101.003,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.0267096,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.86,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.848,2.860,3.58%,0.499,3.234,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.10195839999999999,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.885,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.893,1.885,7.15%,1.682,25.656,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1353495,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.405,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.420,1.405,30.36%,1.353,128.304,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.43111199999999994,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.37,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.938,860.370,0.42%,820.536,867.189,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.6117396,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 27.37,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),27.487,27.370,5.12%,25.756,146.953,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4073343999999999,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.447,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.467,30.447,4.71%,28.903,151.376,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4349957,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 267.974,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),269.551,267.974,2.54%,262.133,778.863,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 6.846595399999999,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 255.52,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),255.584,255.520,1.52%,253.130,616.170,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.8848768000000002,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.827,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.907,25.827,5.24%,24.477,141.990,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3575268,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.548,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.616,28.548,4.55%,27.740,144.509,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.302028,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 247.67,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.890,247.670,1.96%,242.586,699.661,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.858644,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 252.106,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),252.193,252.106,1.71%,250.528,665.424,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.3125003,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.4,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.430,5.400,11.54%,4.966,53.847,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.6266219999999999,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.395,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.423,4.395,15.84%,3.884,71.249,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.7006032,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.508,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.514,1.508,6.78%,1.280,2.240,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.1026492,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.074,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.071,1.074,2.37%,1.005,1.165,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0253827,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.509,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),14.062,13.509,26.13%,12.273,105.411,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.6744005999999994,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.52,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.791,14.520,23.08%,13.068,88.554,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.4137627999999998,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 79.361,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),79.927,79.361,4.56%,78.569,160.922,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.6446712,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 80.719,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),81.125,80.719,4.12%,79.568,160.148,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.34235,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 14.311,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),14.353,14.311,6.65%,13.528,93.612,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9544745,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 15.009,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.917,15.009,5.41%,13.844,63.723,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8070097,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 81.703,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),81.659,81.703,1.04%,80.701,152.847,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.8492536,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 82.101,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),82.102,82.101,0.59%,80.786,104.094,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.4844018,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.447,14.280,241.02%,13.322,11007.278,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.28,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.447,14.280,241.02%,13.322,11007.278,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 34.8201594,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.624,14.458,233.93%,13.556,10816.913,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.259,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.413,14.259,228.93%,13.371,10447.610,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 32.995680899999996,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98381.569,97528.000,282.32%,96528.000,87928960.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.868,20.153,3826.89%,17.324,276765.129,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 277750.8456008,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 19.846,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98358.795,97528.000,282.05%,96454.000,87825757.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.617,19.846,3880.68%,17.458,277567.040,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 877.6933955999999,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5352.016,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5348.197,5352.016,0.21%,5320.452,5364.246,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 11.2312137,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11382.828,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),10988.608,11382.828,7.43%,9564.588,11833.005,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 816.4535743999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17426.069,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17743.965,17426.069,7.75%,15201.129,23063.223,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1375.1572875,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 773.439,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),763.208,773.439,7.08%,482.161,1510.778,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.035126399999996,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6049.379,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6045.626,6049.379,1.28%,5914.845,6198.093,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 77.38401280000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6388.712,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6429.333,6388.712,3.80%,6051.904,6806.311,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 244.314654,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17678.634,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18079.153,17678.634,7.94%,15402.330,22542.614,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1435.4847481999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 765.077,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),756.592,765.077,7.24%,503.196,1337.610,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.7772608,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29562.729,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29600.252,29562.729,0.34%,29476.766,29796.859,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 100.64085680000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 87037.244,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),86930.050,87037.244,0.34%,86210.806,87203.882,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 295.56217000000004,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.196,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.259,26.196,4.95%,24.389,142.453,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2998205,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 247.794,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.075,247.794,2.30%,243.543,785.699,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.705724999999999,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 319.23967,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.420429 s\n319.239670 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.4264461878249852,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3611,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00401848 s\nbitcracker - total time for whole calculation: 35.3611 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.024978457384979863,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.798,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1075 1269 29.1882% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1192 1258 32.3649% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1087 1264 29.514% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1180 1274 32.0391% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1251 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1139 1258 30.9259% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1265 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1263 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1269 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1139 1275 30.9259% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1268 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1138 1277 30.8987% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1281 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1035 1262 28.1021% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1253 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1075 1265 29.1882% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1256 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1072 1257 29.1067% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1292 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1264 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1260 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1271 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1276 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1260 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1269 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1104 1265 29.9756% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1262 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1260 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1259 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1261 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1258 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1262 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1268 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1267 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1080 1260 29.3239% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1071 1259 29.0796% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1265 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1255 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1198 1256 32.5278% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1080 1265 29.3239% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1255 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1265 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.798 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.21223179152363175,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 238.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.06,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.682770e-01   6.123100e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.553250e-01   7.536280e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.423930e-01   7.678740e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.773220e-01   8.229450e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.453540e-01   7.961480e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.493020e-01   7.717920e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.460120e-01   7.712100e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.494000e-01   8.052160e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.468820e-01   8.122780e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.499820e-01   7.826440e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.123e+07    1.123e+07    1.123e+07    0.000e+00       100.00\ncycleInit                           10    3.530e+06    3.530e+06    3.530e+06    0.000e+00       100.00\ncycleTracking                       10    7.696e+06    7.696e+06    7.696e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.978e+06    4.978e+06    4.978e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.937e+05    1.937e+05    1.937e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.380e+02    4.380e+02    4.380e+02    0.000e+00       100.00\nFigure Of Merit                 117.06 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.29704096238286015,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 718.51,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47086 s\nsobelfilter - total time for whole calculation: 0.71851 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 9.381869286021825,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.4539,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.8e-05 s\ndl-cifar - total time for whole calculation: 17.4539 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.2671466451221124,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.63,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.63 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.026457513110645845,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1498,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.074237 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0670 s\nProcessing elapsed time : 0.0805 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1498 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.000550757054728605,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 879.938505,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:11:15Z\",\"581880478\",\"3981065\",\"879.938505\",\"5.977940\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:11:19Z\",\"2073793595\",\"1855519\",\"61.722672\",\"0.055162\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:11:29Z\",\"536527580\",\"492584\",\"954.285229\",\"0.875213\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:11:33Z\",\"2073775607\",\"652992\",\"61.723173\",\"0.019380\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:11:43Z\",\"941764379\",\"574497\",\"543.660563\",\"0.331417\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:11:49Z\",\"2073607998\",\"862406\",\"61.728166\",\"0.025669\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.6404208484184952,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.847411,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:30Z\",\"582473719\",\"3288303\",\"879.031873\",\"4.928496\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:34Z\",\"2069611745\",\"2322427\",\"61.847411\",\"0.069297\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:44Z\",\"542173325\",\"790033\",\"944.349057\",\"1.375910\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:48Z\",\"2065264724\",\"1001839\",\"61.977539\",\"0.030000\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:58Z\",\"952701471\",\"954127\",\"537.419565\",\"0.537914\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:11:04Z\",\"2067682642\",\"998634\",\"61.905063\",\"0.029850\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.11026437338052504,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 944.349057,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:30Z\",\"582473719\",\"3288303\",\"879.031873\",\"4.928496\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:34Z\",\"2069611745\",\"2322427\",\"61.847411\",\"0.069297\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:44Z\",\"542173325\",\"790033\",\"944.349057\",\"1.375910\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:48Z\",\"2065264724\",\"1001839\",\"61.977539\",\"0.030000\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:58Z\",\"952701471\",\"954127\",\"537.419565\",\"0.537914\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:11:04Z\",\"2067682642\",\"998634\",\"61.905063\",\"0.029850\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 6.74736302876307,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.977539,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:30Z\",\"582473719\",\"3288303\",\"879.031873\",\"4.928496\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:34Z\",\"2069611745\",\"2322427\",\"61.847411\",\"0.069297\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:44Z\",\"542173325\",\"790033\",\"944.349057\",\"1.375910\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:48Z\",\"2065264724\",\"1001839\",\"61.977539\",\"0.030000\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:58Z\",\"952701471\",\"954127\",\"537.419565\",\"0.537914\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:11:04Z\",\"2067682642\",\"998634\",\"61.905063\",\"0.029850\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.1573572448792852,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.419565,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:30Z\",\"582473719\",\"3288303\",\"879.031873\",\"4.928496\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:34Z\",\"2069611745\",\"2322427\",\"61.847411\",\"0.069297\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:44Z\",\"542173325\",\"790033\",\"944.349057\",\"1.375910\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:48Z\",\"2065264724\",\"1001839\",\"61.977539\",\"0.030000\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:58Z\",\"952701471\",\"954127\",\"537.419565\",\"0.537914\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:11:04Z\",\"2067682642\",\"998634\",\"61.905063\",\"0.029850\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.8617245895482166,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.905063,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:30Z\",\"582473719\",\"3288303\",\"879.031873\",\"4.928496\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:34Z\",\"2069611745\",\"2322427\",\"61.847411\",\"0.069297\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:44Z\",\"542173325\",\"790033\",\"944.349057\",\"1.375910\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:10:48Z\",\"2065264724\",\"1001839\",\"61.977539\",\"0.030000\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T06:10:58Z\",\"952701471\",\"954127\",\"537.419565\",\"0.537914\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T06:11:04Z\",\"2067682642\",\"998634\",\"61.905063\",\"0.029850\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.13496618386223067,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "38394bb",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T06:12:44.590311+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.788,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.833,11.788,2.61%,11.033,30.404,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3088413,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.933,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.969,11.933,3.43%,11.059,94.499,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.41053670000000003,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.755,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.896,21.755,2.29%,20.834,79.150,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5014184,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 21.871,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.999,21.871,10.88%,20.996,758.505,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.3934912,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 209.79,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),209.705,209.790,3.18%,198.445,807.464,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.6686190000000005,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 85.797,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),86.483,85.797,2.08%,84.617,172.920,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.7988464,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.393,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.500,5.393,17.26%,5.045,89.756,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.9493,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.825,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.816,2.825,2.97%,0.879,3.151,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.08363519999999999,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.921,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.934,1.921,6.38%,1.727,20.216,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.12338919999999999,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.459,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.470,1.459,29.41%,1.388,126.067,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.432327,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.664,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.036,860.664,0.46%,813.375,870.188,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.9561656,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.315,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.461,26.315,6.31%,24.832,153.500,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.6696890999999996,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.406,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.410,30.406,5.22%,28.854,150.986,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.587402,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 268.99,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),270.623,268.990,2.61%,260.913,809.488,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.0632603,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 255.154,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),255.078,255.154,1.49%,253.565,560.847,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.8006622,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.995,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.077,25.995,4.79%,24.262,132.116,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2490883,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.789,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.847,28.789,4.40%,27.873,140.966,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2692680000000003,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 246.418,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),246.636,246.418,2.05%,241.782,719.254,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.056037999999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 252.067,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),252.143,252.067,1.02%,251.063,477.796,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.5718586,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.437,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.480,5.437,15.99%,4.849,60.856,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.8762520000000001,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.296,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.307,4.296,9.63%,3.778,30.849,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.4147641000000001,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.577,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.594,1.577,6.56%,1.348,2.285,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.10456639999999999,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.051,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.049,1.051,1.45%,1.028,1.097,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.015210499999999998,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.418,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.942,13.418,24.49%,12.518,95.181,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.4143958,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.587,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.969,14.587,21.64%,13.327,91.937,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.2392916,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 77.898,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.323,77.898,4.60%,76.831,179.407,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.6028579999999994,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 80.239,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.800,80.239,4.48%,79.277,163.290,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.6198400000000004,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.955,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.844,13.955,6.83%,12.795,85.914,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9455452,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 15.199,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.121,15.199,5.71%,13.904,83.696,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8634091,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 77.584,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.523,77.584,0.62%,76.533,97.911,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.4806426,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 79.054,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),79.053,79.054,0.94%,77.810,141.468,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.7430981999999998,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.480,14.329,191.39%,13.484,8756.838,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.329,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.480,14.329,191.39%,13.484,8756.838,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 27.713272,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.324,14.175,207.66%,13.317,9419.408,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.405,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.556,14.405,185.92%,13.615,8553.244,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 27.062515199999996,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97313.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98195.484,97313.000,248.90%,96488.000,77385761.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.401,20.063,3139.71%,17.395,222435.162,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 244408.55967599998,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.063,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98195.484,97313.000,248.90%,96488.000,77385761.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.401,20.063,3139.71%,17.395,222435.162,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 703.3264371,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5503.412,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5498.894,5503.412,0.24%,5477.161,5516.198,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 13.1973456,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11456.574,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11509.208,11456.574,3.92%,10843.145,12428.810,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 451.1609536,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17681.134,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18038.250,17681.134,8.30%,15605.278,23502.140,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1497.1747500000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 773.5,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),763.322,773.500,7.27%,464.275,1652.682,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 55.4935094,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6047.805,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6063.354,6047.805,1.40%,5937.666,6239.178,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 84.886956,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6378.394,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6392.103,6378.394,2.30%,6178.146,6635.066,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 147.018369,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17991.065,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18341.034,17991.065,7.60%,16037.236,23299.741,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1393.918584,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 753.18,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),743.796,753.180,6.93%,496.962,1236.580,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 51.545062800000004,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29461.51,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29451.149,29461.510,0.48%,29244.141,29645.895,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 141.3655152,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 86763.975,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),86773.272,86763.975,0.11%,86596.874,86958.765,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 95.4505992,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.565,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.632,26.565,5.98%,24.797,137.740,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5925936000000003,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 248.511,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.767,248.511,1.98%,244.459,715.662,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.925586599999999,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 320.229677,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.41913 s\n320.229677 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 4.912257499998535,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3632,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00391832 s\nbitcracker - total time for whole calculation: 35.3632 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.016021547990127356,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.807,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1253 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1147 1262 31.1431% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1089 1264 29.5683% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1247 1287 33.8583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1275 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1277 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1117 1261 30.3285% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1269 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1270 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1082 1269 29.3782% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1070 1280 29.0524% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1272 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1055 1258 28.6451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1265 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1092 1257 29.6497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1181 1257 32.0662% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1144 1264 31.0616% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1271 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1115 1261 30.2742% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1267 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1264 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1260 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1133 1276 30.763% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1116 1255 30.3014% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1267 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1280 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1267 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1270 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1039 1270 28.2107% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1270 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1113 1259 30.2199% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1265 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1270 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1152 1257 31.2788% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1265 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1264 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1064 1280 28.8895% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1267 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1257 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1244 1277 33.7768% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1049 1244 28.4822% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1169 1265 31.7404% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1248 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1209 1261 32.8265% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1268 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1267 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.807 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.09555277773739872,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 239.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.96,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.661160e-01   6.096650e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.466050e-01   7.534650e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.409490e-01   7.704170e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.670700e-01   8.313500e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.371710e-01   8.151880e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.395620e-01   7.891450e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.386350e-01   7.848970e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.396400e-01   7.917450e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.380990e-01   7.909290e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.393840e-01   7.654860e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.116e+07    1.116e+07    1.116e+07    0.000e+00       100.00\ncycleInit                           10    3.453e+06    3.453e+06    3.453e+06    0.000e+00       100.00\ncycleTracking                       10    7.702e+06    7.702e+06    7.702e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.988e+06    4.988e+06    4.988e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.866e+05    1.866e+05    1.866e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.590e+02    4.590e+02    4.590e+02    0.000e+00       100.00\nFigure Of Merit                 116.96 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.37589892258424956,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 718.746,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47013 s\nsobelfilter - total time for whole calculation: 0.718746 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 5.198325355342788,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.5611,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.7e-05 s\ndl-cifar - total time for whole calculation: 17.5611 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.3136870414919942,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.65,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.65 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02516611478423574,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1492,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073446 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0671 s\nProcessing elapsed time : 0.0798 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1492 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.00015275252316519297,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_SingleTask",
          "value": 173.874,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_independent",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/IndependentDAGTaskThroughput_multi.csv",
            "--size=32768"
          ],
          "env": {},
          "stdout": "['Runtime_IndependentDAGTaskThroughput_SingleTask', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '32768', '0.173737', '0.173874', '0.156750', '0.156750 0.173874 0.190586', '0.016919', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 6.34043362494877,
          "name": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_SingleTask",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_BasicParallelFor",
          "value": 164.906,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_independent",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/IndependentDAGTaskThroughput_multi.csv",
            "--size=32768"
          ],
          "env": {},
          "stdout": "['Runtime_IndependentDAGTaskThroughput_BasicParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '32768', '0.166641', '0.164906', '0.162142', '0.162142 0.164906 0.172875', '0.005573', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 2.504781221317875,
          "name": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_BasicParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_HierarchicalParallelFor",
          "value": 162.81799999999998,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_independent",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/IndependentDAGTaskThroughput_multi.csv",
            "--size=32768"
          ],
          "env": {},
          "stdout": "['Runtime_IndependentDAGTaskThroughput_HierarchicalParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '32768', '0.163046', '0.162818', '0.162638', '0.162638 0.162818 0.163681', '0.000557', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.151259426826617,
          "name": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_HierarchicalParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_NDRangeParallelFor",
          "value": 158.97,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_independent",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/IndependentDAGTaskThroughput_multi.csv",
            "--size=32768"
          ],
          "env": {},
          "stdout": "['Runtime_IndependentDAGTaskThroughput_NDRangeParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '32768', '0.159301', '0.158970', '0.158968', '0.158968 0.158970 0.159966', '0.000575', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.8681593007211116,
          "name": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_NDRangeParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_SingleTask",
          "value": 1198.518,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_sequential",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/DAGTaskThroughput_multi.csv",
            "--size=327680"
          ],
          "env": {},
          "stdout": "['Runtime_DAGTaskThroughput_SingleTask', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '327680', '1.198845', '1.198518', '1.193833', '1.193833 1.198518 1.204183', '0.005183', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 11.705463781214846,
          "name": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_SingleTask",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_BasicParallelFor",
          "value": 1243.0330000000001,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_sequential",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/DAGTaskThroughput_multi.csv",
            "--size=327680"
          ],
          "env": {},
          "stdout": "['Runtime_DAGTaskThroughput_BasicParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '327680', '1.243595', '1.243033', '1.240698', '1.240698 1.243033 1.247055', '0.003216', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 8.822952019212826,
          "name": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_BasicParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_HierarchicalParallelFor",
          "value": 1249.3229999999999,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_sequential",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/DAGTaskThroughput_multi.csv",
            "--size=327680"
          ],
          "env": {},
          "stdout": "['Runtime_DAGTaskThroughput_HierarchicalParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '327680', '1.250238', '1.249323', '1.243195', '1.243195 1.249323 1.258197', '0.007543', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 6.2278632772404245,
          "name": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_HierarchicalParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_NDRangeParallelFor",
          "value": 1208.95,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_sequential",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/DAGTaskThroughput_multi.csv",
            "--size=327680"
          ],
          "env": {},
          "stdout": "['Runtime_DAGTaskThroughput_NDRangeParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '327680', '1.209085', '1.208950', '1.208567', '1.208567 1.208950 1.209738', '0.000597', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 11.383263694272117,
          "name": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_NDRangeParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_H2D_Contiguous",
          "value": 6.1450000000000005,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_1D_H2D_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006945', '0.006145', '0.006061', '0.006061 0.006145 0.008628', '0.001458', '20.622179', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.13587862230682193,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_H2D_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_H2D_Contiguous",
          "value": 6.015000000000001,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_2D_H2D_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006037', '0.006015', '0.005997', '0.005997 0.006015 0.006099', '0.000054', '20.843175', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0805946648358313,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_H2D_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_H2D_Contiguous",
          "value": 6.07,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_3D_H2D_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006099', '0.006070', '0.006070', '0.006070 0.006070 0.006158', '0.000051', '20.594221', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.05885858759207013,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_H2D_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_D2H_Contiguous",
          "value": 6.104,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_1D_D2H_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006101', '0.006104', '0.006091', '0.006091 0.006104 0.006106', '0.000008', '20.522641', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.07760011454745241,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_D2H_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_D2H_Contiguous",
          "value": 6.084,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_2D_D2H_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006084', '0.006084', '0.006082', '0.006082 0.006084 0.006087', '0.000002', '20.552409', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.07755965446029295,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_D2H_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_D2H_Contiguous",
          "value": 6.184,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_3D_D2H_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006185', '0.006184', '0.006163', '0.006163 0.006184 0.006208', '0.000023', '20.283735', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.04955498389235366,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_D2H_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_H2D_Strided",
          "value": 6.077,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_1D_H2D_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006081', '0.006077', '0.005927', '0.005927 0.006077 0.006239', '0.000156', '21.090319', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.09380357728312447,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_H2D_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_H2D_Strided",
          "value": 6.15,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_2D_H2D_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006156', '0.006150', '0.006120', '0.006120 0.006150 0.006198', '0.000039', '20.425558', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.10989704778159938,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_H2D_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_H2D_Strided",
          "value": 6.239,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_3D_H2D_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006222', '0.006239', '0.006121', '0.006121 0.006239 0.006305', '0.000093', '20.421250', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.09274666810427461,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_H2D_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_D2H_Strided",
          "value": 6.1209999999999996,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_1D_D2H_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006163', '0.006121', '0.006108', '0.006108 0.006121 0.006260', '0.000084', '20.463929', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.04731807265728393,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_D2H_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_D2H_Strided",
          "value": 6.027,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_2D_D2H_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006022', '0.006027', '0.006010', '0.006010 0.006027 0.006029', '0.000011', '20.800334', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.05997499478949548,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_D2H_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_D2H_Strided",
          "value": 6.085,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_3D_D2H_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.005894', '0.006085', '0.005485', '0.005485 0.006085 0.006110', '0.000354', '22.790564', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.08141867107733952,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_D2H_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench LocalMem_multi MicroBench_LocalMem_int32_4096",
          "value": 29.637,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/local_mem",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/LocalMem_multi.csv",
            "--size=10240000"
          ],
          "env": {},
          "stdout": "['MicroBench_LocalMem_int32_4096', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '10240000', '0.029651', '0.029637', '0.029624', '0.029624 0.029637 0.029691', '0.000035', '10531.877715', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '312.000000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.03315116890849968,
          "name": "SYCL-Bench LocalMem_multi MicroBench_LocalMem_int32_4096",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench LocalMem_multi MicroBench_LocalMem_fp32_4096",
          "value": 29.687,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/local_mem",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/LocalMem_multi.csv",
            "--size=10240000"
          ],
          "env": {},
          "stdout": "['MicroBench_LocalMem_fp32_4096', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '10240000', '0.029699', '0.029687', '0.029656', '0.029656 0.029687 0.029755', '0.000051', '10520.630248', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '312.000000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.05227172594561272,
          "name": "SYCL-Bench LocalMem_multi MicroBench_LocalMem_fp32_4096",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_int32",
          "value": 3.891,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_NDRange_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.003895', '0.003891', '0.003863', '0.003863 0.003891 0.003931', '0.000034', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.04529900661162442,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_int64",
          "value": 5.581,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_NDRange_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.005575', '0.005581', '0.005559', '0.005559 0.005581 0.005585', '0.000014', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.012741009902411093,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_fp32",
          "value": 3.8609999999999998,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_NDRange_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.003873', '0.003861', '0.003851', '0.003851 0.003861 0.003907', '0.000030', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.024062418831031936,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_int32",
          "value": 11.358,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_Hierarchical_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.011356', '0.011358', '0.011348', '0.011348 0.011358 0.011362', '0.000007', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.007549834435271859,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_int64",
          "value": 12.326,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_Hierarchical_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012321', '0.012326', '0.012290', '0.012290 0.012326 0.012345', '0.000028', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.02230097157823603,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_fp32",
          "value": 11.014,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_Hierarchical_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.011015', '0.011014', '0.010985', '0.010985 0.011014 0.011045', '0.000030', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.008717797887081201,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int16",
          "value": 2.4099999999999997,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_NDRange_int16', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.002416', '0.002410', '0.002406', '0.002406 0.002410 0.002432', '0.000014', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0005773502691893057,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int16",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int32",
          "value": 2.319,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_NDRange_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.002321', '0.002319', '0.002318', '0.002318 0.002319 0.002324', '0.000003', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0009999999999998899,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int64",
          "value": 2.509,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_NDRange_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.002511', '0.002509', '0.002508', '0.002508 0.002509 0.002516', '0.000004', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0017320508075689429,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_fp32",
          "value": 2.322,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_NDRange_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.002323', '0.002322', '0.002317', '0.002317 0.002322 0.002329', '0.000006', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0036055512754640234,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int16",
          "value": 12.415000000000001,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_Hierarchical_int16', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012423', '0.012415', '0.012404', '0.012404 0.012415 0.012449', '0.000023', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.00529150262212927,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int16",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int32",
          "value": 12.308,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_Hierarchical_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012307', '0.012308', '0.012286', '0.012286 0.012308 0.012328', '0.000021', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.005131601439446752,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int64",
          "value": 12.497,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_Hierarchical_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012492', '0.012497', '0.012471', '0.012471 0.012497 0.012509', '0.000020', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_fp32",
          "value": 12.295,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_Hierarchical_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012299', '0.012295', '0.012275', '0.012275 0.012295 0.012327', '0.000026', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.005196152422706829,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_device",
          "value": 0.054,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/usm_allocation_latency",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/USM_Allocation_latency_multi.csv",
            "--size=1024000000"
          ],
          "env": {},
          "stdout": "['USM_Allocation_latency_fp32_device', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '1024000000', '0.000082', '0.000054', '0.000047', '0.000047 0.000054 0.000146', '0.000056', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0041538591038389186,
          "name": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_device",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_host",
          "value": 18.936,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/usm_allocation_latency",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/USM_Allocation_latency_multi.csv",
            "--size=1024000000"
          ],
          "env": {},
          "stdout": "['USM_Allocation_latency_fp32_host', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '1024000000', '0.019134', '0.018936', '0.018907', '0.018907 0.018936 0.019560', '0.000369', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.01494527052652802,
          "name": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_host",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_shared",
          "value": 0.06899999999999999,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/usm_allocation_latency",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/USM_Allocation_latency_multi.csv",
            "--size=1024000000"
          ],
          "env": {},
          "stdout": "['USM_Allocation_latency_fp32_shared', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '1024000000', '0.000066', '0.000069', '0.000055', '0.000055 0.000069 0.000074', '0.000010', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.002186538904513791,
          "name": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_shared",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench VectorAddition_multi VectorAddition_int32",
          "value": 1.524,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/vec_add",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/VectorAddition_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['VectorAddition_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.001529', '0.001524', '0.001519', '0.001519 0.001524 0.001546', '0.000014', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.009500877152487958,
          "name": "SYCL-Bench VectorAddition_multi VectorAddition_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench VectorAddition_multi VectorAddition_int64",
          "value": 3.078,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/vec_add",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/VectorAddition_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['VectorAddition_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.003086', '0.003078', '0.003054', '0.003054 0.003078 0.003126', '0.000037', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.01113552872566012,
          "name": "SYCL-Bench VectorAddition_multi VectorAddition_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench VectorAddition_multi VectorAddition_fp32",
          "value": 1.463,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/vec_add",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/VectorAddition_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['VectorAddition_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.001472', '0.001463', '0.001443', '0.001443 0.001463 0.001510', '0.000034', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.025447986167868007,
          "name": "SYCL-Bench VectorAddition_multi VectorAddition_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench 2mm Polybench_2mm",
          "value": 1.262,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/2mm",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/2mm.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['Polybench_2mm', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.001265', '0.001262', '0.001254', '0.001254 0.001262 0.001278', '0.000012', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.001000000000000112,
          "name": "SYCL-Bench 2mm Polybench_2mm",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench 3mm Polybench_3mm",
          "value": 1.878,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/3mm",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/3mm.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['Polybench_3mm', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.001883', '0.001878', '0.001872', '0.001872 0.001878 0.001899', '0.000014', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0015275252316518753,
          "name": "SYCL-Bench 3mm Polybench_3mm",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Atax Polybench_Atax",
          "value": 7.014,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/atax",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Atax.csv",
            "--size=8192"
          ],
          "env": {},
          "stdout": "['Polybench_Atax', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '8192', '0.007010', '0.007014', '0.006994', '0.006994 0.007014 0.007021', '0.000014', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.017009801096230685,
          "name": "SYCL-Bench Atax Polybench_Atax",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Kmeans Kmeans_fp32",
          "value": 16.111,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/kmeans",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Kmeans.csv",
            "--size=700000000"
          ],
          "env": {},
          "stdout": "['Kmeans_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '700000000', '0.016113', '0.016111', '0.016109', '0.016109 0.016111 0.016120', '0.000005', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.003785938897200743,
          "name": "SYCL-Bench Kmeans Kmeans_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench LinearRegressionCoeff LinearRegressionCoeff_fp32",
          "value": 1101.045,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/lin_reg_coeff",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/LinearRegressionCoeff.csv",
            "--size=1638400000"
          ],
          "env": {},
          "stdout": "['LinearRegressionCoeff_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '1638400000', '1.093405', '1.101045', '1.058854', '1.058854 1.101045 1.120315', '0.031435', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 2.1467761876823994,
          "name": "SYCL-Bench LinearRegressionCoeff LinearRegressionCoeff_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench MolecularDynamics MolecularDynamics",
          "value": 0.031,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/mol_dyn",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/MolecularDynamics.csv",
            "--size=8196"
          ],
          "env": {},
          "stdout": "['MolecularDynamics', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '8196', '0.000042', '0.000031', '0.000028', '0.000028 0.000031 0.000067', '0.000022', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0005773502691896243,
          "name": "SYCL-Bench MolecularDynamics MolecularDynamics",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 879.903421,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:24:21Z\",\"581893670\",\"2917069\",\"879.903421\",\"4.384018\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:24:24Z\",\"2069577644\",\"2222347\",\"61.848425\",\"0.066301\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:24:35Z\",\"544870629\",\"702035\",\"939.673846\",\"1.210366\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:24:38Z\",\"2066419791\",\"464423\",\"61.942886\",\"0.013885\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:24:48Z\",\"953047069\",\"652908\",\"537.224455\",\"0.367856\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:24:54Z\",\"2067386584\",\"603554\",\"61.913921\",\"0.018021\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.4797801373611135,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.607559,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:25:50Z\",\"579591484\",\"4707942\",\"883.427065\",\"7.116975\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:25:54Z\",\"2077669488\",\"2472824\",\"61.607559\",\"0.073213\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:26:05Z\",\"550550427\",\"1257377\",\"929.982278\",\"2.129121\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:26:08Z\",\"2075383722\",\"409132\",\"61.675343\",\"0.012045\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:26:18Z\",\"944962363\",\"696024\",\"541.820755\",\"0.398217\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:26:24Z\",\"2077479175\",\"771583\",\"61.613139\",\"0.022892\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.1744018517600462,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 939.173393,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:25:05Z\",\"586720759\",\"3932856\",\"872.677923\",\"5.801843\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:25:09Z\",\"2080980978\",\"2192152\",\"61.509507\",\"0.064699\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:25:20Z\",\"545174271\",\"3102258\",\"939.173393\",\"5.307044\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:25:23Z\",\"2076151846\",\"566408\",\"61.652527\",\"0.016819\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:25:33Z\",\"945390240\",\"3919913\",\"541.582718\",\"2.237580\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:25:39Z\",\"2080409140\",\"453727\",\"61.526361\",\"0.013282\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.4567013608201815,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.675343,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:25:50Z\",\"579591484\",\"4707942\",\"883.427065\",\"7.116975\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:25:54Z\",\"2077669488\",\"2472824\",\"61.607559\",\"0.073213\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:26:05Z\",\"550550427\",\"1257377\",\"929.982278\",\"2.129121\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:26:08Z\",\"2075383722\",\"409132\",\"61.675343\",\"0.012045\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:26:18Z\",\"944962363\",\"696024\",\"541.820755\",\"0.398217\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:26:24Z\",\"2077479175\",\"771583\",\"61.613139\",\"0.022892\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.16145596695177866,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 541.582718,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:25:05Z\",\"586720759\",\"3932856\",\"872.677923\",\"5.801843\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:25:09Z\",\"2080980978\",\"2192152\",\"61.509507\",\"0.064699\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:25:20Z\",\"545174271\",\"3102258\",\"939.173393\",\"5.307044\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:25:23Z\",\"2076151846\",\"566408\",\"61.652527\",\"0.016819\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:25:33Z\",\"945390240\",\"3919913\",\"541.582718\",\"2.237580\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:25:39Z\",\"2080409140\",\"453727\",\"61.526361\",\"0.013282\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.587698194681167,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.613139,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:25:50Z\",\"579591484\",\"4707942\",\"883.427065\",\"7.116975\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:25:54Z\",\"2077669488\",\"2472824\",\"61.607559\",\"0.073213\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:26:05Z\",\"550550427\",\"1257377\",\"929.982278\",\"2.129121\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:26:08Z\",\"2075383722\",\"409132\",\"61.675343\",\"0.012045\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T01:26:18Z\",\"944962363\",\"696024\",\"541.820755\",\"0.398217\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T01:26:24Z\",\"2077479175\",\"771583\",\"61.613139\",\"0.022892\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.2033891944065215,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5d3b0d9",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T01:26:35.195062+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 12.233,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.265,12.233,2.69%,11.331,34.892,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3299285,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 12.092,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.132,12.092,3.38%,11.275,100.291,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.41006159999999997,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.556,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.728,23.556,8.45%,22.708,631.014,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.005016,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.558,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.731,24.558,2.43%,23.599,83.666,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.6009633000000001,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 259.646,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),261.174,259.646,2.72%,255.949,853.552,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 7.1039328,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 134.896,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),135.831,134.896,1.83%,132.871,213.264,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.4857072999999996,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.796,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),6.026,5.796,16.06%,5.308,79.870,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.9677756,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.152,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.137,3.152,3.36%,0.353,3.402,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.10540319999999999,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.139,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.151,2.139,6.58%,1.939,25.006,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1415358,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.689,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.707,1.689,6.39%,1.606,15.126,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1090773,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.959,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.574,860.959,0.38%,824.298,871.091,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.2701811999999997,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 29.021,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.117,29.021,5.38%,27.369,153.888,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5664946,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 306.593,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),307.903,306.593,2.55%,298.864,889.414,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.8515265,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.818,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.867,25.818,5.00%,24.115,137.247,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2933500000000002,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 29.038,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.078,29.038,4.46%,27.981,150.010,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2968788,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 243.06,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),243.272,243.060,2.07%,237.172,647.737,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.035730399999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 251.631,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.662,251.631,1.10%,248.191,486.499,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.768282,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.916,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.954,5.916,13.80%,5.460,81.541,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.821652,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.361,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.385,4.361,13.79%,3.738,59.878,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.6046914999999999,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.662,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.678,0.662,9.24%,0.548,1.188,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0626472,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.005,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.998,1.005,2.22%,0.891,1.051,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0221556,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.535,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.991,6.535,24.39%,6.044,83.699,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.7051049,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.706,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.827,31.706,3.80%,29.768,94.994,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.2094260000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.436,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.883,6.436,23.15%,6.106,73.100,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.5934145,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 43.184,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.338,43.184,2.74%,41.568,110.173,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.1874612,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 7.232,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.274,7.232,5.34%,6.852,29.806,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.3884316,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 38.829,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),38.926,38.829,2.42%,37.096,101.121,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9420092,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 7.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.073,7.000,4.67%,6.749,29.768,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.3303091,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 113.964,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),113.996,113.964,0.72%,112.110,162.082,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.8207711999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.507,16.336,154.91%,15.628,8101.996,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.2655123,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.577,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.842,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.734,16.577,137.49%,15.819,7291.458,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.007576600000004,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.340,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.841,17.675,120.30%,17.005,6803.596,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.120097999999,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.409,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113380.285,113308.000,3.97%,113308.000,1530549.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.579,17.409,114.93%,16.684,6386.504,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.203544700000002,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125986.828,125825.000,3.78%,125520.000,1622385.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.060,21.739,103.41%,20.713,7214.074,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4762.3020983999995,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.739,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125986.828,125825.000,3.78%,125520.000,1622385.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.060,21.739,103.41%,20.713,7214.074,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.812246,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6930.64,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6947.919,6930.640,1.00%,6883.066,7104.446,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 69.47919,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 17900.198,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18323.007,17900.198,7.95%,15829.399,20872.526,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1456.6790565000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 50195.666,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50183.522,50195.666,5.04%,41555.516,61968.742,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2529.2495088,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2018.017,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2049.133,2018.017,13.58%,1360.325,4954.254,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 278.2722614,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7504.175,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7531.697,7504.175,1.48%,7378.616,7759.117,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 111.46911560000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 16550.442,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16636.692,16550.442,5.77%,15079.834,18044.634,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 959.9371283999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 44882.692,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),44800.551,44882.692,3.18%,29505.523,48807.467,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1424.6575218,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1408.366,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1525.601,1408.366,32.09%,809.568,5455.989,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 489.5653609000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42268.391,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42321.232,42268.391,0.47%,42076.895,42660.977,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 198.9097904,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 115997.697,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),115981.451,115997.697,0.33%,115393.072,116629.103,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 382.7387883,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.579,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.690,33.579,4.26%,31.603,129.687,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4351939999999999,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 52.114,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),52.185,52.114,2.45%,49.148,91.749,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2785325,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.466,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.728,271.466,2.79%,265.752,970.109,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.5812112,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 312.397,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),313.155,312.397,2.07%,309.090,790.084,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 6.482308499999999,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 317.250819,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.423065 s\n317.250819 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 6.226081003816243,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3437,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00395552 s\nbitcracker - total time for whole calculation: 35.3437 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.059435202812252445,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.764,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1041 1249 28.265% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1211 1259 32.8808% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1066 1254 28.9438% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1258 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1143 1273 31.0345% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1018 1264 27.6405% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1268 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1197 1263 32.5007% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1151 1266 31.2517% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1256 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1258 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1268 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1045 1260 28.3736% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1260 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1158 1266 31.4418% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1058 1265 28.7266% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1079 1252 29.2968% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1261 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1264 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1087 1271 29.514% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1262 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1259 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1253 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1256 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1263 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1134 1256 30.7901% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1066 1261 28.9438% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1209 1263 32.8265% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1094 1248 29.704% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1255 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1265 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1261 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1115 1258 30.2742% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1268 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1164 1271 31.6047% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1140 1265 30.953% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1260 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1267 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1129 1269 30.6544% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1282 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1150 1255 31.2245% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1169 1268 31.7404% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1265 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1263 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1263 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.764 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.2777954883242876,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 239.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 118.1,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.635880e-01   6.036590e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.500900e-01   7.446640e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.384360e-01   7.607030e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.716720e-01   8.127780e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.429530e-01   7.868810e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.473020e-01   7.625350e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.431890e-01   7.751800e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.475390e-01   8.045300e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.428710e-01   8.035320e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.472040e-01   7.737590e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.112e+07    1.112e+07    1.112e+07    0.000e+00       100.00\ncycleInit                           10    3.495e+06    3.495e+06    3.495e+06    0.000e+00       100.00\ncycleTracking                       10    7.628e+06    7.628e+06    7.628e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.977e+06    4.977e+06    4.977e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.906e+05    1.906e+05    1.906e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.130e+02    4.130e+02    4.130e+02    0.000e+00       100.00\nFigure Of Merit                 118.10 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.12220201853215933,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 726.691,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.48578 s\nsobelfilter - total time for whole calculation: 0.726691 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 3.6078113171284403,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.2368,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.1e-05 s\ndl-cifar - total time for whole calculation: 24.2368 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.013020112646721538,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.68,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.68 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02645751311064601,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1518,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.075431 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0677 s\nProcessing elapsed time : 0.0818 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1518 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0002516611478423582,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_SingleTask",
          "value": 231.931,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_independent",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/IndependentDAGTaskThroughput_multi.csv",
            "--size=32768"
          ],
          "env": {},
          "stdout": "['Runtime_IndependentDAGTaskThroughput_SingleTask', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '32768', '0.235613', '0.231931', '0.228951', '0.228951 0.231931 0.245957', '0.009081', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.4750804497834589,
          "name": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_SingleTask",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_BasicParallelFor",
          "value": 242.28,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_independent",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/IndependentDAGTaskThroughput_multi.csv",
            "--size=32768"
          ],
          "env": {},
          "stdout": "['Runtime_IndependentDAGTaskThroughput_BasicParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '32768', '0.242104', '0.242280', '0.240662', '0.240662 0.242280 0.243372', '0.001364', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 4.502270797423604,
          "name": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_BasicParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_HierarchicalParallelFor",
          "value": 246.148,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_independent",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/IndependentDAGTaskThroughput_multi.csv",
            "--size=32768"
          ],
          "env": {},
          "stdout": "['Runtime_IndependentDAGTaskThroughput_HierarchicalParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '32768', '0.246231', '0.246148', '0.243192', '0.243192 0.246148 0.249353', '0.003081', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.325381454525454,
          "name": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_HierarchicalParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_NDRangeParallelFor",
          "value": 245.977,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_independent",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/IndependentDAGTaskThroughput_multi.csv",
            "--size=32768"
          ],
          "env": {},
          "stdout": "['Runtime_IndependentDAGTaskThroughput_NDRangeParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '32768', '0.257515', '0.245977', '0.244271', '0.244271 0.245977 0.282296', '0.021478', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.1904675552067834,
          "name": "SYCL-Bench IndependentDAGTaskThroughput_multi Runtime_IndependentDAGTaskThroughput_NDRangeParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_SingleTask",
          "value": 1645.202,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_sequential",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/DAGTaskThroughput_multi.csv",
            "--size=327680"
          ],
          "env": {},
          "stdout": "['Runtime_DAGTaskThroughput_SingleTask', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '327680', '1.644294', '1.645202', '1.640853', '1.640853 1.645202 1.646828', '0.003089', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 23.207727814961373,
          "name": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_SingleTask",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_BasicParallelFor",
          "value": 1721.79,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_sequential",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/DAGTaskThroughput_multi.csv",
            "--size=327680"
          ],
          "env": {},
          "stdout": "['Runtime_DAGTaskThroughput_BasicParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '327680', '1.722866', '1.721790', '1.720122', '1.720122 1.721790 1.726686', '0.003412', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 11.405408906888646,
          "name": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_BasicParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_HierarchicalParallelFor",
          "value": 1705.3590000000002,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_sequential",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/DAGTaskThroughput_multi.csv",
            "--size=327680"
          ],
          "env": {},
          "stdout": "['Runtime_DAGTaskThroughput_HierarchicalParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '327680', '1.705816', '1.705359', '1.702915', '1.702915 1.705359 1.709173', '0.003154', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 11.235392694516777,
          "name": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_HierarchicalParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_NDRangeParallelFor",
          "value": 1678.441,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/dag_task_throughput_sequential",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/DAGTaskThroughput_multi.csv",
            "--size=327680"
          ],
          "env": {},
          "stdout": "['Runtime_DAGTaskThroughput_NDRangeParallelFor', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '327680', '1.678462', '1.678441', '1.677552', '1.677552 1.678441 1.679392', '0.000920', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 9.58281223510788,
          "name": "SYCL-Bench DAGTaskThroughput_multi Runtime_DAGTaskThroughput_NDRangeParallelFor",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_H2D_Contiguous",
          "value": 6.0280000000000005,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_1D_H2D_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006812', '0.006028', '0.005949', '0.005949 0.006028 0.008459', '0.001427', '21.011479', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.12846882149081196,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_H2D_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_H2D_Contiguous",
          "value": 6.123,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_2D_H2D_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006108', '0.006123', '0.005990', '0.005990 0.006123 0.006212', '0.000112', '20.868730', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.08299211353550949,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_H2D_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_H2D_Contiguous",
          "value": 6.051,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_3D_H2D_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006081', '0.006051', '0.005980', '0.005980 0.006051 0.006211', '0.000118', '20.901654', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.16438065579623407,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_H2D_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_D2H_Contiguous",
          "value": 6.029999999999999,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_1D_D2H_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006043', '0.006030', '0.006020', '0.006020 0.006030 0.006081', '0.000033', '20.765134', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.08950551991490874,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_D2H_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_D2H_Contiguous",
          "value": 652.887,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_2D_D2H_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.652894', '0.652887', '0.652865', '0.652865 0.652887 0.652929', '0.000032', '0.191464', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.09710175075660786,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_D2H_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_D2H_Contiguous",
          "value": 652.866,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_3D_D2H_Contiguous', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.652873', '0.652866', '0.652857', '0.652857 0.652866 0.652897', '0.000021', '0.191466', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.10184274370049591,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_D2H_Contiguous",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_H2D_Strided",
          "value": 6.0809999999999995,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_1D_H2D_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.005980', '0.006081', '0.005775', '0.005775 0.006081 0.006086', '0.000178', '21.646349', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.08965160078776895,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_H2D_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_H2D_Strided",
          "value": 6.314,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_2D_H2D_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006322', '0.006314', '0.006267', '0.006267 0.006314 0.006383', '0.000058', '19.944529', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.10140686555136368,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_H2D_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_H2D_Strided",
          "value": 6.3340000000000005,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_3D_H2D_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006331', '0.006334', '0.006315', '0.006315 0.006334 0.006343', '0.000014', '19.793727', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.056789083458002855,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_H2D_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_D2H_Strided",
          "value": 6.138,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_1D_D2H_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.006180', '0.006138', '0.006089', '0.006089 0.006138 0.006314', '0.000118', '20.527966', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.07208407789320916,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_1D_D2H_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_D2H_Strided",
          "value": 652.8629999999999,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_2D_D2H_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.652866', '0.652863', '0.652861', '0.652861 0.652863 0.652875', '0.000007', '0.191465', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.07960677166695443,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_2D_D2H_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_D2H_Strided",
          "value": 652.886,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/host_device_bandwidth",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/HostDeviceBandwidth_multi.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['MicroBench_HostDeviceBandwidth_3D_D2H_Strided', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.652879', '0.652886', '0.652847', '0.652847 0.652886 0.652903', '0.000028', '0.191469', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '0.125000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.03940419913018229,
          "name": "SYCL-Bench HostDeviceBandwidth_multi MicroBench_HostDeviceBandwidth_3D_D2H_Strided",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench LocalMem_multi MicroBench_LocalMem_int32_4096",
          "value": 29.563,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/local_mem",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/LocalMem_multi.csv",
            "--size=10240000"
          ],
          "env": {},
          "stdout": "['MicroBench_LocalMem_int32_4096', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '10240000', '0.029618', '0.029563', '0.029548', '0.029548 0.029563 0.029743', '0.000109', '10559.245745', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '312.000000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.05430776494511187,
          "name": "SYCL-Bench LocalMem_multi MicroBench_LocalMem_int32_4096",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench LocalMem_multi MicroBench_LocalMem_fp32_4096",
          "value": 29.669,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/local_mem",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/LocalMem_multi.csv",
            "--size=10240000"
          ],
          "env": {},
          "stdout": "['MicroBench_LocalMem_fp32_4096', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '10240000', '0.029670', '0.029669', '0.029667', '0.029667 0.029669 0.029673', '0.000003', '10516.862322', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '312.000000']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.046508063816933676,
          "name": "SYCL-Bench LocalMem_multi MicroBench_LocalMem_fp32_4096",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_int32",
          "value": 3.8600000000000003,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_NDRange_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.003871', '0.003860', '0.003823', '0.003823 0.003860 0.003931', '0.000055', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.01588500340992505,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_int64",
          "value": 5.603999999999999,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_NDRange_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.005613', '0.005604', '0.005551', '0.005551 0.005604 0.005684', '0.000067', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.018339392937971623,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_fp32",
          "value": 3.8649999999999998,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_NDRange_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.003880', '0.003865', '0.003851', '0.003851 0.003865 0.003925', '0.000040', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.007767453465154279,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_NDRange_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_int32",
          "value": 11.344999999999999,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_Hierarchical_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.011356', '0.011345', '0.011331', '0.011331 0.011345 0.011393', '0.000033', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.005507570547285737,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_int64",
          "value": 12.282,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_Hierarchical_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012293', '0.012282', '0.012265', '0.012265 0.012282 0.012331', '0.000035', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0240069434400409,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_fp32",
          "value": 11.006,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/scalar_prod",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/ScalarProduct_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['ScalarProduct_Hierarchical_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.011001', '0.011006', '0.010978', '0.010978 0.011006 0.011018', '0.000021', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.009712534856222354,
          "name": "SYCL-Bench ScalarProduct_multi ScalarProduct_Hierarchical_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int16",
          "value": 2.411,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_NDRange_int16', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.002420', '0.002411', '0.002408', '0.002408 0.002411 0.002442', '0.000019', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0015275252316517783,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int16",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int32",
          "value": 2.319,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_NDRange_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.002320', '0.002319', '0.002317', '0.002317 0.002319 0.002324', '0.000003', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0005773502691895622,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int64",
          "value": 2.505,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_NDRange_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.002507', '0.002505', '0.002504', '0.002504 0.002505 0.002512', '0.000004', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0015275252316520208,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_fp32",
          "value": 2.323,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_NDRange_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.002322', '0.002323', '0.002316', '0.002316 0.002323 0.002326', '0.000005', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.004163331998932056,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_NDRange_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int16",
          "value": 12.414,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_Hierarchical_int16', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012425', '0.012414', '0.012406', '0.012406 0.012414 0.012456', '0.000027', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.016289055630494504,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int16",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int32",
          "value": 12.302,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_Hierarchical_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012315', '0.012302', '0.012299', '0.012299 0.012302 0.012343', '0.000025', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0041633319989319495,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int64",
          "value": 12.484,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_Hierarchical_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012490', '0.012484', '0.012478', '0.012478 0.012484 0.012506', '0.000015', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.00288675134594858,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_fp32",
          "value": 12.305,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/segmentedreduction",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Pattern_SegmentedReduction_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['Pattern_SegmentedReduction_Hierarchical_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.012309', '0.012305', '0.012303', '0.012303 0.012305 0.012318', '0.000008', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0034641016151378858,
          "name": "SYCL-Bench Pattern_SegmentedReduction_multi Pattern_SegmentedReduction_Hierarchical_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_device",
          "value": 0.055,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/usm_allocation_latency",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/USM_Allocation_latency_multi.csv",
            "--size=1024000000"
          ],
          "env": {},
          "stdout": "['USM_Allocation_latency_fp32_device', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '1024000000', '0.000056', '0.000055', '0.000048', '0.000048 0.000055 0.000065', '0.000009', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0032041639575194456,
          "name": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_device",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_host",
          "value": 18.933,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/usm_allocation_latency",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/USM_Allocation_latency_multi.csv",
            "--size=1024000000"
          ],
          "env": {},
          "stdout": "['USM_Allocation_latency_fp32_host', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '1024000000', '0.018935', '0.018933', '0.018899', '0.018899 0.018933 0.018975', '0.000038', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.013815304461452875,
          "name": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_host",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_shared",
          "value": 0.062,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/usm_allocation_latency",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/USM_Allocation_latency_multi.csv",
            "--size=1024000000"
          ],
          "env": {},
          "stdout": "['USM_Allocation_latency_fp32_shared', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '1024000000', '0.000064', '0.000062', '0.000053', '0.000053 0.000062 0.000077', '0.000012', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0017511900715418247,
          "name": "SYCL-Bench USM_Allocation_latency_multi USM_Allocation_latency_fp32_shared",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench VectorAddition_multi VectorAddition_int32",
          "value": 1.446,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/vec_add",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/VectorAddition_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['VectorAddition_int32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.001466', '0.001446', '0.001444', '0.001444 0.001446 0.001507', '0.000036', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.011930353445448837,
          "name": "SYCL-Bench VectorAddition_multi VectorAddition_int32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench VectorAddition_multi VectorAddition_int64",
          "value": 3.091,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/vec_add",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/VectorAddition_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['VectorAddition_int64', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.003107', '0.003091', '0.003056', '0.003056 0.003091 0.003176', '0.000062', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.03404408906109865,
          "name": "SYCL-Bench VectorAddition_multi VectorAddition_int64",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench VectorAddition_multi VectorAddition_fp32",
          "value": 1.451,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/vec_add",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/VectorAddition_multi.csv",
            "--size=102400000"
          ],
          "env": {},
          "stdout": "['VectorAddition_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '102400000', '0.001450', '0.001451', '0.001445', '0.001445 0.001451 0.001454', '0.000004', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0034641016151376294,
          "name": "SYCL-Bench VectorAddition_multi VectorAddition_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench 2mm Polybench_2mm",
          "value": 1.269,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/2mm",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/2mm.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['Polybench_2mm', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.001268', '0.001269', '0.001260', '0.001260 0.001269 0.001274', '0.000007', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.007211102550927892,
          "name": "SYCL-Bench 2mm Polybench_2mm",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench 3mm Polybench_3mm",
          "value": 1.796,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/3mm",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/3mm.csv",
            "--size=512"
          ],
          "env": {},
          "stdout": "['Polybench_3mm', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '512', '0.001796', '0.001796', '0.001791', '0.001791 0.001796 0.001799', '0.000004', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0010000000000000009,
          "name": "SYCL-Bench 3mm Polybench_3mm",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Atax Polybench_Atax",
          "value": 7.011,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/atax",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Atax.csv",
            "--size=8192"
          ],
          "env": {},
          "stdout": "['Polybench_Atax', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '8192', '0.007012', '0.007011', '0.006999', '0.006999 0.007011 0.007025', '0.000013', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.06071518206621229,
          "name": "SYCL-Bench Atax Polybench_Atax",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench Kmeans Kmeans_fp32",
          "value": 16.115000000000002,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/kmeans",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/Kmeans.csv",
            "--size=700000000"
          ],
          "env": {},
          "stdout": "['Kmeans_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '700000000', '0.016132', '0.016115', '0.016112', '0.016112 0.016115 0.016170', '0.000033', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.001527525231652263,
          "name": "SYCL-Bench Kmeans Kmeans_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench LinearRegressionCoeff LinearRegressionCoeff_fp32",
          "value": 1108.704,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/lin_reg_coeff",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/LinearRegressionCoeff.csv",
            "--size=1638400000"
          ],
          "env": {},
          "stdout": "['LinearRegressionCoeff_fp32', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '1638400000', '1.114816', '1.108704', '1.100409', '1.100409 1.108704 1.135335', '0.018247', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 2.382949852598588,
          "name": "SYCL-Bench LinearRegressionCoeff LinearRegressionCoeff_fp32",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "SYCL-Bench MolecularDynamics MolecularDynamics",
          "value": 0.031,
          "command": [
            "/home/test-user/ur_bench_workdir/sycl-bench-build/mol_dyn",
            "--warmup-run",
            "--num-runs=3",
            "--output=/home/test-user/ur_bench_workdir/MolecularDynamics.csv",
            "--size=8196"
          ],
          "env": {},
          "stdout": "['MolecularDynamics', 'PASS', 'Intel(R) Data Center GPU Max 1100', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', '256', '8196', '0.000040', '0.000031', '0.000028', '0.000028 0.000031 0.000059', '0.000017', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'LLVM (Intel DPC++)', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0007844645405527355,
          "name": "SYCL-Bench MolecularDynamics MolecularDynamics",
          "lower_is_better": true,
          "suite": "SYCL-Bench",
          "description": "No description provided."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 876.115694,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:50:34Z\",\"584407510\",\"2682370\",\"876.115694\",\"4.003937\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:50:38Z\",\"2089943112\",\"2499133\",\"61.245756\",\"0.073121\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:50:48Z\",\"539256632\",\"269152\",\"949.455364\",\"0.473834\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:50:52Z\",\"2090979937\",\"516063\",\"61.215320\",\"0.015104\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:51:02Z\",\"944449056\",\"293965\",\"542.115041\",\"0.167808\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:51:08Z\",\"2089680653\",\"796836\",\"61.253386\",\"0.023313\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.271032640175307,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.070094,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:49:49Z\",\"582790268\",\"3765240\",\"878.561297\",\"5.635058\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:49:53Z\",\"2095955073\",\"2725883\",\"61.070094\",\"0.079317\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:50:03Z\",\"543077761\",\"497898\",\"942.775379\",\"0.862040\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:50:07Z\",\"2096552164\",\"904980\",\"61.052628\",\"0.026275\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:50:17Z\",\"951312355\",\"781713\",\"538.204169\",\"0.441564\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:50:23Z\",\"2093072354\",\"520658\",\"61.154124\",\"0.015211\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.10469850890214927,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 942.775379,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:49:49Z\",\"582790268\",\"3765240\",\"878.561297\",\"5.635058\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:49:53Z\",\"2095955073\",\"2725883\",\"61.070094\",\"0.079317\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:50:03Z\",\"543077761\",\"497898\",\"942.775379\",\"0.862040\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:50:07Z\",\"2096552164\",\"904980\",\"61.052628\",\"0.026275\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:50:17Z\",\"951312355\",\"781713\",\"538.204169\",\"0.441564\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:50:23Z\",\"2093072354\",\"520658\",\"61.154124\",\"0.015211\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.3189241075404645,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.097808,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:49:03Z\",\"587113761\",\"3229805\",\"872.083666\",\"4.768486\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:49:07Z\",\"2096328250\",\"2702281\",\"61.059221\",\"0.078601\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:49:18Z\",\"545293514\",\"819727\",\"938.945559\",\"1.410107\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:49:21Z\",\"2095001782\",\"823374\",\"61.097808\",\"0.023935\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:49:32Z\",\"949610030\",\"909812\",\"539.169089\",\"0.515968\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:49:38Z\",\"2098926015\",\"644180\",\"60.983574\",\"0.018616\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.08398312271720593,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 539.169089,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:49:03Z\",\"587113761\",\"3229805\",\"872.083666\",\"4.768486\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:49:07Z\",\"2096328250\",\"2702281\",\"61.059221\",\"0.078601\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:49:18Z\",\"545293514\",\"819727\",\"938.945559\",\"1.410107\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:49:21Z\",\"2095001782\",\"823374\",\"61.097808\",\"0.023935\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:49:32Z\",\"949610030\",\"909812\",\"539.169089\",\"0.515968\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:49:38Z\",\"2098926015\",\"644180\",\"60.983574\",\"0.018616\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.037344006015697,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.154124,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:49:49Z\",\"582790268\",\"3765240\",\"878.561297\",\"5.635058\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:49:53Z\",\"2095955073\",\"2725883\",\"61.070094\",\"0.079317\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:50:03Z\",\"543077761\",\"497898\",\"942.775379\",\"0.862040\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:50:07Z\",\"2096552164\",\"904980\",\"61.052628\",\"0.026275\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-14T00:50:17Z\",\"951312355\",\"781713\",\"538.204169\",\"0.441564\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-14T00:50:23Z\",\"2093072354\",\"520658\",\"61.154124\",\"0.015211\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.1364665786239755,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5d3b0d9",
      "github_repo": "intel/llvm",
      "date": "2025-03-14T00:51:19.115878+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 12.501,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.571,12.501,4.79%,11.537,105.344,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.6021508999999999,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 12.148,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.186,12.148,3.09%,11.230,72.887,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3765474,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 22.086,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.227,22.086,7.60%,21.116,532.592,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.689252,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 22.755,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.910,22.755,7.39%,21.827,535.654,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.6930489999999998,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 204.322,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),205.512,204.322,3.10%,200.804,767.233,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.370872,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.004,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),86.699,86.004,1.90%,84.960,144.936,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.647281,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.273,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.391,5.273,13.37%,4.882,52.314,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.7207766999999999,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.813,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.827,2.813,4.71%,0.507,3.221,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1331517,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.923,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.932,1.923,7.47%,1.742,23.683,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1443204,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.444,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.453,1.444,29.32%,1.369,103.618,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.42601960000000005,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.959,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.663,860.959,0.37%,826.735,870.188,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.1844531000000003,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.538,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.485,26.538,5.64%,24.624,143.294,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.493754,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.241,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.423,30.241,5.34%,29.103,157.378,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.6245881999999998,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 270.18,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.742,270.180,2.46%,265.024,767.324,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 6.684853200000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 253.009,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),253.109,253.009,1.65%,251.473,649.380,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.176298500000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.343,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.388,26.343,5.48%,24.824,138.223,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4460624000000002,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.717,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.776,28.717,4.86%,27.823,144.381,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3985136,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 250.714,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),250.864,250.714,1.65%,244.700,603.303,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.1392560000000005,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 251.516,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.593,251.516,1.25%,250.620,550.522,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.1449125,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.361,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.395,5.361,13.50%,4.634,55.050,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.728325,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.256,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.277,4.256,13.53%,3.753,53.963,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5786781000000001,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.554,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.560,1.554,6.33%,1.348,2.125,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.098748,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.028,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.020,1.028,2.02%,0.960,1.074,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.020604,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.306,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.732,13.306,27.64%,12.038,106.074,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.7955247999999995,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.189,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.543,14.189,22.58%,12.979,88.924,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.2838093999999995,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 77.564,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.005,77.564,4.37%,76.718,175.944,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.4088185,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 77.542,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.005,77.542,4.56%,76.212,193.771,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.5570279999999994,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.743,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.771,13.743,6.63%,12.688,91.210,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9130173,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 14.626,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.621,14.626,6.21%,13.376,92.618,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9079641,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 76.126,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),76.096,76.126,0.63%,75.034,96.311,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.4794048,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 78.008,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.054,78.008,0.68%,77.019,105.915,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.5307672000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.537,14.382,181.11%,13.608,8319.329,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.349,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.863,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.475,14.349,132.42%,13.518,6048.158,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 19.167794999999998,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.861,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.079,13.948,161.58%,13.044,7184.446,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29207180000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 13.972,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.126,13.972,203.04%,13.160,9066.790,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 28.681430399999996,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98305.908,97528.000,267.63%,96883.000,83294794.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.702,20.193,3497.61%,17.425,251111.469,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 263096.10158039996,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.046,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98387.492,97528.000,277.50%,96669.000,86434847.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.747,20.046,3738.78%,17.333,268954.754,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 850.4602866,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5493.558,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5499.468,5493.558,0.35%,5476.576,5548.973,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 19.248137999999997,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11027.081,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),10769.588,11027.081,5.59%,9705.618,11581.324,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 602.0199692,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17931.792,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18373.248,17931.792,8.58%,15676.694,23018.872,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1576.4246784,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 789.928,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),779.105,789.928,6.75%,484.872,1414.260,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 52.58958750000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6006.581,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6008.587,6006.581,1.42%,5915.978,6204.302,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 85.3219354,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6348.774,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6464.571,6348.774,4.33%,6162.343,6981.942,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 279.9159243,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17940.427,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18244.655,17940.427,7.02%,16147.068,23610.179,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1280.7747809999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 754.119,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),745.118,754.119,6.85%,515.875,1667.435,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 51.040583,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 30153.438,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),30104.284,30153.438,0.49%,29881.029,30293.263,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 147.51099159999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 85912.682,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),85887.379,85912.682,0.16%,85589.988,86047.846,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 137.4198064,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 25.87,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.923,25.870,5.42%,24.117,140.391,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4050265999999998,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 247.641,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.728,247.641,1.92%,241.232,667.164,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.7563775999999995,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 326.250297,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.411395 s\n326.250297 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 1.0901240892819961,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3822,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00389914 s\nbitcracker - total time for whole calculation: 35.3822 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.01395433027175696,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.683,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1097 1263 29.7855% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1240 1276 33.6682% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1144 1256 31.0616% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1196 1254 32.4735% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1049 1274 28.4822% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1263 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1269 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1256 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1265 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1266 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1259 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1085 1269 29.4597% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1265 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1280 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1263 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1268 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1261 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1245 1276 33.804% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1211 1246 32.8808% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1267 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1186 1262 32.202% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1261 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1042 1258 28.2922% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1266 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1277 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1104 1255 29.9756% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1265 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1261 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1265 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1262 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1274 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1258 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1258 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1271 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1140 1263 30.953% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1256 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1116 1265 30.3014% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1274 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1240 1275 33.6682% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.683 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.06702487100572316,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 239.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.1547005383792515,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.82,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.645050e-01   6.149570e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.498780e-01   7.561090e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.420360e-01   7.717220e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.705280e-01   8.244530e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.424740e-01   7.987990e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.441010e-01   7.734320e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.422180e-01   7.710880e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.445350e-01   8.049250e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.420490e-01   8.136750e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.446340e-01   7.827650e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.120e+07    1.120e+07    1.120e+07    0.000e+00       100.00\ncycleInit                           10    3.487e+06    3.487e+06    3.487e+06    0.000e+00       100.00\ncycleTracking                       10    7.712e+06    7.712e+06    7.712e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.985e+06    4.985e+06    4.985e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    2.022e+05    2.022e+05    2.022e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.380e+02    4.380e+02    4.380e+02    0.000e+00       100.00\nFigure Of Merit                 116.82 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.39374272480050987,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 723.326,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.56874 s\nsobelfilter - total time for whole calculation: 0.723326 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 43.91951195463509,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.3802,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.9e-05 s\ndl-cifar - total time for whole calculation: 17.3802 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.06516317978736072,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.65,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.65 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02645751311064601,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.149,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073698 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0667 s\nProcessing elapsed time : 0.0799 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1490 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0004041451884327359,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 886.369085,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:21Z\",\"577650012\",\"3017378\",\"886.369085\",\"4.603528\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:25Z\",\"2066310429\",\"2689170\",\"61.946246\",\"0.080505\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:35Z\",\"542267975\",\"344376\",\"944.182926\",\"0.597678\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:39Z\",\"2062548544\",\"1330427\",\"62.059166\",\"0.039971\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:49Z\",\"943187205\",\"323396\",\"542.840324\",\"0.186146\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:55Z\",\"2060300041\",\"312798\",\"62.126875\",\"0.009431\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.452460256391577,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.814467,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:04:36Z\",\"576546848\",\"2421063\",\"888.058260\",\"3.712882\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:04:40Z\",\"2070715390\",\"2648831\",\"61.814467\",\"0.078930\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:04:50Z\",\"542125819\",\"883578\",\"944.432218\",\"1.541802\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:04:54Z\",\"2068331692\",\"353262\",\"61.885627\",\"0.010484\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:04Z\",\"945996590\",\"242856\",\"541.228194\",\"0.136682\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:10Z\",\"2069489329\",\"1150658\",\"61.851023\",\"0.034342\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.21078590326284496,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 944.182926,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:21Z\",\"577650012\",\"3017378\",\"886.369085\",\"4.603528\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:25Z\",\"2066310429\",\"2689170\",\"61.946246\",\"0.080505\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:35Z\",\"542267975\",\"344376\",\"944.182926\",\"0.597678\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:39Z\",\"2062548544\",\"1330427\",\"62.059166\",\"0.039971\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:49Z\",\"943187205\",\"323396\",\"542.840324\",\"0.186146\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:55Z\",\"2060300041\",\"312798\",\"62.126875\",\"0.009431\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.2718074079628776,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.885627,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:04:36Z\",\"576546848\",\"2421063\",\"888.058260\",\"3.712882\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:04:40Z\",\"2070715390\",\"2648831\",\"61.814467\",\"0.078930\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:04:50Z\",\"542125819\",\"883578\",\"944.432218\",\"1.541802\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:04:54Z\",\"2068331692\",\"353262\",\"61.885627\",\"0.010484\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:04Z\",\"945996590\",\"242856\",\"541.228194\",\"0.136682\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:10Z\",\"2069489329\",\"1150658\",\"61.851023\",\"0.034342\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.21662520156789877,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 541.228194,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:04:36Z\",\"576546848\",\"2421063\",\"888.058260\",\"3.712882\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:04:40Z\",\"2070715390\",\"2648831\",\"61.814467\",\"0.078930\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:04:50Z\",\"542125819\",\"883578\",\"944.432218\",\"1.541802\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:04:54Z\",\"2068331692\",\"353262\",\"61.885627\",\"0.010484\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:04Z\",\"945996590\",\"242856\",\"541.228194\",\"0.136682\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:10Z\",\"2069489329\",\"1150658\",\"61.851023\",\"0.034342\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.94170440343899,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.851023,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:04:36Z\",\"576546848\",\"2421063\",\"888.058260\",\"3.712882\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:04:40Z\",\"2070715390\",\"2648831\",\"61.814467\",\"0.078930\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:04:50Z\",\"542125819\",\"883578\",\"944.432218\",\"1.541802\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:04:54Z\",\"2068331692\",\"353262\",\"61.885627\",\"0.010484\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T20:05:04Z\",\"945996590\",\"242856\",\"541.228194\",\"0.136682\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T20:05:10Z\",\"2069489329\",\"1150658\",\"61.851023\",\"0.034342\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.28356919136664394,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "e9b1375",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T20:06:05.698584+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.873,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.910,11.873,2.92%,11.132,66.825,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.347772,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.808,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.853,11.808,2.35%,11.134,25.782,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.2785455,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.193,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.347,23.193,7.82%,22.358,561.181,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.8257354000000003,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.414,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.591,24.414,7.58%,23.622,587.778,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.8639978000000001,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 258.22,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),259.796,258.220,2.58%,255.339,809.728,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.702736799999999,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.755,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.671,133.755,1.71%,131.590,165.124,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.3028741,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.696,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.937,5.696,14.98%,5.206,61.844,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.8893626000000001,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.177,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.159,3.177,3.33%,0.341,3.437,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1051947,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.152,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.167,2.152,8.92%,1.974,49.393,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.19329639999999998,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.717,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.736,1.717,6.40%,1.637,18.179,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.11110400000000001,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.37,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.050,860.370,0.35%,830.007,868.686,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.0101749999999994,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 29.458,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.387,29.458,5.48%,27.281,152.674,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.6104076,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 306.142,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),307.581,306.142,2.56%,298.455,887.380,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.874073600000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.748,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.741,25.748,5.20%,23.939,137.270,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.338532,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 29.054,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.092,29.054,4.46%,28.188,148.189,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2975032,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 253.614,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),253.812,253.614,1.99%,249.065,733.547,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.0508588,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 251.851,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.947,251.851,1.93%,250.747,724.499,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.862577099999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.924,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.962,5.924,15.82%,5.126,91.139,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.9431884,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.261,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.279,4.261,14.70%,3.719,58.709,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.6290129999999999,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.64,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.642,0.640,9.40%,0.525,1.211,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.060348,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.074,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.062,1.074,2.70%,0.960,1.142,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.028674000000000005,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.442,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.912,6.442,21.68%,6.123,81.945,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.4985216,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.214,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.338,31.214,3.28%,29.596,70.937,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.0278863999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.491,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.849,6.491,18.43%,6.181,60.708,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.2622707,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 44.114,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),44.242,44.114,2.19%,42.361,68.592,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.9688997999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 6.991,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.058,6.991,4.45%,6.775,27.880,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.314081,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 37.739,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),37.705,37.739,2.37%,35.731,86.837,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8936085,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 6.975,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.049,6.975,5.04%,6.719,29.138,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.3552696,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 116.656,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),116.725,116.656,1.25%,114.842,145.407,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.4590625,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.531,16.353,144.52%,15.695,7570.567,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.309,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.490,16.309,156.55%,15.699,8179.202,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 25.815095,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.208,17.048,116.28%,16.301,6320.894,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1199392,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.015,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.190,17.015,119.73%,16.387,6524.390,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.581587000000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125948.826,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.851,21.545,102.84%,20.671,7106.079,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4672.7014446,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.546,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125947.085,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.839,21.546,95.63%,20.617,6601.673,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.884635699999997,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6900.958,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6931.539,6900.958,1.13%,6872.697,7101.799,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 78.32639069999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 17785.756,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17672.803,17785.756,5.62%,15958.225,19346.356,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 993.2115286,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 50405.566,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50352.588,50405.566,5.18%,43088.106,59447.249,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2608.2640584,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 1993.092,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2015.636,1993.092,13.48%,1361.525,4905.364,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 271.7077328,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7497.016,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7544.322,7497.016,1.61%,7367.536,7779.313,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 121.4635842,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 16579.092,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16310.954,16579.092,10.16%,12391.662,19110.364,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1657.1929263999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45236.859,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45148.194,45236.859,3.02%,39490.687,48369.338,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1363.4754588,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1390.456,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1509.364,1390.456,31.97%,848.868,5132.885,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 482.5436708,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42161.335,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42185.196,42161.335,0.57%,41811.910,42617.813,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 240.4556172,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 116893.921,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116984.490,116893.921,0.36%,116432.817,117904.126,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 421.144164,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.422,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.567,33.422,4.24%,31.375,85.703,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4232408,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.571,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.650,51.571,2.96%,48.384,80.649,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.52884,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.51,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.786,271.510,2.90%,265.256,987.573,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.881793999999999,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 312.681,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),313.140,312.681,1.46%,309.329,627.318,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.571844,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 313.752412,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.427782 s\n313.752412 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.6396122748274045,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3822,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00398069 s\nbitcracker - total time for whole calculation: 35.3822 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.024175676481400635,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.712,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1244 1276 33.7768% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1262 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1155 1281 31.3603% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1251 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1264 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1265 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1265 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1248 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1266 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1259 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1272 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1254 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1086 1260 29.4868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1267 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1266 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1264 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1066 1266 28.9438% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1272 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1258 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1257 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1164 1257 31.6047% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1215 1252 32.9894% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1200 1266 32.5821% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1052 1266 28.5637% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1187 1272 32.2292% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1272 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1265 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1118 1270 30.3557% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1265 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1069 1251 29.0253% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1268 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1254 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1276 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1117 1268 30.3285% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1135 1268 30.8173% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1120 1278 30.41% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1266 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1254 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1265 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1253 1286 34.0212% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1278 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.712 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.1061618261586125,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 241.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.5275252316519468,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.93,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.604950e-01   6.060060e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.456960e-01   7.477090e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.376870e-01   7.612020e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.661130e-01   8.142110e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.386650e-01   7.878160e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.422210e-01   7.630020e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.372970e-01   7.757060e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.414350e-01   8.050240e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.377980e-01   8.038410e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.399360e-01   7.746980e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.109e+07    1.109e+07    1.109e+07    0.000e+00       100.00\ncycleInit                           10    3.447e+06    3.447e+06    3.447e+06    0.000e+00       100.00\ncycleTracking                       10    7.639e+06    7.639e+06    7.639e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.983e+06    4.983e+06    4.983e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.967e+05    1.967e+05    1.967e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.160e+02    4.160e+02    4.160e+02    0.000e+00       100.00\nFigure Of Merit                 117.93 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.21283796653792803,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 722.013,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.48 s\nsobelfilter - total time for whole calculation: 0.722013 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 25.13805893461151,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.2697,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.9e-05 s\ndl-cifar - total time for whole calculation: 24.2697 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.12285374773824986,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1355,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.065424 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0616 s\nProcessing elapsed time : 0.0717 s\nStoring    elapsed time : 0.0022 s\nTotal      elapsed time : 0.1355 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0016221678616680107,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 878.019411,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:19Z\",\"583146204\",\"3383952\",\"878.019411\",\"5.056024\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:23Z\",\"2093449749\",\"2270163\",\"61.143154\",\"0.066209\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:34Z\",\"550249968\",\"665057\",\"930.487283\",\"1.124252\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:37Z\",\"2092148870\",\"398202\",\"61.181116\",\"0.011491\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:48Z\",\"962345074\",\"1524172\",\"532.034754\",\"0.841156\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:53Z\",\"2091464678\",\"230035\",\"61.201130\",\"0.006460\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 9.565995549616192,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.143154,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:19Z\",\"583146204\",\"3383952\",\"878.019411\",\"5.056024\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:23Z\",\"2093449749\",\"2270163\",\"61.143154\",\"0.066209\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:34Z\",\"550249968\",\"665057\",\"930.487283\",\"1.124252\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:37Z\",\"2092148870\",\"398202\",\"61.181116\",\"0.011491\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:48Z\",\"962345074\",\"1524172\",\"532.034754\",\"0.841156\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:53Z\",\"2091464678\",\"230035\",\"61.201130\",\"0.006460\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.019897044160715707,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 942.910462,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:38:34Z\",\"589014237\",\"2685183\",\"869.263317\",\"3.942995\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:38:38Z\",\"2094578326\",\"2638889\",\"61.110229\",\"0.076866\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:38:48Z\",\"543000206\",\"643921\",\"942.910462\",\"1.118268\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:38:52Z\",\"2096468880\",\"1231333\",\"61.055061\",\"0.035834\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:02Z\",\"950628463\",\"1238555\",\"538.591799\",\"0.701063\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:08Z\",\"2095108848\",\"452590\",\"61.094680\",\"0.013095\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 7.728295190891764,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.181116,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:19Z\",\"583146204\",\"3383952\",\"878.019411\",\"5.056024\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:23Z\",\"2093449749\",\"2270163\",\"61.143154\",\"0.066209\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:34Z\",\"550249968\",\"665057\",\"930.487283\",\"1.124252\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:37Z\",\"2092148870\",\"398202\",\"61.181116\",\"0.011491\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:48Z\",\"962345074\",\"1524172\",\"532.034754\",\"0.841156\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:53Z\",\"2091464678\",\"230035\",\"61.201130\",\"0.006460\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.07381711350583504,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 538.591799,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:38:34Z\",\"589014237\",\"2685183\",\"869.263317\",\"3.942995\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:38:38Z\",\"2094578326\",\"2638889\",\"61.110229\",\"0.076866\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:38:48Z\",\"543000206\",\"643921\",\"942.910462\",\"1.118268\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:38:52Z\",\"2096468880\",\"1231333\",\"61.055061\",\"0.035834\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:39:02Z\",\"950628463\",\"1238555\",\"538.591799\",\"0.701063\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:39:08Z\",\"2095108848\",\"452590\",\"61.094680\",\"0.013095\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.581163478277453,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.174319,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:37:49Z\",\"576346363\",\"2935808\",\"888.373062\",\"4.506854\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:37:53Z\",\"2093352192\",\"3004488\",\"61.146047\",\"0.087612\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:38:03Z\",\"541992584\",\"514746\",\"944.663049\",\"0.895350\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:38:07Z\",\"2092028242\",\"253230\",\"61.184643\",\"0.007345\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:38:17Z\",\"942672995\",\"370511\",\"543.136449\",\"0.212742\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:38:23Z\",\"2092381319\",\"258875\",\"61.174319\",\"0.007329\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.055366660458559744,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5323386",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T19:40:04.503233+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.971,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.005,11.971,3.49%,11.113,82.646,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.4189745,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.9,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.938,11.900,3.14%,11.061,73.875,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.37485320000000005,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.351,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.486,21.351,2.20%,20.307,56.346,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.47269200000000006,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 21.744,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.844,21.744,8.54%,20.691,580.533,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.8654776,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 205.865,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),206.945,205.865,3.12%,201.543,770.154,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.456684,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 85.477,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),86.198,85.477,2.03%,84.622,174.398,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.7498193999999998,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.16,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.297,5.160,20.16%,4.791,101.741,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.0678752,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.879,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.870,2.879,3.49%,0.346,3.281,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.100163,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.916,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.929,1.916,6.33%,1.749,20.281,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1221057,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.406,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.422,1.406,32.50%,1.353,123.126,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.46215,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 861.548,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.764,861.548,0.47%,815.219,869.286,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 4.045590799999999,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.63,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.769,26.630,5.07%,25.061,148.854,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3571883,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.143,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.268,30.143,5.03%,28.561,153.174,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5224804,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 268.856,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),269.776,268.856,2.73%,260.510,828.263,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.3648848000000005,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 254.976,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),255.049,254.976,1.83%,252.975,697.821,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.6673967,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.267,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.308,26.267,4.19%,24.577,116.259,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.1023052000000002,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.931,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.972,28.931,3.86%,28.055,134.509,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.1183192,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 243.47,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),243.763,243.470,1.97%,239.060,691.195,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.8021310999999995,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 251.655,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.751,251.655,1.47%,250.800,601.545,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.7007396999999997,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.328,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.378,5.328,12.83%,4.867,52.644,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.6899974,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.224,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.249,4.224,10.20%,3.671,28.036,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.43339799999999995,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.531,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.539,1.531,6.56%,1.302,2.148,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.10095839999999998,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.028,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.020,1.028,2.99%,0.937,1.097,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.030498000000000004,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.083,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.515,13.083,24.37%,11.906,95.046,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.2936055,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.288,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.827,14.288,22.30%,13.484,97.848,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.306421,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 77.644,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.120,77.644,4.22%,76.480,154.219,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.296664,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 78.074,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.460,78.074,4.30%,76.982,176.503,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.3737799999999996,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 14.175,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),14.189,14.175,6.07%,12.994,86.700,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8612723000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 14.555,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.614,14.555,5.05%,13.308,53.120,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.738007,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 81.379,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),81.382,81.379,0.77%,80.390,128.165,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.6266414,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 78.912,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.928,78.912,0.91%,78.059,137.686,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.7182448,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.179,14.060,134.61%,13.131,6019.052,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.06,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.179,14.060,134.61%,13.131,6019.052,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 19.0863519,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.349,14.188,216.65%,13.307,9844.189,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206800000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.188,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.349,14.188,216.65%,13.307,9844.189,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 31.087108500000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98722.709,97528.000,341.15%,96454.000,106602548.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),25.015,21.051,4853.86%,19.045,383988.756,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 336792.5217535,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.191,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98342.549,97528.000,268.54%,96528.000,83610746.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.759,20.191,3622.50%,17.313,260727.889,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 824.444775,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5457.994,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5453.924,5457.994,0.26%,5427.328,5473.832,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 14.180202399999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11128.246,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11121.184,11128.246,5.25%,10239.179,12200.628,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 583.8621599999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17859.686,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18196.065,17859.686,7.66%,15861.447,24012.542,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1393.818579,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 768.045,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),758.385,768.045,7.11%,419.988,1436.451,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 53.921173499999995,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6021.032,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6043.716,6021.032,1.16%,5921.971,6141.833,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 70.1071056,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6399.044,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6432.592,6399.044,2.72%,6141.216,6800.640,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 174.9665024,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17850.558,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18098.578,17850.558,6.79%,15672.011,23093.462,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1228.8934462000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 787.094,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),776.734,787.094,7.29%,454.150,1323.916,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 56.62390860000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 30030.425,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29953.335,30030.425,0.59%,29555.764,30159.437,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 176.7246765,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 87352.096,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),87217.901,87352.096,0.56%,86270.915,87766.283,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 488.42024560000004,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.196,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.281,26.196,5.20%,24.395,132.443,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3666120000000002,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 249.896,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),250.096,249.896,1.73%,246.389,661.265,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.3266608,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 328.935567,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.408037 s\n328.935567 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 2.613920761747508,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3252,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00394924 s\nbitcracker - total time for whole calculation: 35.3252 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.039333997169541925,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.884,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1258 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1253 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1070 1272 29.0524% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1088 1265 29.5411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1261 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1265 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1192 1257 32.3649% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1100 1272 29.867% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1128 1251 30.6272% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1160 1263 31.4961% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1052 1256 28.5637% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1267 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1257 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1265 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1146 1253 31.1159% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1272 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1257 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1267 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1125 1271 30.5458% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1058 1264 28.7266% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1085 1251 29.4597% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1284 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1270 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1058 1258 28.7266% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1037 1246 28.1564% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1261 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1257 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1089 1268 29.5683% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1253 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1253 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1261 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1138 1270 30.8987% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1254 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1073 1265 29.1339% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1156 1257 31.3875% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1137 1274 30.8716% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1093 1266 29.6769% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1196 1273 32.4735% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1121 1261 30.4371% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1260 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1266 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.884 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.4425821957557821,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 238.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.04,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.672090e-01   6.116050e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.521050e-01   7.520500e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.446880e-01   7.681680e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.711020e-01   8.323170e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.448130e-01   8.157120e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.454330e-01   7.883740e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.445800e-01   7.705240e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.462040e-01   7.911790e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.432840e-01   7.899270e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.449980e-01   7.774830e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.120e+07    1.120e+07    1.120e+07    0.000e+00       100.00\ncycleInit                           10    3.504e+06    3.504e+06    3.504e+06    0.000e+00       100.00\ncycleTracking                       10    7.697e+06    7.697e+06    7.697e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.985e+06    4.985e+06    4.985e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.877e+05    1.877e+05    1.877e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.190e+02    4.190e+02    4.190e+02    0.000e+00       100.00\nFigure Of Merit                 117.04 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.14525839046334288,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 732.062,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47315 s\nsobelfilter - total time for whole calculation: 0.732062 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 4.360056077621025,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.4487,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8e-05 s\ndl-cifar - total time for whole calculation: 17.4487 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.07457387835786253,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.64,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.64 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.011547005383792526,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1494,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073630 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0672 s\nProcessing elapsed time : 0.0800 s\nStoring    elapsed time : 0.0022 s\nTotal      elapsed time : 0.1494 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0003785938897200181,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 884.109679,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:59:29Z\",\"579123290\",\"2647111\",\"884.109679\",\"4.017292\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:59:33Z\",\"2067828814\",\"2259073\",\"61.900734\",\"0.067530\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:59:44Z\",\"539102577\",\"559507\",\"949.727311\",\"0.985119\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:59:47Z\",\"2065496569\",\"1094414\",\"61.970584\",\"0.032785\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:59:57Z\",\"953287192\",\"1002402\",\"537.089406\",\"0.564321\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:00:03Z\",\"2062207192\",\"336088\",\"62.069419\",\"0.010069\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.2535512541732774,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.900734,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:59:29Z\",\"579123290\",\"2647111\",\"884.109679\",\"4.017292\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:59:33Z\",\"2067828814\",\"2259073\",\"61.900734\",\"0.067530\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:59:44Z\",\"539102577\",\"559507\",\"949.727311\",\"0.985119\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:59:47Z\",\"2065496569\",\"1094414\",\"61.970584\",\"0.032785\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:59:57Z\",\"953287192\",\"1002402\",\"537.089406\",\"0.564321\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:00:03Z\",\"2062207192\",\"336088\",\"62.069419\",\"0.010069\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.037421373923647895,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 941.210206,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:00:59Z\",\"582123467\",\"3492226\",\"879.563636\",\"5.237886\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:01:03Z\",\"2069966743\",\"2437065\",\"61.836811\",\"0.072673\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:01:13Z\",\"543980649\",\"317892\",\"941.210206\",\"0.548258\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:01:17Z\",\"2067036354\",\"749792\",\"61.924413\",\"0.022444\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:01:27Z\",\"964241609\",\"852473\",\"530.987581\",\"0.468814\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:01:33Z\",\"2068939996\",\"608271\",\"61.867434\",\"0.018109\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.995666300057512,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.924413,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:00:59Z\",\"582123467\",\"3492226\",\"879.563636\",\"5.237886\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:01:03Z\",\"2069966743\",\"2437065\",\"61.836811\",\"0.072673\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:01:13Z\",\"543980649\",\"317892\",\"941.210206\",\"0.548258\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:01:17Z\",\"2067036354\",\"749792\",\"61.924413\",\"0.022444\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:01:27Z\",\"964241609\",\"852473\",\"530.987581\",\"0.468814\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:01:33Z\",\"2068939996\",\"608271\",\"61.867434\",\"0.018109\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.033818368534472974,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.089406,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:59:29Z\",\"579123290\",\"2647111\",\"884.109679\",\"4.017292\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:59:33Z\",\"2067828814\",\"2259073\",\"61.900734\",\"0.067530\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:59:44Z\",\"539102577\",\"559507\",\"949.727311\",\"0.985119\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:59:47Z\",\"2065496569\",\"1094414\",\"61.970584\",\"0.032785\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:59:57Z\",\"953287192\",\"1002402\",\"537.089406\",\"0.564321\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:00:03Z\",\"2062207192\",\"336088\",\"62.069419\",\"0.010069\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.8116956893032774,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.928846,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:00:14Z\",\"577973832\",\"2701679\",\"885.868643\",\"4.115530\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:00:18Z\",\"2067770722\",\"2458115\",\"61.902484\",\"0.073472\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:00:28Z\",\"544134071\",\"420676\",\"940.945017\",\"0.724906\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:00:32Z\",\"2067694813\",\"769950\",\"61.904694\",\"0.023006\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T19:00:42Z\",\"951680214\",\"775027\",\"537.996128\",\"0.437448\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T19:00:48Z\",\"2066888271\",\"491018\",\"61.928846\",\"0.014585\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.10354559567166599,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5323386",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T19:01:44.043524+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.88,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.915,11.880,3.01%,11.130,65.090,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.35864149999999995,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.773,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.820,11.773,2.51%,11.017,30.231,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.296682,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.287,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.449,23.287,7.46%,22.433,543.148,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7492954,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.275,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.463,24.275,7.97%,23.527,613.835,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.9497011,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 260.865,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),262.449,260.865,2.84%,257.476,898.534,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 7.4535516,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.858,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.798,133.858,1.80%,131.703,216.062,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.4263640000000004,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.707,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.826,5.707,16.23%,5.293,85.519,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.9455598,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.153,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.136,3.153,3.48%,0.355,3.406,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1091328,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.151,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.168,2.151,8.00%,1.979,43.208,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.17344,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.701,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.718,1.701,5.68%,1.622,7.767,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.09758239999999999,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.076,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.552,860.076,0.38%,825.921,873.207,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.2662976,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 29.213,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.355,29.213,5.41%,27.823,154.260,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5881055000000002,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 303.692,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),305.684,303.692,2.46%,297.972,847.865,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.5198264,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.549,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.518,26.549,5.10%,24.549,136.535,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.352418,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.619,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.659,28.619,4.55%,27.454,139.850,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3039844999999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 250.884,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),251.081,250.884,1.63%,246.989,633.002,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.092620299999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 263.867,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),263.953,263.867,1.12%,262.901,540.555,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.9562736000000003,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.914,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.949,5.914,13.74%,5.244,75.545,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.8173925999999999,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.289,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.314,4.289,13.77%,3.709,57.410,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5940378,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.64,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.645,0.640,9.77%,0.502,1.211,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0630165,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 0.982,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.988,0.982,1.78%,0.960,1.074,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0175864,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.393,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.835,6.393,32.44%,6.036,161.617,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 2.2172739999999997,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.706,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.831,31.706,3.43%,29.875,72.307,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.0918033,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.46,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.787,6.460,16.09%,6.155,58.728,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.0920283,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 42.494,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),42.687,42.494,5.72%,40.770,244.115,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 2.4416964,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 7.088,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.163,7.088,10.57%,6.851,70.341,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.7571291,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 37.665,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),37.638,37.665,1.88%,35.917,67.564,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.7075943999999998,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 6.951,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.023,6.951,4.52%,6.704,29.284,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.3174396,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 113.131,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),113.169,113.131,0.59%,111.055,132.035,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.6676970999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.328,16.142,155.61%,15.579,8050.371,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.343,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.521,16.343,143.85%,15.691,7530.879,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.765458499999998,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.337,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.415,17.230,125.27%,16.618,6895.457,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1199789,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.139,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.321,17.139,120.46%,16.504,6593.961,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 20.8648766,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125948.724,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.965,21.655,100.25%,20.812,6961.700,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4672.6976604,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.577,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125945.824,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.874,21.577,91.16%,20.590,6298.081,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 19.940338399999998,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6900.854,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6917.073,6900.854,0.73%,6870.892,7024.276,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 50.494632900000006,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 17746.928,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17924.260,17746.928,5.57%,16665.308,20198.751,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 998.3812819999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 50337.872,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50297.222,50337.872,5.30%,42837.244,58275.659,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2665.752766,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2015.251,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2046.548,2015.251,13.48%,1354.007,5098.296,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 275.8746704,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7539.594,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7557.498,7539.594,1.70%,7393.174,7798.289,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 128.477466,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 16848.923,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16462.110,16848.923,8.45%,13573.153,18438.989,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1391.0482949999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45279.593,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45165.976,45279.593,2.94%,38211.422,48353.445,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1327.8796944,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1409.117,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1523.699,1409.117,31.34%,745.976,5207.528,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 477.5272666,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42267.44,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42278.325,42267.440,0.67%,41887.018,42895.346,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 283.2647775,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 116347.832,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116460.702,116347.832,0.57%,115236.226,117384.240,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 663.8260014,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.523,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.653,33.523,3.87%,31.404,97.375,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3023710999999998,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.861,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.922,51.861,2.99%,48.041,81.309,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5524678,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.132,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.338,271.132,2.82%,265.165,979.014,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.651731600000001,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 312.418,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),312.794,312.418,1.41%,309.391,652.705,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.4103954,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 325.261441,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.412646 s\n325.261441 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 0.430854713796782,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3508,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00408098 s\nbitcracker - total time for whole calculation: 35.3508 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.05404371687193168,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.638,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1266 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1258 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1256 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1259 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1141 1260 30.9802% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1203 1258 32.6636% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1088 1268 29.5411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1256 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1244 1278 33.7768% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1258 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1124 1267 30.5186% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1181 1269 32.0662% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1087 1268 29.514% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1090 1261 29.5954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1255 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1135 1269 30.8173% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1274 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1160 1263 31.4961% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1272 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1269 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1215 1262 32.9894% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1263 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1211 1260 32.8808% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1266 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1143 1265 31.0345% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1115 1264 30.2742% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1272 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1255 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1262 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1136 1249 30.8444% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1275 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1259 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1248 1288 33.8854% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1075 1268 29.1882% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1260 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1159 1273 31.4689% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1261 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1258 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1258 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1263 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1059 1251 28.7537% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1259 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1134 1262 30.7901% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1104 1267 29.9756% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1275 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1265 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.638 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.136060035768532,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 241.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.1547005383792515,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.85,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.700820e-01   6.070560e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.532160e-01   7.469620e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.451200e-01   7.626000e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.734820e-01   8.152840e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.441850e-01   7.880150e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.467840e-01   7.643620e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.447020e-01   7.756430e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.464760e-01   8.047260e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.445170e-01   8.040700e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.462360e-01   7.756310e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.116e+07    1.116e+07    1.116e+07    0.000e+00       100.00\ncycleInit                           10    3.515e+06    3.515e+06    3.515e+06    0.000e+00       100.00\ncycleTracking                       10    7.644e+06    7.644e+06    7.644e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.983e+06    4.983e+06    4.983e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    2.002e+05    2.002e+05    2.002e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.200e+02    4.200e+02    4.200e+02    0.000e+00       100.00\nFigure Of Merit                 117.85 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.439355588712978,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 689.788,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.4717 s\nsobelfilter - total time for whole calculation: 0.689788 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 8.96333116090219,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.3003,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.1e-05 s\ndl-cifar - total time for whole calculation: 24.3003 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.07961827679622363,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.68,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.68 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02645751311064601,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1521,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076051 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0674 s\nProcessing elapsed time : 0.0823 s\nStoring    elapsed time : 0.0024 s\nTotal      elapsed time : 0.1521 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0009451631252505224,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 879.618893,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:34Z\",\"582104031\",\"4958469\",\"879.618893\",\"7.488263\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:38Z\",\"2093876597\",\"3074304\",\"61.130737\",\"0.089613\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:49Z\",\"547378824\",\"3125693\",\"935.391086\",\"5.308009\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:52Z\",\"2093023137\",\"641051\",\"61.155564\",\"0.018726\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:38:03Z\",\"957150844\",\"507325\",\"534.921029\",\"0.282848\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:38:08Z\",\"2091831002\",\"861740\",\"61.190420\",\"0.025171\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.178522524988834,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.130737,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:34Z\",\"582104031\",\"4958469\",\"879.618893\",\"7.488263\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:38Z\",\"2093876597\",\"3074304\",\"61.130737\",\"0.089613\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:49Z\",\"547378824\",\"3125693\",\"935.391086\",\"5.308009\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:52Z\",\"2093023137\",\"641051\",\"61.155564\",\"0.018726\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:38:03Z\",\"957150844\",\"507325\",\"534.921029\",\"0.282848\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:38:08Z\",\"2091831002\",\"861740\",\"61.190420\",\"0.025171\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.039006188359456594,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 942.161038,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:36:49Z\",\"585544453\",\"2882661\",\"874.416723\",\"4.276743\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:36:53Z\",\"2095476318\",\"2280167\",\"61.084022\",\"0.066366\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:03Z\",\"543432431\",\"790054\",\"942.161038\",\"1.367646\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:07Z\",\"2090799990\",\"972381\",\"61.220596\",\"0.028458\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:17Z\",\"950059938\",\"532696\",\"538.913501\",\"0.301143\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:23Z\",\"2093047122\",\"581265\",\"61.154862\",\"0.016874\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.432437390797114,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.155564,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:34Z\",\"582104031\",\"4958469\",\"879.618893\",\"7.488263\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:38Z\",\"2093876597\",\"3074304\",\"61.130737\",\"0.089613\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:49Z\",\"547378824\",\"3125693\",\"935.391086\",\"5.308009\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:52Z\",\"2093023137\",\"641051\",\"61.155564\",\"0.018726\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:38:03Z\",\"957150844\",\"507325\",\"534.921029\",\"0.282848\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:38:08Z\",\"2091831002\",\"861740\",\"61.190420\",\"0.025171\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.04159665554264447,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 535.640186,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:38:20Z\",\"578691065\",\"2959980\",\"884.773732\",\"4.498794\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:38:23Z\",\"2092822666\",\"2512448\",\"61.161488\",\"0.073326\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:38:34Z\",\"542526840\",\"339664\",\"943.732403\",\"0.588314\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:38:37Z\",\"2093448029\",\"233165\",\"61.143147\",\"0.006677\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:38:48Z\",\"955871393\",\"2647551\",\"535.640186\",\"1.478296\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:38:54Z\",\"2095499201\",\"750227\",\"61.083303\",\"0.021865\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.1280511644326254,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.154862,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:36:49Z\",\"585544453\",\"2882661\",\"874.416723\",\"4.276743\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:36:53Z\",\"2095476318\",\"2280167\",\"61.084022\",\"0.066366\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:03Z\",\"543432431\",\"790054\",\"942.161038\",\"1.367646\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:07Z\",\"2090799990\",\"972381\",\"61.220596\",\"0.028458\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:37:17Z\",\"950059938\",\"532696\",\"538.913501\",\"0.301143\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:37:23Z\",\"2093047122\",\"581265\",\"61.154862\",\"0.016874\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.05455748273457503,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5323386",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T18:39:04.782528+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 12.158,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.195,12.158,2.83%,11.255,32.021,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.34511850000000005,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.891,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.930,11.891,3.29%,11.080,79.589,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.392497,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.571,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.671,21.571,2.66%,20.579,114.046,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5764486,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 21.929,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.083,21.929,8.02%,21.097,556.339,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.7710565999999996,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 202.952,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),204.154,202.952,3.16%,199.547,765.056,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.451266400000001,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.101,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),86.846,86.101,1.76%,85.490,106.564,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.5284896000000001,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.192,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.296,5.192,18.12%,4.760,91.370,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.9596352,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.783,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.774,2.783,3.12%,0.891,3.148,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.08654880000000001,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.926,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.935,1.926,13.39%,1.706,72.202,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.25909650000000006,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.446,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.457,1.446,29.19%,1.376,132.716,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.4252983,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.664,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.918,860.664,0.49%,810.755,869.286,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 4.2135982,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.721,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.836,26.721,5.53%,25.107,146.652,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4840308,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 29.77,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.930,29.770,5.27%,28.906,154.272,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.577311,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 269.474,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.006,269.474,2.70%,261.859,842.921,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.317162,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 255.942,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),256.085,255.942,1.70%,254.806,668.162,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.353445,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.028,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.076,26.028,4.90%,24.479,135.756,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.277724,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 29.101,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.135,29.101,4.63%,28.002,142.388,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3489505000000002,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 251.504,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),251.702,251.504,1.76%,247.869,673.505,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.4299552,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 250.933,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.030,250.933,1.13%,249.977,509.711,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.836639,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.313,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.348,5.313,19.98%,4.736,101.759,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 1.0685304,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.344,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.352,4.344,18.14%,3.772,79.797,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.7894528000000001,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.508,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.520,1.508,5.53%,1.348,2.057,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.084056,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.005,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.995,1.005,2.27%,0.937,1.051,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.022586500000000002,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.131,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.691,13.131,24.54%,12.092,91.802,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.3597714,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.428,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.955,14.428,24.78%,13.527,177.068,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.705849,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 78.039,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.502,78.039,3.98%,77.121,151.190,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.1243796,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 77.42,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),77.894,77.420,4.59%,76.490,150.409,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.5753346,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.829,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.877,13.829,6.49%,12.782,90.967,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9006173000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 14.723,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.676,14.723,5.61%,13.787,80.100,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.8233236,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 76.263,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),76.301,76.263,1.10%,75.402,151.631,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.8393110000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 78.752,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.808,78.752,0.55%,77.756,99.281,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.4334440000000001,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.415,14.281,144.76%,13.418,6588.083,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.315,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.861,95034.000,0.38%,95034.000,101510.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.446,14.315,158.99%,13.497,7276.495,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.9676954,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.859,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.310,14.145,240.08%,13.281,10877.588,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206419999997,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.145,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.859,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.310,14.145,240.08%,13.281,10877.588,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 34.355448,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97313.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98178.340,97313.000,251.80%,96454.000,78273603.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.166,19.861,3119.45%,17.351,218682.200,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 247213.06012,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 19.861,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98178.340,97313.000,251.80%,96454.000,78273603.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.166,19.861,3119.45%,17.351,218682.200,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 691.457287,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5461.957,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5462.431,5461.957,0.20%,5443.750,5480.118,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 10.924862,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11174.956,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11229.908,11174.956,4.94%,10240.054,12215.284,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 554.7574552000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17768.626,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18110.152,17768.626,8.44%,15343.480,23455.873,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1528.4968287999995,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 749.966,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),740.747,749.966,7.20%,481.358,1305.326,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 53.333784,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 5955.84,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),5962.897,5955.840,0.60%,5904.565,6010.831,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 35.777382,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6392.885,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6382.436,6392.885,1.38%,6266.428,6542.775,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 88.0776168,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17593.764,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),17992.710,17593.764,8.37%,15501.464,23768.972,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1505.9898269999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 775.688,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),766.207,775.688,7.38%,533.512,1269.999,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 56.546076600000006,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29821.526,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29846.540,29821.526,0.53%,29582.365,30212.000,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 158.186662,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 88554.295,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),88532.996,88554.295,0.26%,88197.574,88865.501,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 230.1857896,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.076,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.105,26.076,5.49%,24.352,135.352,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4331645000000002,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 247.749,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.909,247.749,1.89%,241.424,658.387,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.6854800999999995,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 318.133938,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.421891 s\n318.133938 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 5.823174553899061,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3339,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00392015 s\nbitcracker - total time for whole calculation: 35.3339 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.01986110101009933,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.857,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1203 1266 32.6636% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1089 1255 29.5683% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1257 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1265 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1078 1260 29.2696% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1267 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1261 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1240 1275 33.6682% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1269 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1207 1261 32.7722% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1078 1260 29.2696% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1087 1261 29.514% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1120 1264 30.41% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1270 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1255 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1146 1272 31.1159% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1133 1272 30.763% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1260 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1263 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1265 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1143 1266 31.0345% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1074 1260 29.161% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1030 1260 27.9663% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1267 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1167 1256 31.6861% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1266 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1081 1254 29.3511% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1152 1257 31.2788% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1259 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1120 1270 30.41% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1258 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1250 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1173 1262 31.849% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1258 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1260 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1053 1268 28.5908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1150 1262 31.2245% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1083 1255 29.4054% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1191 1275 32.3378% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1257 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1265 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1254 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1268 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.857 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.3816822413125012,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 238.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.5773502691896257,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.82,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.659770e-01   6.140630e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.537740e-01   7.545140e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.428890e-01   7.706370e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.751870e-01   8.239480e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.445740e-01   7.993200e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.477710e-01   7.736500e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.437530e-01   7.715590e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.472760e-01   8.079670e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.452180e-01   8.128680e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.482400e-01   7.831270e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.123e+07    1.123e+07    1.123e+07    0.000e+00       100.00\ncycleInit                           10    3.515e+06    3.515e+06    3.515e+06    0.000e+00       100.00\ncycleTracking                       10    7.712e+06    7.712e+06    7.712e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.990e+06    4.990e+06    4.990e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.999e+05    1.999e+05    1.999e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.370e+02    4.370e+02    4.370e+02    0.000e+00       100.00\nFigure Of Merit                 116.82 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.06429100507328683,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 715.867,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.46905 s\nsobelfilter - total time for whole calculation: 0.715867 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 7.977918870231779,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.8349,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.6e-05 s\ndl-cifar - total time for whole calculation: 17.8349 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.22567552666014504,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.64,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.64 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.02516611478423574,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1506,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073746 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0672 s\nProcessing elapsed time : 0.0806 s\nStoring    elapsed time : 0.0028 s\nTotal      elapsed time : 0.1506 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0010969655114602963,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 878.601544,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:55Z\",\"582838071\",\"8328221\",\"878.601544\",\"12.372412\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:58Z\",\"2069564172\",\"2264569\",\"61.848830\",\"0.067582\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:09:09Z\",\"540708680\",\"480041\",\"946.906050\",\"0.838795\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:09:12Z\",\"2067840114\",\"793172\",\"61.900344\",\"0.023726\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:09:23Z\",\"944456444\",\"577266\",\"542.110920\",\"0.330385\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:09:28Z\",\"2066030605\",\"488764\",\"61.954554\",\"0.014562\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.043050883300101,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.828645,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:10Z\",\"588310157\",\"2804723\",\"870.304966\",\"4.123156\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:14Z\",\"2070240019\",\"2377859\",\"61.828645\",\"0.070919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:24Z\",\"545066307\",\"769570\",\"939.336755\",\"1.325963\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:27Z\",\"2068899687\",\"440565\",\"61.868637\",\"0.013173\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:38Z\",\"954995230\",\"378691\",\"536.128399\",\"0.211529\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:44Z\",\"2070211288\",\"437052\",\"61.829440\",\"0.013020\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.18964742009933255,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 946.478078,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:07:25Z\",\"582207099\",\"1992452\",\"879.420365\",\"2.998489\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:07:29Z\",\"2080939869\",\"2245261\",\"61.510724\",\"0.066259\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:07:39Z\",\"540953319\",\"572041\",\"946.478078\",\"1.000366\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:07:42Z\",\"2079683907\",\"390612\",\"61.547817\",\"0.011482\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:07:53Z\",\"942879619\",\"676630\",\"543.017582\",\"0.389415\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:07:59Z\",\"2078178343\",\"1071385\",\"61.592417\",\"0.031706\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.2519775991127045,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.868637,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:10Z\",\"588310157\",\"2804723\",\"870.304966\",\"4.123156\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:14Z\",\"2070240019\",\"2377859\",\"61.828645\",\"0.070919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:24Z\",\"545066307\",\"769570\",\"939.336755\",\"1.325963\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:27Z\",\"2068899687\",\"440565\",\"61.868637\",\"0.013173\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:38Z\",\"954995230\",\"378691\",\"536.128399\",\"0.211529\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:44Z\",\"2070211288\",\"437052\",\"61.829440\",\"0.013020\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.1950239694576006,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 542.11092,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:55Z\",\"582838071\",\"8328221\",\"878.601544\",\"12.372412\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:58Z\",\"2069564172\",\"2264569\",\"61.848830\",\"0.067582\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:09:09Z\",\"540708680\",\"480041\",\"946.906050\",\"0.838795\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:09:12Z\",\"2067840114\",\"793172\",\"61.900344\",\"0.023726\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:09:23Z\",\"944456444\",\"577266\",\"542.110920\",\"0.330385\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:09:28Z\",\"2066030605\",\"488764\",\"61.954554\",\"0.014562\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.7432925770675527,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.82944,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:10Z\",\"588310157\",\"2804723\",\"870.304966\",\"4.123156\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:14Z\",\"2070240019\",\"2377859\",\"61.828645\",\"0.070919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:24Z\",\"545066307\",\"769570\",\"939.336755\",\"1.325963\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:27Z\",\"2068899687\",\"440565\",\"61.868637\",\"0.013173\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T18:08:38Z\",\"954995230\",\"378691\",\"536.128399\",\"0.211529\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T18:08:44Z\",\"2070211288\",\"437052\",\"61.829440\",\"0.013020\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.1839278039041425,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5323386",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T18:09:39.323826+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.773,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.808,11.773,3.06%,11.074,66.322,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3613248,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.801,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.845,11.801,2.58%,11.145,43.512,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.305601,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 22.894,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.059,22.894,7.09%,22.203,507.170,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.6348831000000001,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 25.097,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),25.272,25.097,2.34%,24.310,86.598,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5913647999999999,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 263.394,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),264.920,263.394,2.66%,259.771,858.276,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 7.046872000000001,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.175,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.111,133.175,1.77%,131.217,209.595,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.3737646999999997,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.896,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),6.014,5.896,16.37%,5.504,94.840,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.9844918000000001,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.152,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.136,3.152,3.11%,0.813,3.364,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.09752960000000001,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.186,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.196,2.186,13.46%,1.961,87.528,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.2955816,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.732,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.747,1.732,7.07%,1.620,19.051,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.12351290000000001,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 859.489,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.146,859.489,0.37%,823.759,870.790,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.1788402,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 28.846,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),28.997,28.846,5.51%,27.231,153.561,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5977347,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 305.058,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),307.064,305.058,2.60%,298.469,858.139,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.983664000000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.983,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.104,25.983,5.14%,24.224,139.963,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3417455999999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 29.284,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.339,29.284,4.10%,28.434,126.549,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2028989999999997,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 253.26,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),253.559,253.260,1.94%,249.298,685.271,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.9190446,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 256.281,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),256.408,256.281,1.48%,255.293,595.547,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.7948384000000006,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 6.007,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),6.049,6.007,17.59%,5.280,97.111,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 1.0640191,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.271,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.277,4.271,11.05%,3.708,43.711,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.47260850000000004,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.64,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.640,0.640,9.96%,0.525,1.325,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.06374400000000001,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.074,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.070,1.074,2.73%,0.937,1.142,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.029211000000000004,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.521,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),6.892,6.521,18.61%,6.206,67.241,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.2826012,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.118,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),31.252,31.118,4.35%,29.354,102.567,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.359462,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.448,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.798,6.448,15.94%,6.107,55.841,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.0836012,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 42.269,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),42.401,42.269,2.83%,40.677,100.764,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.1999483000000002,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 7.161,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.199,7.161,7.96%,6.801,55.176,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.5730404,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 37.548,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),37.604,37.548,3.38%,35.092,111.859,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.2710152,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 7.276,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.315,7.276,4.55%,6.874,29.167,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.33283250000000003,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 115.958,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),115.979,115.958,0.65%,113.956,154.728,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.7538635,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.359,17.197,136.51%,16.520,7510.195,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.937,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.842,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.093,16.937,143.22%,16.154,7757.566,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 24.4805946,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.340,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.681,17.474,190.58%,16.762,10662.346,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.120097999999,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.474,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.340,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.681,17.474,190.58%,16.762,10662.346,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 33.6964498,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125938.314,125825.000,3.71%,125520.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.189,21.929,102.14%,20.934,7165.769,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4672.3114494,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 22.166,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125920.695,125825.000,3.71%,125520.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.401,22.166,97.51%,21.178,6909.601,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 21.843215100000002,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6910.529,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6932.454,6910.529,0.91%,6883.981,7072.246,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 63.0853314,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 17792.969,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17774.565,17792.969,9.53%,15034.016,20083.974,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1693.9160444999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 50167.162,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50318.723,50167.162,5.33%,43032.184,61212.374,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2681.9879358999997,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2002.398,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2028.662,2002.398,13.66%,1443.921,4789.772,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 277.1152292,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7516.981,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7555.036,7516.981,1.73%,7410.190,7867.477,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 130.70212279999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 16917.412,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16465.023,16917.412,10.05%,12138.352,17925.471,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1654.7348115000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45247.246,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45137.598,45247.246,3.12%,35055.981,48342.237,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1408.2930576,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1410.857,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1522.280,1410.857,31.41%,881.592,5114.721,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 478.148148,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42031.69,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42023.512,42031.690,0.37%,41763.918,42324.394,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 155.48699440000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 116398.488,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116459.246,116398.488,0.29%,116059.568,117158.443,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 337.73181339999996,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.232,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.369,33.232,4.48%,31.353,88.986,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4949312000000001,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 50.939,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.028,50.939,2.56%,47.738,105.634,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3063168,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.067,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.303,271.067,2.50%,264.858,870.864,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 6.7825750000000005,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 311.118,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),311.548,311.118,1.82%,307.791,762.698,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.6701736,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 320.59736,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.418649 s\n320.597360 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.7688562817717544,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.2971,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00393696 s\nbitcracker - total time for whole calculation: 35.2971 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.029787972964492856,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.559,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1116 1260 30.3014% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1265 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1261 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1172 1270 31.8219% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1160 1283 31.4961% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1278 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1107 1264 30.057% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1200 1266 32.5821% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1270 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1163 1259 31.5775% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1262 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1261 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1143 1264 31.0345% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1257 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1141 1256 30.9802% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1259 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1094 1261 29.704% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1282 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1098 1267 29.8127% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1078 1254 29.2696% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1266 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1247 1280 33.8583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1264 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1262 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1258 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1267 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1267 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1265 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1037 1251 28.1564% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1268 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1086 1258 29.4868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1262 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1111 1275 30.1656% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1199 1267 32.555% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1165 1267 31.6318% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1278 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1277 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1129 1279 30.6544% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1266 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1260 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1209 1265 32.8265% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1053 1266 28.5908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1258 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1117 1267 30.3285% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1215 1270 32.9894% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.559 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.19934643212256495,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 117.94,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.730130e-01   6.035850e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.582420e-01   7.450910e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.505250e-01   7.604210e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.770530e-01   8.150900e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.479930e-01   7.877600e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.506700e-01   7.643880e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.499410e-01   7.757240e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.503000e-01   8.063450e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.495570e-01   8.042510e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.495820e-01   7.759850e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.120e+07    1.120e+07    1.120e+07    0.000e+00       100.00\ncycleInit                           10    3.557e+06    3.557e+06    3.557e+06    0.000e+00       100.00\ncycleTracking                       10    7.639e+06    7.639e+06    7.639e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.983e+06    4.983e+06    4.983e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.927e+05    1.927e+05    1.927e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.290e+02    4.290e+02    4.290e+02    0.000e+00       100.00\nFigure Of Merit                 117.94 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.04725815626252871,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 723.957,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.4826 s\nsobelfilter - total time for whole calculation: 0.723957 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 14.116976211875796,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.252,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.3e-05 s\ndl-cifar - total time for whole calculation: 24.252 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.04641942840377561,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.68,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.68 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.01732050807568866,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1519,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076014 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0672 s\nProcessing elapsed time : 0.0823 s\nStoring    elapsed time : 0.0024 s\nTotal      elapsed time : 0.1519 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0006506407098647827,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 877.845716,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:06Z\",\"583255552\",\"2644616\",\"877.845716\",\"3.964818\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:09Z\",\"2097586548\",\"2458597\",\"61.022579\",\"0.071394\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:20Z\",\"542490483\",\"464435\",\"943.795908\",\"0.805763\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:23Z\",\"2096316015\",\"967902\",\"61.059507\",\"0.028179\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:34Z\",\"955207061\",\"1598499\",\"536.010638\",\"0.896513\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:40Z\",\"2095642299\",\"302665\",\"61.079127\",\"0.008617\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.177903629472886,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.059176,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:43:20Z\",\"587720574\",\"4618990\",\"871.205262\",\"6.835221\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:43:24Z\",\"2096329213\",\"2407061\",\"61.059176\",\"0.070007\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:43:35Z\",\"544573112\",\"373376\",\"940.186320\",\"0.641763\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:43:38Z\",\"2092031605\",\"568138\",\"61.184548\",\"0.016589\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:43:49Z\",\"944630486\",\"975875\",\"542.011342\",\"0.560053\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:43:54Z\",\"2095385583\",\"196173\",\"61.086610\",\"0.005641\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.023167376610225665,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 940.354633,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:51Z\",\"582546077\",\"2908247\",\"878.917859\",\"4.362926\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:55Z\",\"2096113356\",\"2824762\",\"61.065488\",\"0.082167\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:45:05Z\",\"544476180\",\"711320\",\"940.354633\",\"1.226958\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:45:09Z\",\"2099245895\",\"682069\",\"60.974282\",\"0.019716\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:45:19Z\",\"962199404\",\"1317671\",\"532.115033\",\"0.728233\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:45:25Z\",\"2098598890\",\"314203\",\"60.993076\",\"0.009034\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.037147860013208,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.059507,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:06Z\",\"583255552\",\"2644616\",\"877.845716\",\"3.964818\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:09Z\",\"2097586548\",\"2458597\",\"61.022579\",\"0.071394\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:20Z\",\"542490483\",\"464435\",\"943.795908\",\"0.805763\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:23Z\",\"2096316015\",\"967902\",\"61.059507\",\"0.028179\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:34Z\",\"955207061\",\"1598499\",\"536.010638\",\"0.896513\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:40Z\",\"2095642299\",\"302665\",\"61.079127\",\"0.008617\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.10575943067641613,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 536.010638,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:06Z\",\"583255552\",\"2644616\",\"877.845716\",\"3.964818\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:09Z\",\"2097586548\",\"2458597\",\"61.022579\",\"0.071394\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:20Z\",\"542490483\",\"464435\",\"943.795908\",\"0.805763\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:23Z\",\"2096316015\",\"967902\",\"61.059507\",\"0.028179\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:34Z\",\"955207061\",\"1598499\",\"536.010638\",\"0.896513\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:40Z\",\"2095642299\",\"302665\",\"61.079127\",\"0.008617\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.98533045770491,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.079127,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:06Z\",\"583255552\",\"2644616\",\"877.845716\",\"3.964818\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:09Z\",\"2097586548\",\"2458597\",\"61.022579\",\"0.071394\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:20Z\",\"542490483\",\"464435\",\"943.795908\",\"0.805763\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:23Z\",\"2096316015\",\"967902\",\"61.059507\",\"0.028179\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:44:34Z\",\"955207061\",\"1598499\",\"536.010638\",\"0.896513\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:44:40Z\",\"2095642299\",\"302665\",\"61.079127\",\"0.008617\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.05197656370262671,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5323386",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T17:45:36.283591+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.826,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.862,11.826,3.31%,11.074,87.967,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3926322,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.834,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.879,11.834,2.80%,11.132,67.621,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.33261199999999996,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.395,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.540,21.395,7.77%,20.437,524.324,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.6736579999999996,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 21.613,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.732,21.613,2.63%,20.639,113.426,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5715515999999999,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 205.703,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),205.573,205.703,3.39%,198.811,826.284,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.9689247000000005,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 85.26,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),85.961,85.260,1.78%,84.434,107.672,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.5301058,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.197,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.281,5.197,20.09%,4.748,102.973,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.0609529,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.804,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.852,2.804,5.50%,0.478,3.236,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.15686,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.9,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.913,1.900,8.59%,1.694,35.871,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.16432670000000002,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.401,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.416,1.401,30.77%,1.349,125.239,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.43570319999999996,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 861.253,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.953,861.253,0.37%,821.339,871.393,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.1855261,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.553,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.568,26.553,6.20%,24.913,150.353,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.647216,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 30.728,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),30.870,30.728,4.77%,29.224,148.091,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4724989999999998,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 267.823,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),269.159,267.823,2.62%,259.580,790.918,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.0519658000000005,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 255.043,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),255.133,255.043,1.58%,253.713,632.418,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.031101400000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.824,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.900,25.824,5.15%,24.057,139.234,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.33385,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.586,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.646,28.586,3.85%,27.748,120.866,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.102871,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 252.938,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),253.096,252.938,1.92%,245.347,669.008,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.859443199999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 251.477,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),251.557,251.477,1.03%,250.410,489.736,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 2.5910371,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.317,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.357,5.317,16.95%,4.577,87.098,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.9080115,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.187,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.211,4.187,12.53%,3.655,50.733,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5276383,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.577,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.591,1.577,6.45%,1.348,2.217,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.1026195,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 0.982,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.973,0.982,1.47%,0.937,1.028,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0143031,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.222,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.915,13.222,33.33%,12.303,245.664,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 4.6378695,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.593,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.170,14.593,26.82%,13.611,160.073,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 4.068594,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 77.427,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.954,77.427,5.14%,76.301,208.152,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 4.0068356,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 80.18,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.618,80.180,4.45%,79.150,156.501,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.587501,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.786,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.635,13.786,4.63%,12.572,42.495,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.6313005,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 14.984,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),14.937,14.984,6.23%,14.007,94.488,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.9305751,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 78.193,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),78.215,78.193,0.64%,77.324,97.735,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.500576,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 80.095,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),80.139,80.095,0.70%,79.335,112.992,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.5609729999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.197,14.043,212.33%,13.245,9528.629,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.29206800000003,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 13.964,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.128,13.964,223.17%,13.228,9969.027,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 31.5294576,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.070,13.938,151.03%,13.209,6710.870,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.096,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.860,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.241,14.096,162.68%,13.343,7314.911,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.1672588,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98501.177,97528.000,297.29%,96454.000,92701757.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.363,20.325,4005.94%,18.136,295984.690,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 292834.1491033,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.353,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98487.641,97528.000,302.13%,96736.000,94194907.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.399,20.353,4088.30%,17.719,302536.612,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 956.6213170000001,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5445.243,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5441.134,5445.243,0.20%,5416.400,5455.312,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 10.882268,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11135.029,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11288.296,11135.029,6.46%,10457.580,12912.101,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 729.2239216,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17738.264,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18068.333,17738.264,7.59%,15806.282,23345.793,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1371.3864746999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 764.562,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),754.864,764.562,7.21%,494.463,1489.514,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.4256944,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6005.094,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),5999.639,6005.094,1.85%,5821.893,6181.635,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 110.99332150000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6509.595,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6544.620,6509.595,3.04%,6175.566,6939.111,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 198.956448,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17787.691,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18095.450,17787.691,7.46%,15588.591,23364.285,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1349.92057,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 769.466,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),760.209,769.466,7.03%,536.216,1467.610,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 53.442692699999995,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29750.974,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29711.601,29750.974,0.42%,29485.998,29913.508,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 124.78872419999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 87303.378,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),87072.082,87303.378,0.60%,85759.214,87519.559,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 522.432492,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 25.998,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.066,25.998,5.80%,24.436,137.093,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5118279999999997,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 244.697,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),244.927,244.697,2.11%,240.992,743.357,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.167959699999999,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 325.554324,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.412274 s\n325.554324 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 2.2038719795495854,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3428,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.0039814 s\nbitcracker - total time for whole calculation: 35.3428 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.04749550855958351,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.794,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1104 1271 29.9756% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1101 1258 29.8941% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1186 1260 32.202% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1263 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1260 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1268 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1254 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1249 1285 33.9126% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1129 1272 30.6544% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1267 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1048 1270 28.4551% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1262 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1269 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1254 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1268 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1128 1263 30.6272% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1135 1259 30.8173% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1270 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1131 1265 30.7087% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1267 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1141 1272 30.9802% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1278 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1267 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1239 1273 33.6411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1259 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1136 1266 30.8444% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1205 1277 32.7179% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1269 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1266 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1264 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1261 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1273 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1269 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1265 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1259 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1272 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1216 1258 33.0166% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1122 1263 30.4643% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1251 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1276 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1252 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1262 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.794 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.10488247390929982,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 238.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 2.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.74,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.639360e-01   6.117190e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.532500e-01   7.537440e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.417720e-01   7.696290e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.728310e-01   8.233900e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.438430e-01   8.097760e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.468290e-01   7.888600e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.439030e-01   7.879700e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.482590e-01   8.136590e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.436300e-01   7.923440e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.462640e-01   7.657730e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.122e+07    1.122e+07    1.122e+07    0.000e+00       100.00\ncycleInit                           10    3.505e+06    3.505e+06    3.505e+06    0.000e+00       100.00\ncycleTracking                       10    7.717e+06    7.717e+06    7.717e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.989e+06    4.989e+06    4.989e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.900e+05    1.900e+05    1.900e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.320e+02    4.320e+02    4.320e+02    0.000e+00       100.00\nFigure Of Merit                 116.74 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.14011899704655684,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 729.344,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47474 s\nsobelfilter - total time for whole calculation: 0.729344 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 6.456440482185232,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.5153,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.1e-05 s\ndl-cifar - total time for whole calculation: 17.5153 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.11155823591290771,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.66,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.66 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.03511884584284239,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.15,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.074357 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0671 s\nProcessing elapsed time : 0.0804 s\nStoring    elapsed time : 0.0026 s\nTotal      elapsed time : 0.1500 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0005941380311005125,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 887.045286,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:15:23Z\",\"577206788\",\"2646334\",\"887.045286\",\"4.044225\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:15:26Z\",\"2068481869\",\"2454266\",\"61.881202\",\"0.073317\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:15:37Z\",\"548087742\",\"288147\",\"934.157205\",\"0.491128\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:15:40Z\",\"2067146636\",\"627543\",\"61.921108\",\"0.018793\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:15:50Z\",\"942710524\",\"544854\",\"543.114905\",\"0.313527\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:15:56Z\",\"2066859563\",\"954568\",\"61.929714\",\"0.028529\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 6.111175764963825,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.755474,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:52Z\",\"577133338\",\"2019218\",\"887.151995\",\"3.090754\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:56Z\",\"2072693452\",\"2649295\",\"61.755474\",\"0.078797\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:07Z\",\"545110373\",\"1416704\",\"939.264383\",\"2.433737\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:10Z\",\"2071702700\",\"472198\",\"61.784930\",\"0.014084\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:20Z\",\"954517728\",\"913509\",\"536.396926\",\"0.513453\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:26Z\",\"2071161008\",\"444062\",\"61.801088\",\"0.013181\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.19042616684426478,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 939.264383,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:52Z\",\"577133338\",\"2019218\",\"887.151995\",\"3.090754\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:56Z\",\"2072693452\",\"2649295\",\"61.755474\",\"0.078797\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:07Z\",\"545110373\",\"1416704\",\"939.264383\",\"2.433737\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:10Z\",\"2071702700\",\"472198\",\"61.784930\",\"0.014084\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:20Z\",\"954517728\",\"913509\",\"536.396926\",\"0.513453\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:26Z\",\"2071161008\",\"444062\",\"61.801088\",\"0.013181\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 4.325743019303676,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.78493,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:52Z\",\"577133338\",\"2019218\",\"887.151995\",\"3.090754\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:56Z\",\"2072693452\",\"2649295\",\"61.755474\",\"0.078797\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:07Z\",\"545110373\",\"1416704\",\"939.264383\",\"2.433737\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:10Z\",\"2071702700\",\"472198\",\"61.784930\",\"0.014084\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:20Z\",\"954517728\",\"913509\",\"536.396926\",\"0.513453\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:26Z\",\"2071161008\",\"444062\",\"61.801088\",\"0.013181\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.21759188555029468,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.964539,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:07Z\",\"584140565\",\"2503713\",\"876.514177\",\"3.738177\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:11Z\",\"2081066137\",\"2404110\",\"61.507001\",\"0.070939\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:22Z\",\"543088110\",\"797891\",\"942.758414\",\"1.386465\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:25Z\",\"2081467891\",\"448561\",\"61.495066\",\"0.013181\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:35Z\",\"951735918\",\"622118\",\"537.964539\",\"0.350878\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:41Z\",\"2079796349\",\"829040\",\"61.544495\",\"0.024460\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.514610511758185,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.801088,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:16:52Z\",\"577133338\",\"2019218\",\"887.151995\",\"3.090754\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:16:56Z\",\"2072693452\",\"2649295\",\"61.755474\",\"0.078797\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:07Z\",\"545110373\",\"1416704\",\"939.264383\",\"2.433737\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:10Z\",\"2071702700\",\"472198\",\"61.784930\",\"0.014084\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T17:17:20Z\",\"954517728\",\"913509\",\"536.396926\",\"0.513453\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T17:17:26Z\",\"2071161008\",\"444062\",\"61.801088\",\"0.013181\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.19611998601451439,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5323386",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T17:17:37.174045+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.917,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.951,11.917,3.19%,11.015,64.870,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3812369,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.864,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.913,11.864,15.70%,11.048,589.872,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.870341,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.324,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.487,23.324,3.10%,22.532,177.099,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.728097,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.278,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.445,24.278,2.28%,23.458,63.186,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5573459999999999,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 259.694,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),261.192,259.694,2.54%,256.158,806.585,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.6342768,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 134.042,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.972,134.042,1.73%,131.926,181.525,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.3350156,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.756,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.882,5.756,15.13%,5.384,81.007,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.8899466,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.123,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.108,3.123,3.09%,0.839,3.328,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.09603719999999999,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.147,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.163,2.147,5.64%,1.978,17.046,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.12199319999999998,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.703,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.723,1.703,10.16%,1.618,46.130,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.1750568,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.664,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.023,860.664,0.50%,811.016,872.299,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 4.300115,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 29.389,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.532,29.389,2.28%,27.904,51.307,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 0.6733296,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 304.042,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),305.771,304.042,2.47%,297.300,835.602,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.552543700000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.138,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.159,26.138,5.08%,24.268,136.406,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3288772,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.899,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.967,28.899,4.90%,28.024,148.849,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.419383,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 245.529,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),245.659,245.529,1.91%,239.106,654.901,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.6920869,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 243.537,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),243.599,243.537,1.37%,240.873,555.216,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.3373063,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 6.034,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),6.062,6.034,12.71%,4.974,72.910,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.7704802000000002,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.313,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.341,4.313,11.13%,3.801,44.698,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.48315330000000006,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.662,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.662,0.662,9.79%,0.525,1.280,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0648098,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.097,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.085,1.097,2.10%,1.005,1.142,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.022785,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 6.623,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.047,6.623,30.61%,6.133,153.918,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 2.1570867,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 31.88,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),32.047,31.880,5.68%,30.189,127.697,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.8202695999999998,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 6.558,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),6.871,6.558,18.61%,6.068,53.608,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.2786931,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 43.251,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),43.411,43.251,3.82%,41.640,156.916,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.6583002,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 7.002,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),7.071,7.002,5.58%,6.758,30.716,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.3945618,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 38.802,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),38.804,38.802,2.78%,36.403,68.795,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.0787512,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 7.215,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),7.252,7.215,4.58%,6.758,29.151,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.3321416,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 114.059,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),114.130,114.059,0.99%,111.991,142.608,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 1.1298869999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.794,16.626,152.39%,15.874,8108.612,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.626,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.794,16.626,152.39%,15.874,8108.612,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 25.592376599999998,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.335,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.232,17.065,125.11%,16.341,6833.758,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1198995,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.397,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.340,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.580,17.397,125.45%,16.699,6990.259,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.054109999999998,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125935.402,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),22.097,21.823,90.83%,20.956,6343.104,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4672.2034142,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.593,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125952.822,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.904,21.593,96.68%,20.731,6693.931,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 21.176787200000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6918.635,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6950.458,6918.635,1.23%,6884.760,7137.356,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 85.4906334,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 17865.982,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17922.038,17865.982,7.52%,15387.681,19857.344,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1347.7372575999998,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 50758.729,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50864.931,50758.729,4.92%,42377.527,59494.560,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2502.5546052,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 1985.201,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2014.000,1985.201,13.68%,1408.882,4906.668,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 275.5152,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7532.586,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7555.642,7532.586,1.71%,7375.723,7801.838,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 129.2014782,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 17350.969,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16710.525,17350.969,8.58%,13968.808,18405.479,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1433.7630450000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45287.302,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45204.855,45287.302,2.96%,39523.131,48758.799,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1338.0637080000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1401.484,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1515.290,1401.484,31.71%,804.593,5400.416,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 480.49845899999997,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42445.965,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42488.612,42445.965,0.37%,42286.173,42769.134,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 157.2078644,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 116216.726,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116129.303,116216.726,0.52%,115093.010,117083.259,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 603.8723755999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.337,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.455,33.337,3.52%,31.378,63.243,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.177616,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.949,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.982,51.949,2.40%,48.516,97.416,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.247568,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 271.151,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.392,271.151,2.82%,264.462,988.780,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.6532544,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 312.591,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),313.215,312.591,1.96%,308.771,794.700,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 6.1390139999999995,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 312.596501,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.429364 s\n312.596501 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 4.452448964158814,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3597,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00389723 s\nbitcracker - total time for whole calculation: 35.3597 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.020115251261998063,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.676,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1278 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1271 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1260 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1139 1267 30.9259% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1075 1263 29.1882% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1257 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1254 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1256 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1086 1255 29.4868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1268 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1255 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1263 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1213 1249 32.9351% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1182 1265 32.0934% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1257 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1258 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1259 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1254 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1094 1274 29.704% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1117 1270 30.3285% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1099 1278 29.8398% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1156 1256 31.3875% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1271 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1251 1286 33.9669% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1034 1257 28.0749% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1112 1253 30.1928% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1105 1269 30.0027% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1269 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1240 1275 33.6682% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1113 1263 30.2199% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1260 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1264 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1264 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1176 1270 31.9305% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1136 1275 30.8444% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1093 1267 29.6769% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1114 1265 30.2471% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1048 1265 28.4551% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1270 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1259 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1072 1271 29.1067% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1267 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1102 1255 29.9213% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1266 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.676 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.13779090439261327,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.5773502691896257,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 118.4,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   4.043160e-01   6.044710e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.844950e-01   7.470580e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.778950e-01   7.623340e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   4.052590e-01   8.161930e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.760390e-01   7.892650e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.773510e-01   7.650020e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.766900e-01   7.765230e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.779110e-01   8.070070e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.760730e-01   7.832110e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.768130e-01   7.578610e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.144e+07    1.144e+07    1.144e+07    0.000e+00       100.00\ncycleInit                           10    3.833e+06    3.833e+06    3.833e+06    0.000e+00       100.00\ncycleTracking                       10    7.609e+06    7.609e+06    7.609e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.991e+06    4.991e+06    4.991e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.973e+05    1.973e+05    1.973e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.160e+02    4.160e+02    4.160e+02    0.000e+00       100.00\nFigure Of Merit                 118.40 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.35369478367654744,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 708.964,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.46859 s\nsobelfilter - total time for whole calculation: 0.708964 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 10.214251583849977,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.2598,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.3e-05 s\ndl-cifar - total time for whole calculation: 24.2598 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.08699323728505169,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.68,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.68 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.020000000000000018,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1517,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076325 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0668 s\nProcessing elapsed time : 0.0825 s\nStoring    elapsed time : 0.0023 s\nTotal      elapsed time : 0.1517 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0007549834435270764,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 878.489475,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:51:38Z\",\"582827873\",\"2606939\",\"878.489475\",\"3.908916\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:51:42Z\",\"2095998617\",\"2668868\",\"61.068822\",\"0.077655\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:51:53Z\",\"544277748\",\"653027\",\"940.697265\",\"1.127919\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:51:56Z\",\"2093449892\",\"758199\",\"61.143099\",\"0.022136\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:07Z\",\"945109493\",\"291619\",\"541.736213\",\"0.165278\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:12Z\",\"2093171940\",\"303916\",\"61.151212\",\"0.008777\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.375943996115218,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.110767,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:09Z\",\"579290898\",\"2754742\",\"883.855088\",\"4.178592\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:13Z\",\"2094559587\",\"2476197\",\"61.110767\",\"0.072132\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:23Z\",\"543455390\",\"422297\",\"942.120099\",\"0.730446\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:26Z\",\"2095473534\",\"824300\",\"61.084053\",\"0.024004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:37Z\",\"953703000\",\"899820\",\"536.855146\",\"0.505727\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:43Z\",\"2096099729\",\"1208477\",\"61.065813\",\"0.035207\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.02865009787650659,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 942.120099,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:09Z\",\"579290898\",\"2754742\",\"883.855088\",\"4.178592\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:13Z\",\"2094559587\",\"2476197\",\"61.110767\",\"0.072132\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:23Z\",\"543455390\",\"422297\",\"942.120099\",\"0.730446\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:26Z\",\"2095473534\",\"824300\",\"61.084053\",\"0.024004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:53:37Z\",\"953703000\",\"899820\",\"536.855146\",\"0.505727\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:53:43Z\",\"2096099729\",\"1208477\",\"61.065813\",\"0.035207\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.136334650131304,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.091059,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:24Z\",\"583406498\",\"3013720\",\"877.622825\",\"4.504503\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:27Z\",\"2094120333\",\"2763866\",\"61.123602\",\"0.080548\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:38Z\",\"542980762\",\"315456\",\"942.943422\",\"0.547026\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:41Z\",\"2095233099\",\"603900\",\"61.091059\",\"0.017610\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:52Z\",\"948714399\",\"556079\",\"539.677843\",\"0.316023\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:58Z\",\"2094632667\",\"929550\",\"61.108576\",\"0.027062\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.03225852794740256,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 539.677843,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:24Z\",\"583406498\",\"3013720\",\"877.622825\",\"4.504503\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:27Z\",\"2094120333\",\"2763866\",\"61.123602\",\"0.080548\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:38Z\",\"542980762\",\"315456\",\"942.943422\",\"0.547026\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:41Z\",\"2095233099\",\"603900\",\"61.091059\",\"0.017610\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:52Z\",\"948714399\",\"556079\",\"539.677843\",\"0.316023\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:58Z\",\"2094632667\",\"929550\",\"61.108576\",\"0.027062\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 2.450487042378804,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.108576,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:24Z\",\"583406498\",\"3013720\",\"877.622825\",\"4.504503\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:27Z\",\"2094120333\",\"2763866\",\"61.123602\",\"0.080548\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:38Z\",\"542980762\",\"315456\",\"942.943422\",\"0.547026\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:41Z\",\"2095233099\",\"603900\",\"61.091059\",\"0.017610\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:52:52Z\",\"948714399\",\"556079\",\"539.677843\",\"0.316023\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:52:58Z\",\"2094632667\",\"929550\",\"61.108576\",\"0.027062\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.04269951573886334,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5323386",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T16:53:53.913211+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.671,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.706,11.671,2.75%,10.954,49.602,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.321915,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.642,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.727,11.642,4.91%,10.961,29.323,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.5757957,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.316,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.460,21.316,10.99%,20.387,750.081,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.358454,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 21.722,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.858,21.722,7.95%,20.803,545.292,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.737711,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 202.708,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),203.938,202.708,3.33%,199.471,804.501,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.7911354,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 85.152,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),85.868,85.152,1.97%,84.303,162.470,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.6915995999999998,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.201,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.279,5.201,15.96%,4.817,78.453,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.8425284000000001,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.82,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.809,2.820,3.04%,0.822,3.169,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.0853936,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.901,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.914,1.901,13.15%,1.711,71.437,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.251691,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.4,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.416,1.400,30.10%,1.344,122.613,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.426216,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 803.763,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),803.377,803.763,0.39%,770.304,824.568,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.1331703,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 27.154,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),27.176,27.154,5.55%,25.268,154.390,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.508268,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 29.962,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.992,29.962,4.32%,28.393,145.218,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2956544,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 265.586,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),266.727,265.586,3.06%,255.693,778.991,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 8.1618462,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 254.342,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),254.442,254.342,1.66%,253.014,651.763,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.2237372,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 25.935,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.944,25.935,5.25%,24.096,144.128,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3620599999999998,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.679,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.739,28.679,4.65%,27.756,136.111,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3363635000000003,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 246.983,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.146,246.983,1.62%,242.707,615.547,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.0037652,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 248.4,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),248.498,248.400,1.68%,247.577,656.670,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.174766399999999,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.28,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.323,5.280,10.67%,4.873,48.525,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5679641000000001,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.278,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.280,4.278,12.13%,3.737,50.245,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.5191640000000001,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.577,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.576,1.577,6.41%,1.348,2.194,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.10102160000000002,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 0.96,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.967,0.960,1.73%,0.914,1.005,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0167291,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "value": 13.19,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),13.835,13.190,26.69%,12.364,133.598,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.6925615000000005,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "value": 14.395,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.006,14.395,23.78%,13.564,86.934,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 3.5684268,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "value": 77.219,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),77.732,77.219,4.51%,76.232,161.108,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.5057132,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "value": 81.317,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=0",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=0 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),81.796,81.317,4.70%,77.491,170.731,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 3.844412,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "value": 13.841,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=0),14.783,13.841,11.49%,12.973,70.983,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 1.6985667,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "value": 15.12,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=4",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=4 KernelExecutionTime=1 MeasureCompletionTime=1),15.057,15.120,3.94%,13.925,45.574,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 4",
          "stddev": 0.5932457999999999,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "value": 80.571,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=0",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=0),80.576,80.571,0.56%,79.742,99.999,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.4512256,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "value": 78.859,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SubmitGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--NumKernels=32",
            "--MeasureCompletionTime=1",
            "--InOrderQueue=1",
            "--Profiling=0",
            "--KernelExecutionTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitGraph(api=sycl Profiling=0 InOrderQueue=1 NumKernels=32 KernelExecutionTime=1 MeasureCompletionTime=1),78.878,78.859,0.63%,78.036,103.594,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitGraph 32",
          "stddev": 0.4969314,
          "name": "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.184,14.002,247.12%,13.316,11098.181,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.002,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.184,14.002,247.12%,13.316,11098.181,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 35.0515008,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.874,95034.000,0.38%,95034.000,101508.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.170,13.978,164.54%,13.196,7357.169,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2921212,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 13.978,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.874,95034.000,0.38%,95034.000,101508.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.170,13.978,164.54%,13.196,7357.169,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.315317999999998,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98651.696,97528.000,326.72%,96668.000,102021610.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),24.528,20.829,4545.46%,18.640,352585.298,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 322314.8211712,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.317,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98620.601,97528.000,321.89%,96730.000,100483257.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.801,20.317,4430.88%,18.504,333517.711,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1054.5937488,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5552.283,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5551.155,5552.283,0.13%,5538.107,5561.304,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 7.2165015,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11226.516,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11150.741,11226.516,3.71%,10662.073,11993.141,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 413.6924911,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17822.612,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18112.491,17822.612,7.08%,15892.776,23169.751,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1282.3643628000002,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 788.308,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),777.834,788.308,7.08%,537.385,1349.033,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 55.070647199999996,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 5963.265,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),5985.715,5963.265,1.14%,5906.279,6144.171,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 68.237151,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6433.539,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6400.155,6433.539,1.73%,6105.135,6517.698,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 110.7226815,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17687.116,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),17993.989,17687.116,7.06%,15830.150,23043.186,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1270.3756234,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 775.357,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),765.165,775.357,6.94%,499.258,1325.633,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 53.102451,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29688.047,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29740.803,29688.047,0.39%,29619.450,29927.463,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 115.9891317,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 87524.272,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),87494.281,87524.272,0.24%,87064.237,87862.433,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 209.98627439999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.248,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.290,26.248,5.34%,24.504,139.117,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4038859999999997,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 266.07,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),266.235,266.070,2.07%,259.759,771.682,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.5110645,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 318.574291,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.421307 s\n318.574291 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.05330810825963,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3326,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00392826 s\nbitcracker - total time for whole calculation: 35.3326 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.04174126655161761,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.498,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1095 1261 29.7312% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1098 1267 29.8127% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1259 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1270 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1265 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1256 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1268 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1264 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1268 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1262 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1269 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1097 1272 29.7855% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1269 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1243 1275 33.7497% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1271 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1163 1272 31.5775% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1244 1276 33.7768% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1188 1265 32.2563% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1040 1276 28.2379% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1267 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1276 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1215 1263 32.9894% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1127 1262 30.6001% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1116 1258 30.3014% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1267 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1258 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1246 1278 33.8311% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1257 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1264 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1254 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1151 1262 31.2517% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1263 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1282 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1260 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1244 1278 33.7768% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1267 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1258 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1255 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1216 1255 33.0166% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1256 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1176 1264 31.9305% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1243 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1259 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1160 1259 31.4961% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.498 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0726246055640543,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 237.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 116.67,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.610860e-01   6.132460e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.519650e-01   7.542330e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.388000e-01   7.703110e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.727460e-01   8.249330e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.418000e-01   7.971620e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.463080e-01   7.714030e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.440110e-01   7.837210e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.466910e-01   8.111830e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.435950e-01   8.133760e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.470640e-01   7.817680e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.122e+07    1.122e+07    1.122e+07    0.000e+00       100.00\ncycleInit                           10    3.494e+06    3.494e+06    3.494e+06    0.000e+00       100.00\ncycleTracking                       10    7.721e+06    7.721e+06    7.721e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.979e+06    4.979e+06    4.979e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.966e+05    1.966e+05    1.966e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.360e+02    4.360e+02    4.360e+02    0.000e+00       100.00\nFigure Of Merit                 116.67 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.030000000000001137,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 720.737,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47266 s\nsobelfilter - total time for whole calculation: 0.720737 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 36.00885737333715,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 17.6474,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 7.9e-05 s\ndl-cifar - total time for whole calculation: 17.6474 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.25357575462439935,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.63,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero V2\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.63 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.026457513110645845,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1494,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.073877 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0670 s\nProcessing elapsed time : 0.0801 s\nStoring    elapsed time : 0.0022 s\nTotal      elapsed time : 0.1494 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0002886751345948131,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 874.625929,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:06Z\",\"585404957\",\"2951887\",\"874.625929\",\"4.384711\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:10Z\",\"2068932183\",\"2239410\",\"61.867721\",\"0.066872\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:20Z\",\"551649808\",\"2480204\",\"928.139988\",\"4.156805\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:23Z\",\"2066436904\",\"364124\",\"61.942372\",\"0.010828\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:34Z\",\"952687464\",\"746732\",\"537.427300\",\"0.421064\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:40Z\",\"2068124408\",\"916820\",\"61.891838\",\"0.027385\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 5.293219512365068,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.790099,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:36Z\",\"587358354\",\"2472959\",\"871.711840\",\"3.655896\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:40Z\",\"2071532845\",\"3031841\",\"61.790099\",\"0.090315\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:50Z\",\"539560249\",\"303408\",\"948.921143\",\"0.532109\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:53Z\",\"2067795139\",\"1015664\",\"61.901695\",\"0.030326\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:24:04Z\",\"959204124\",\"319896\",\"533.775901\",\"0.177661\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:24:10Z\",\"2066169912\",\"407704\",\"61.950376\",\"0.012071\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.16414162458377354,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 941.609969,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:51Z\",\"580523279\",\"3095087\",\"881.982827\",\"4.670060\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:54Z\",\"2079522216\",\"2468358\",\"61.552670\",\"0.072939\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:05Z\",\"543749985\",\"543098\",\"941.609969\",\"0.939569\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:08Z\",\"2078209152\",\"538373\",\"61.591494\",\"0.015895\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:19Z\",\"965821736\",\"410539\",\"530.118606\",\"0.223980\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:25Z\",\"2076081213\",\"682396\",\"61.654626\",\"0.020265\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 10.541584768056005,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.901695,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:36Z\",\"587358354\",\"2472959\",\"871.711840\",\"3.655896\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:40Z\",\"2071532845\",\"3031841\",\"61.790099\",\"0.090315\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:50Z\",\"539560249\",\"303408\",\"948.921143\",\"0.532109\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:53Z\",\"2067795139\",\"1015664\",\"61.901695\",\"0.030326\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:24:04Z\",\"959204124\",\"319896\",\"533.775901\",\"0.177661\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:24:10Z\",\"2066169912\",\"407704\",\"61.950376\",\"0.012071\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.19191779907641052,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 533.775901,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:36Z\",\"587358354\",\"2472959\",\"871.711840\",\"3.655896\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:40Z\",\"2071532845\",\"3031841\",\"61.790099\",\"0.090315\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:23:50Z\",\"539560249\",\"303408\",\"948.921143\",\"0.532109\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:23:53Z\",\"2067795139\",\"1015664\",\"61.901695\",\"0.030326\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:24:04Z\",\"959204124\",\"319896\",\"533.775901\",\"0.177661\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:24:10Z\",\"2066169912\",\"407704\",\"61.950376\",\"0.012071\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.6543473963636974,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.891838,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:06Z\",\"585404957\",\"2951887\",\"874.625929\",\"4.384711\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:10Z\",\"2068932183\",\"2239410\",\"61.867721\",\"0.066872\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:20Z\",\"551649808\",\"2480204\",\"928.139988\",\"4.156805\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:23Z\",\"2066436904\",\"364124\",\"61.942372\",\"0.010828\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:22:34Z\",\"952687464\",\"746732\",\"537.427300\",\"0.421064\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:22:40Z\",\"2068124408\",\"916820\",\"61.891838\",\"0.027385\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.15661220306221274,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "5323386",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T16:24:20.648523+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 12.104,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.146,12.104,3.65%,11.241,95.634,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.44332900000000003,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 12.214,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.252,12.214,2.57%,11.373,26.810,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.3148764,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.406,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.568,23.406,8.84%,22.494,660.481,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.0834112,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.326,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.493,24.326,6.90%,23.416,529.669,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.690017,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 258.368,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),259.877,258.368,2.55%,255.078,800.073,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.6268635,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.66,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.592,133.660,1.76%,131.581,201.709,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.3688192000000003,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.778,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.931,5.778,14.37%,5.322,65.035,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.8522847,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.169,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.154,3.169,3.30%,0.399,3.406,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.10408200000000001,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.167,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.177,2.167,6.26%,1.940,22.235,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.13628020000000002,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.71,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.725,1.710,5.66%,1.606,7.705,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.09763500000000001,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 856.855,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),856.329,856.855,0.34%,818.667,865.697,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 2.9115186,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 29.018,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.163,29.018,10.77%,27.171,290.878,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 3.1408550999999996,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 307.808,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),309.584,307.808,2.73%,298.132,850.603,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 8.451643200000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.311,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.335,26.311,6.00%,24.548,159.449,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5801,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.691,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.740,28.691,5.05%,27.581,151.731,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4513699999999998,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 248.335,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),248.548,248.335,1.85%,243.870,670.343,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.5981380000000005,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 248.053,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),248.151,248.053,1.89%,247.146,704.465,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.6900539000000006,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.918,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.956,5.918,13.45%,5.229,63.461,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.801082,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.312,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.329,4.312,8.35%,3.734,33.194,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.36147149999999995,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.617,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.621,0.617,10.17%,0.480,1.142,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0631557,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.028,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.039,1.028,2.35%,0.960,1.120,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.024416499999999997,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.903,16.692,219.99%,16.019,11775.037,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.381,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.841,107454.000,6.03%,107310.000,2155628.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.548,16.381,143.49%,15.744,7524.600,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.744725199999998,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.508,17.336,120.25%,16.688,6655.306,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4501.1199392,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.336,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.336,113308.000,3.97%,113308.000,1530849.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.508,17.336,120.25%,16.688,6655.306,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 21.053369999999997,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125964.331,125825.000,3.76%,125520.000,1618115.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.797,21.496,100.91%,20.511,6955.612,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4736.258845599999,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.421,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125963.002,125825.000,3.71%,125216.000,1595135.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.726,21.421,103.90%,20.380,7139.055,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.573314000000003,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6896.678,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6905.239,6896.678,0.75%,6848.204,7007.530,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 51.789292499999995,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 18550.951,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18261.312,18550.951,9.17%,15527.721,20587.210,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1674.5623104000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 50245.77,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50421.702,50245.770,5.35%,42020.530,59324.564,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2697.561057,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 2006.904,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2030.766,2006.904,13.46%,1385.089,4845.018,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 273.3411036,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7540.077,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7549.187,7540.077,2.04%,7291.367,7807.063,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 154.0034148,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 16869.864,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16901.759,16869.864,2.62%,15967.592,17725.804,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 442.8260858,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45890.993,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45714.310,45890.993,3.17%,38253.456,49260.368,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1449.143627,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1402.469,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1524.581,1402.469,31.97%,750.135,5559.393,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 487.40854569999993,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42185.583,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42163.945,42185.583,0.67%,41764.088,42688.671,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 282.4984315,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 116671.94,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),116692.993,116671.940,0.52%,115879.058,117697.081,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 606.8035636,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.387,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.501,33.387,3.89%,31.096,89.308,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3031889,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 52.424,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),52.492,52.424,2.45%,48.736,95.849,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.286054,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 270.984,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.229,270.984,3.01%,264.862,1032.136,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 8.163992899999998,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 310.902,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),311.571,310.902,1.84%,307.554,701.695,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.7329064,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 314.767819,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.426402 s\n314.767819 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.918051130466049,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3859,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00394442 s\nbitcracker - total time for whole calculation: 35.3859 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.024319813595778048,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.903,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1215 1272 32.9894% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1134 1260 30.7901% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1212 1267 32.908% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1252 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1273 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1259 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1140 1265 30.953% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1214 1252 32.9623% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1104 1262 29.9756% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1238 1273 33.6139% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1247 1282 33.8583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1093 1257 29.6769% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1265 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1097 1256 29.7855% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1140 1258 30.953% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1245 1279 33.804% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1270 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1063 1258 28.8623% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1180 1265 32.0391% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1146 1260 31.1159% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1258 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1242 1279 33.7225% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1256 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1236 1267 33.5596% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1228 1261 33.3424% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1129 1263 30.6544% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1267 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1261 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1223 1257 33.2066% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1266 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1126 1261 30.5729% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1190 1266 32.3106% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1194 1266 32.4192% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1203 1236 32.6636% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1129 1272 30.6544% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1269 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1124 1269 30.5186% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1265 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1260 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1261 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1055 1261 28.6451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1109 1259 30.1113% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1110 1257 30.1385% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1271 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1096 1259 29.7583% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1025 1267 27.8306% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.903 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 0.0765441049330341,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 241.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.51657508881031,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 118.62,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.653650e-01   6.038240e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.527460e-01   7.440700e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.437590e-01   7.612410e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.719320e-01   8.147270e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.425770e-01   7.874720e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.476640e-01   7.628950e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.432370e-01   7.752770e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.464970e-01   8.050510e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.433330e-01   7.818720e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.472850e-01   7.578860e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.110e+07    1.110e+07    1.110e+07    0.000e+00       100.00\ncycleInit                           10    3.504e+06    3.504e+06    3.504e+06    0.000e+00       100.00\ncycleTracking                       10    7.594e+06    7.594e+06    7.594e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.978e+06    4.978e+06    4.978e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    1.961e+05    1.961e+05    1.961e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.290e+02    4.290e+02    4.290e+02    0.000e+00       100.00\nFigure Of Merit                 118.62 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 0.5054041287260457,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 721.888,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.47584 s\nsobelfilter - total time for whole calculation: 0.721888 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 8.1201761865122,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.2548,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.2e-05 s\ndl-cifar - total time for whole calculation: 24.2548 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.03464837658534712,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.69,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.69 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0351188458428426,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1521,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.076333 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0672 s\nProcessing elapsed time : 0.0824 s\nStoring    elapsed time : 0.0024 s\nTotal      elapsed time : 0.1521 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.0012124355652982054,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 879.917019,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:31Z\",\"581898677\",\"4325760\",\"879.917019\",\"6.516356\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:35Z\",\"2096755295\",\"2388680\",\"61.046767\",\"0.069469\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:45Z\",\"546687669\",\"802523\",\"936.550998\",\"1.373992\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:49Z\",\"2095262737\",\"620026\",\"61.090195\",\"0.018004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:59Z\",\"948264894\",\"771488\",\"539.933804\",\"0.439517\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:04:05Z\",\"2096010613\",\"867219\",\"61.068401\",\"0.025254\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 6.080077259390817,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.046767,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:31Z\",\"581898677\",\"4325760\",\"879.917019\",\"6.516356\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:35Z\",\"2096755295\",\"2388680\",\"61.046767\",\"0.069469\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:45Z\",\"546687669\",\"802523\",\"936.550998\",\"1.373992\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:49Z\",\"2095262737\",\"620026\",\"61.090195\",\"0.018004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:59Z\",\"948264894\",\"771488\",\"539.933804\",\"0.439517\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:04:05Z\",\"2096010613\",\"867219\",\"61.068401\",\"0.025254\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.004406871112251236,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 941.452691,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:01Z\",\"585427804\",\"3116157\",\"874.593809\",\"4.626694\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:04Z\",\"2096620195\",\"2550409\",\"61.050710\",\"0.074127\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:15Z\",\"543840543\",\"321052\",\"941.452691\",\"0.555613\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:18Z\",\"2097089528\",\"322869\",\"61.036976\",\"0.009302\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:29Z\",\"951903657\",\"567272\",\"537.869711\",\"0.320481\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:34Z\",\"2093331852\",\"408608\",\"61.146542\",\"0.011900\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.570447699786805,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.090195,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:31Z\",\"581898677\",\"4325760\",\"879.917019\",\"6.516356\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:35Z\",\"2096755295\",\"2388680\",\"61.046767\",\"0.069469\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:45Z\",\"546687669\",\"802523\",\"936.550998\",\"1.373992\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:49Z\",\"2095262737\",\"620026\",\"61.090195\",\"0.018004\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:59Z\",\"948264894\",\"771488\",\"539.933804\",\"0.439517\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:04:05Z\",\"2096010613\",\"867219\",\"61.068401\",\"0.025254\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.05549028867288172,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 538.897843,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:46Z\",\"577422927\",\"3453361\",\"886.723761\",\"5.295895\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:49Z\",\"2096921572\",\"2097505\",\"61.041912\",\"0.060989\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:00Z\",\"542661091\",\"372556\",\"943.498993\",\"0.647929\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:04Z\",\"2093284606\",\"745865\",\"61.147926\",\"0.021700\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:14Z\",\"950088296\",\"1085298\",\"538.897843\",\"0.614776\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:20Z\",\"2093846844\",\"186423\",\"61.131501\",\"0.005443\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.0320489745803196,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 61.131501,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:02:46Z\",\"577422927\",\"3453361\",\"886.723761\",\"5.295895\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:02:49Z\",\"2096921572\",\"2097505\",\"61.041912\",\"0.060989\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:00Z\",\"542661091\",\"372556\",\"943.498993\",\"0.647929\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:04Z\",\"2093284606\",\"745865\",\"61.147926\",\"0.021700\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T16:03:14Z\",\"950088296\",\"1085298\",\"538.897843\",\"0.614776\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T16:03:20Z\",\"2093846844\",\"186423\",\"61.131501\",\"0.005443\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.04146053859193293,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "a884df8",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T16:04:16.148164+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 12.232,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.268,12.232,2.76%,11.357,23.159,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.33859680000000003,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 12.345,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),12.380,12.345,3.10%,11.379,70.071,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.38378,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 21.382,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),21.498,21.382,8.00%,20.284,536.363,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.71984,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 22.025,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),22.150,22.025,7.82%,21.110,540.267,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.73213,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 207.267,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),208.485,207.267,3.08%,203.849,765.175,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 6.421338,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 86.254,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),86.993,86.254,1.90%,85.674,150.672,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1.6528669999999999,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.353,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.494,5.353,14.17%,4.882,53.829,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.7784998,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 2.795,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),2.824,2.795,4.91%,0.506,3.192,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.13865840000000001,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 1.946,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),1.953,1.946,11.53%,1.715,61.750,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.22518090000000002,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.448,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.455,1.448,27.23%,1.377,123.350,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.3961965,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 804.791,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),804.292,804.791,0.37%,773.857,812.063,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 2.9758804000000003,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 26.831,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.795,26.831,6.04%,25.072,146.611,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.6184180000000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "value": 29.88,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.969,29.880,5.44%,28.168,161.437,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.6303136000000003,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 274.15,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),275.718,274.150,2.87%,266.062,781.203,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.913106600000001,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "value": 255.613,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),255.750,255.613,1.97%,254.343,743.069,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 5.038275,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.475,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.332,26.475,5.38%,24.583,143.501,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.4166616,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.802,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.856,28.802,3.77%,28.024,126.366,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.0878712,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 247.221,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.431,247.221,1.86%,242.826,656.066,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.602216600000001,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 248.857,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),248.941,248.857,1.77%,246.267,664.922,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.4062557,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.431,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.458,5.431,16.28%,4.782,65.584,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.8885624000000001,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.339,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.342,4.339,11.36%,3.735,48.134,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.49325119999999995,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 1.531,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.531,1.531,6.56%,1.302,2.331,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.10043359999999998,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.097,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.089,1.097,2.55%,1.005,1.165,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0277695,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101505.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.425,14.270,214.52%,13.412,9798.770,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 14.35,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101506.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.491,14.350,164.20%,13.463,7515.842,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 23.794221999999998,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 95034.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.766,14.636,151.06%,13.676,7044.724,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 361.2920756,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 14.636,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),95076.862,95034.000,0.38%,95034.000,101507.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),14.766,14.636,151.06%,13.676,7044.724,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.3055196,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 97528.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98431.808,97528.000,288.20%,96454.000,89806089.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.220,20.441,3784.41%,17.470,277907.104,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 283680.47065599996,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 20.441,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),98431.808,97528.000,288.20%,96454.000,89806089.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),23.220,20.441,3784.41%,17.470,277907.104,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 878.7400019999999,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 5489.082,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),5483.745,5489.082,0.26%,5459.945,5501.316,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 14.257736999999999,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 11123.018,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),11144.032,11123.018,5.36%,10271.678,12127.402,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 597.3201152,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 17630.465,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),18000.663,17630.465,8.00%,15466.159,24085.258,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1440.05304,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 766.551,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),756.819,766.551,7.15%,482.528,1313.318,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.112558500000006,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6075.22,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6068.549,6075.220,0.70%,5988.533,6120.840,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 42.479842999999995,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 6395.786,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),6428.608,6395.786,3.28%,6180.233,6893.579,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 210.85834239999997,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 17915.264,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),18246.663,17915.264,7.46%,15614.867,23562.563,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1361.2010598,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 774.662,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),764.314,774.662,7.19%,440.602,1513.692,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 54.954176600000004,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 29823.733,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),29831.455,29823.733,0.40%,29552.849,30042.303,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 119.32582000000001,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 86926.633,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),86935.002,86926.633,0.40%,86163.836,87469.111,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 347.740008,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 26.512,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.406,26.512,5.86%,24.589,144.695,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.5473916,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 247.664,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),247.926,247.664,1.94%,243.196,689.549,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.8097644,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        }
      ],
      "name": "Baseline_PVC_L0v2",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "130212d",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T15:25:59.888228+00:00"
    },
    {
      "results": [
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "value": 11.83,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.870,11.830,3.85%,11.107,76.830,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 0.456995,
          "name": "api_overhead_benchmark_l0 SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_l0 SubmitKernel in order",
          "value": 11.892,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.954,11.892,12.73%,11.172,479.320,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.5217442,
          "name": "api_overhead_benchmark_l0 SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "value": 23.064,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.238,23.064,10.71%,22.304,790.313,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 2.4887898,
          "name": "api_overhead_benchmark_sycl SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "api_overhead_benchmark_sycl SubmitKernel in order",
          "value": 24.3,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.522,24.300,7.59%,23.516,565.404,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 1.8612197999999998,
          "name": "api_overhead_benchmark_sycl SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "value": 259.087,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),260.553,259.087,3.01%,255.015,932.726,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 7.842645299999999,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "value": 133.433,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueInOrderMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--IsCopyOnly=0",
            "--sourcePlacement=Host",
            "--destinationPlacement=Device",
            "--size=1024",
            "--count=100"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),134.688,133.433,1.85%,132.055,180.367,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2.491728,
          "name": "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration."
        },
        {
          "label": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "value": 5.72,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=QueueMemcpy",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--sourcePlacement=Device",
            "--destinationPlacement=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.797,5.720,9.88%,5.344,34.511,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.5727436,
          "name": "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation."
        },
        {
          "label": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "value": 3.163,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl",
            "--test=StreamMemory",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--type=Triad",
            "--size=10240",
            "--memoryPlacement=Device",
            "--useEvents=0",
            "--contents=Zeros",
            "--multiplier=1",
            "--vectorSize=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.143,3.163,3.56%,0.301,3.412,[CPU],[GB/s]\n",
          "passed": true,
          "unit": "GB/s",
          "explicit_group": "",
          "stddev": 0.1118908,
          "name": "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240",
          "lower_is_better": false,
          "suite": "Compute Benchmarks",
          "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "value": 2.141,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=0",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Device",
            "--dst=Device",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.158,2.141,11.16%,1.949,50.874,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.2408328,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "value": 1.698,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl",
            "--test=ExecImmediateCopyQueue",
            "--csv",
            "--noHeaders",
            "--iterations=100000",
            "--ioq=1",
            "--IsCopyOnly=1",
            "--MeasureCompletionTime=0",
            "--src=Host",
            "--dst=Host",
            "--size=1024"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.715,1.698,6.23%,1.620,11.232,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 0.10684450000000001,
          "name": "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads."
        },
        {
          "label": "miscellaneous_benchmark_sycl VectorSum",
          "value": 860.664,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl",
            "--test=VectorSum",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--numberOfElementsX=512",
            "--numberOfElementsY=256",
            "--numberOfElementsZ=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),860.243,860.664,0.39%,825.109,874.117,[GPU],bw [GB/s]\n",
          "passed": true,
          "unit": "bw GB/s",
          "explicit_group": "",
          "stddev": 3.3549477000000003,
          "name": "miscellaneous_benchmark_sycl VectorSum",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "value": 28.961,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),28.899,28.961,9.16%,27.395,240.365,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 2.6471484000000003,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "value": 306.356,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),307.985,306.356,2.44%,298.747,827.860,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 7.514834,
          "name": "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "value": 26.073,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),26.146,26.073,5.29%,24.309,139.273,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3831234000000001,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "value": 28.818,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),28.882,28.818,4.90%,28.002,144.490,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.415218,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "value": 253.841,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),254.016,253.841,1.84%,249.709,694.416,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 4.6738944,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "value": 249.671,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),249.746,249.671,1.41%,246.993,569.018,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.5214186,
          "name": "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "value": 5.955,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=sycl wgc=256 wgs=256),5.987,5.955,10.28%,5.239,47.802,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.6154635999999999,
          "name": "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "value": 4.268,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=EmptyKernel",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--wgs=256",
            "--wgc=256"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nEmptyKernel(api=l0 wgc=256 wgs=256),4.262,4.268,7.80%,3.707,28.145,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "EmptyKernel 1000 256",
          "stddev": 0.33243599999999995,
          "name": "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "value": 0.662,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.676,0.662,9.28%,0.525,1.234,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.0627328,
          "name": "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "value": 1.051,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0",
            "--test=KernelSwitch",
            "--csv",
            "--noHeaders",
            "--iterations=1000",
            "--count=8",
            "--kernelTime=200",
            "--barrier=0",
            "--hostVisible=0",
            "--ioq=1",
            "--ctrBasedEvents=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.059,1.051,2.34%,0.982,1.120,[GPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "KernelSwitch 8 200",
          "stddev": 0.024780599999999996,
          "name": "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": ""
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "value": 107454.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.706,16.512,158.73%,15.898,8400.945,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 6483.265934399999,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel out of order",
          "value": 16.512,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=0",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),107516.848,107454.000,6.03%,107310.000,2156039.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),16.706,16.512,158.73%,15.898,8400.945,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 26.5174338,
          "name": "api_overhead_benchmark_ur SubmitKernel out of order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "value": 113308.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113380.318,113308.000,3.98%,113308.000,1533889.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.567,17.369,118.71%,16.707,6610.298,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4512.5366564000005,
          "name": "api_overhead_benchmark_ur SubmitKernel in order CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order",
          "value": 17.027,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=0",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),113378.340,113308.000,3.97%,113308.000,1531259.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),17.282,17.027,226.47%,16.395,12382.689,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 39.1385454,
          "name": "api_overhead_benchmark_ur SubmitKernel in order",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "value": 125825.0,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125998.326,125825.000,3.75%,125216.000,1613235.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.748,21.357,102.21%,20.292,7027.068,[CPU],time [us]\n",
          "passed": true,
          "unit": "instr",
          "explicit_group": "SubmitKernel CPU count",
          "stddev": 4724.937225,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion CPU count",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "value": 21.563,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_ur",
            "--test=SubmitKernel",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--DiscardEvents=0",
            "--MeasureCompletion=1",
            "--iterations=100000",
            "--Profiling=0",
            "--NumKernels=10",
            "--KernelExecTime=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),125948.626,125825.000,3.75%,125216.000,1612320.000,[CPU],hw instructions [count]\nSubmitKernel(api=ur Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=1),21.910,21.563,103.40%,20.656,7162.542,[CPU],time [us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SubmitKernel",
          "stddev": 22.65494,
          "name": "api_overhead_benchmark_ur SubmitKernel in order with measure completion",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Uses 10 simple kernels with minimal execution time to isolate API overhead."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 6924.328,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),6972.824,6924.328,1.47%,6883.238,7204.757,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 102.5005128,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "value": 18023.621,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),17643.248,18023.621,9.05%,14879.175,20579.784,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1596.713944,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 49958.004,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),50075.117,49958.004,5.31%,39891.996,58469.709,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 2658.9887126999997,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "value": 1984.611,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=1",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=1 DstUSM=1),2008.378,1984.611,13.49%,1424.099,4790.922,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 270.93019219999996,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:1 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from device to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 7583.219,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=1",
            "--NumOpsPerThread=400",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=1 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),7578.264,7583.219,2.11%,7365.625,7850.351,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 159.9013704,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "value": 17003.24,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=102400",
            "--NumThreads=8",
            "--NumOpsPerThread=100",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=100 NumThreads=8 AllocSize=102400 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),16814.980,17003.240,6.09%,15183.292,18204.160,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1024.032282,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:100, numThreads:8, allocSize:102400 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 100 operations on 102400 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 45299.47,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=8",
            "--NumOpsPerThread=400",
            "--iterations=1000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=400 NumThreads=8 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),45174.224,45299.470,3.10%,37946.335,48945.728,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 1400.400944,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:8, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 8 threads each performing 400 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "value": 1294.756,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=1",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=16",
            "--NumOpsPerThread=10",
            "--iterations=10000",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=10 NumThreads=16 AllocSize=1024 MeasureCompletion=1 UseEvents=1 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),1387.132,1294.756,30.54%,835.780,5520.376,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 423.6301128,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:10, numThreads:16, allocSize:1024 srcUSM:0 dstUSM:1",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 16 threads each performing 10 operations on 1024 bytes from host to device memory with events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 42345.709,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=1",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=1 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),42294.923,42345.709,0.38%,41898.689,42483.888,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 160.7207074,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:1, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 1 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "value": 115640.718,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/multithread_benchmark_ur",
            "--test=MemcpyExecute",
            "--csv",
            "--noHeaders",
            "--Ioq=1",
            "--UseEvents=0",
            "--MeasureCompletion=1",
            "--UseQueuePerThread=1",
            "--AllocSize=1024",
            "--NumThreads=4",
            "--NumOpsPerThread=4096",
            "--iterations=10",
            "--SrcUSM=0",
            "--DstUSM=1"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nMemcpyExecute(api=ur Ioq=1 NumOpsPerThread=4096 NumThreads=4 AllocSize=1024 MeasureCompletion=1 UseEvents=0 UseQueuePerThread=1 SrcUSM=0 DstUSM=1),115449.271,115640.718,0.40%,114276.245,115803.193,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "",
          "stddev": 461.797084,
          "name": "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "value": 33.415,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),33.529,33.415,3.77%,31.550,75.956,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.2640433,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "value": 51.582,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=5",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),51.637,51.582,2.59%,47.767,81.529,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 5",
          "stddev": 1.3373983,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "value": 270.764,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=0",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),271.010,270.764,2.96%,265.091,1029.799,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 8.021896,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "value": 312.175,
          "command": [
            "/home/test-user/ur_bench_workdir/compute-benchmarks-build/bin/graph_api_benchmark_ur",
            "--test=SinKernelGraph",
            "--csv",
            "--noHeaders",
            "--iterations=10000",
            "--numKernels=100",
            "--withGraphs=1",
            "--withCopyOffload=1",
            "--immediateAppendCmdList=0"
          ],
          "env": {},
          "stdout": "TestCase,Mean,Median,StdDev,Min,Max,Type\nSinKernelGraph(api=ur numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),312.533,312.175,1.13%,308.709,534.683,[CPU],[us]\n",
          "passed": true,
          "unit": "\u03bcs",
          "explicit_group": "SinKernelGraph 100",
          "stddev": 3.5316229,
          "name": "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100",
          "lower_is_better": true,
          "suite": "Compute Benchmarks",
          "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution."
        },
        {
          "label": "Velocity-Bench Hashtable",
          "value": 309.843465,
          "command": [
            "/home/test-user/ur_bench_workdir/hashtable/hashtable_sycl",
            "--no-verify"
          ],
          "env": {},
          "stdout": "hashtable - total time for whole calculation: 0.433179 s\n309.843465 million keys/second\n",
          "passed": true,
          "unit": "M keys/sec",
          "explicit_group": "",
          "stddev": 3.790939272577354,
          "name": "Velocity-Bench Hashtable",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Bitcracker",
          "value": 35.3838,
          "command": [
            "/home/test-user/ur_bench_workdir/bitcracker/bitcracker",
            "-f",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt",
            "-d",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt",
            "-b",
            "60000"
          ],
          "env": {},
          "stdout": "\n---------> BitCracker: BitLocker password cracking tool <---------\n\n\n==================================\nRetrieving Info\n==================================\n\nReading hash file \"/home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/img_win8_user_hash.txt\"\n================================================\n                  Attack\n================================================\nType of attack: User Password\nPsw per thread: 1\nmax_num_pswd_per_read: 60000\nDictionary: /home/test-user/ur_bench_workdir/velocity-bench-repo/bitcracker/hash_pass/user_passwords_60000.txt\nMAC Comparison (-m): Yes\n\n\nIter: 1, num passwords read: 60000\nKernel execution:\n\tEffective passwords: 60000\n\tPasswords Range:\n\t\tnpknpByH7N2m3OnLNH1X9DJxLrzIFWk\n\t\t.....\n\t\tdL_7uuf3QCz-c6K3xDu0\n--------------------\n================================================\nBitcracker attack completed\nTotal passwords evaluated: 60000\nPassword not found!\n================================================\ntime to subtract from total: 0.00391978 s\nbitcracker - total time for whole calculation: 35.3838 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.04007695098182857,
          "name": "Velocity-Bench Bitcracker",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords."
        },
        {
          "label": "Velocity-Bench CudaSift",
          "value": 206.646,
          "command": [
            "/home/test-user/ur_bench_workdir/cudaSift/cudaSift"
          ],
          "env": {},
          "stdout": "UNKN: \n\nUNKN: ==================================================\nUNKN: User input parameters:\nUNKN: Trace:                             ../../inputData\nUNKN: ==================================================\nUNKN: \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1253 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1201 1263 32.6093% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1266 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1219 1253 33.098% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1258 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1272 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1210 1262 32.8537% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1268 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1231 1261 33.4238% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1088 1263 29.5411% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1106 1266 30.0299% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1142 1269 31.0073% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1102 1264 29.9213% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1237 1272 33.5868% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1184 1273 32.1477% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1233 1266 33.4781% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1241 1277 33.6954% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1255 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1108 1262 30.0842% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1028 1261 27.912% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1235 1270 33.5324% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1077 1262 29.2425% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1255 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1157 1251 31.4146% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1222 1255 33.1795% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1119 1260 30.3828% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1263 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1255 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1221 1257 33.1523% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1103 1260 29.9484% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1093 1264 29.6769% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1217 1259 33.0437% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1225 1260 33.2609% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1216 1253 33.0166% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1264 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1144 1268 31.0616% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1077 1282 29.2425% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1220 1260 33.1252% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1218 1255 33.0709% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1229 1262 33.3695% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1226 1262 33.2881% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1268 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1227 1262 33.3152% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1224 1256 33.2338% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1164 1250 31.6047% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1234 1267 33.5053% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1114 1253 30.2471% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1215 1268 32.9894% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1230 1263 33.3967% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nImage size = (1920,1080)\nInitializing data...\nNumber of original features: 3683 3933\nNumber of matching features: 1232 1264 33.451% 1 2\n\nPerforming data verification \nData verification is SUCCESSFUL. \n\nAvg workload time = 206.646 ms\n\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 10.213038186553497,
          "name": "Velocity-Bench CudaSift",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds."
        },
        {
          "label": "Velocity-Bench Easywave",
          "value": 240.0,
          "command": [
            "/home/test-user/ur_bench_workdir/easywave/easyWave_sycl",
            "-grid",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/e2Asean.grd",
            "-source",
            "/home/test-user/ur_bench_workdir/data/easywave/examples/BengkuluSept2007.flt",
            "-time",
            "120"
          ],
          "env": {},
          "stdout": "MAIN: Starting SYCL main program\nMAIN: Attempting to clean up previous eWave tsunami files\nMAIN: Clean up completed\nSYCL: SYCL Queue initialization successful \nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nMAIN: Program successfully completed\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 1.224744871391589,
          "name": "Velocity-Bench Easywave",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data."
        },
        {
          "label": "Velocity-Bench QuickSilver",
          "value": 118.23,
          "command": [
            "/home/test-user/ur_bench_workdir/QuickSilver/qs",
            "-i",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp"
          ],
          "env": {
            "QS_DEVICE": "GPU"
          },
          "stdout": "Copyright (c) 2016\nLawrence Livermore National Security, LLC\nAll Rights Reserved\nQuicksilver Version     : \nQuicksilver Git Hash    : \nMPI Version             : 3.0\nNumber of MPI ranks     : 1\nNumber of OpenMP Threads: 1\nNumber of OpenMP CPUs   : 1\n\nLoading params\nFinished loading params\nSimulation:\n   dt: 1e-08\n   fMax: 0.1\n   inputFile: /home/test-user/ur_bench_workdir/velocity-bench-repo/QuickSilver/Examples/AllScattering/scatteringOnly.inp\n   energySpectrum: \n   boundaryCondition: octant\n   loadBalance: 1\n   cycleTimers: 0\n   debugThreads: 0\n   lx: 100\n   ly: 100\n   lz: 100\n   nParticles: 10000000\n   batchSize: 0\n   nBatches: 10\n   nSteps: 10\n   nx: 10\n   ny: 10\n   nz: 10\n   seed: 1029384756\n   xDom: 0\n   yDom: 0\n   zDom: 0\n   eMax: 20\n   eMin: 1e-09\n   nGroups: 230\n   lowWeightCutoff: 0.001\n   bTally: 1\n   fTally: 1\n   cTally: 1\n   coralBenchmark: 0\n   crossSectionsOut:\n\nGeometry:\n   material: sourceMaterial\n   shape: brick\n   xMax: 100\n   xMin: 0\n   yMax: 100\n   yMin: 0\n   zMax: 100\n   zMin: 0\n\nMaterial:\n   name: sourceMaterial\n   mass: 1000\n   nIsotopes: 10\n   nReactions: 9\n   sourceRate: 1e+10\n   totalCrossSection: 0.1\n   absorptionCrossSection: flat\n   fissionCrossSection: flat\n   scatteringCrossSection: flat\n   absorptionCrossSectionRatio: 0\n   fissionCrossSectionRatio: 0\n   scatteringCrossSectionRatio: 1\n\nCrossSection:\n   name: flat\n   A: 0\n   B: 0\n   C: 0\n   D: 0\n   E: 1\n   nuBar: 2.4\nsetting GPU\nsetting parameters\nBuilding partition 0\nBuilding partition 1\nBuilding partition 2\nBuilding partition 3\nBuilding MC_Domain 0\nBuilding MC_Domain 1\nBuilding MC_Domain 2\nBuilding MC_Domain 3\nStarting Consistency Check\nFinished Consistency Check\nFinished initMesh\nStarted copyMaterialDatabase_device\nFinished copyMaterialDatabase_device\nFinished copyNuclearData_device\nFinished copyDomainDevice\n   cycle  start  source     rr  split     absorb    scatter fission    produce    collisn   escape     census    num_seg   scalar_flux      cycleInit  cycleTracking  cycleFinalize\n       0      0 1000000      0 9000000          0   18533189       0          0   18533189  1151780    8848220   55527935  1.854923e+09   3.662230e-01   6.062800e-01   0.000000e+00\n       1 8848220 1000000      0 151478          0   34281997       0          0   34281997  1664159    8335539   94633679  5.047651e+09   3.548990e-01   7.476050e-01   0.000000e+00\n       2 8335539 1000000      0 663717          0   34354432       0          0   34354432  1366771    8632485   95010375  7.705930e+09   3.418510e-01   7.618970e-01   0.000000e+00\n       3 8632485 1000000      0 367978          0   34302727       0          0   34302727  1242216    8758247   94953591  9.992076e+09   3.731050e-01   8.155130e-01   0.000000e+00\n       4 8758247 1000000      0 242076          0   34141236       0          0   34141236  1168452    8831871   94599337  1.199834e+10   3.439130e-01   7.887740e-01   0.000000e+00\n       5 8831871 1000000      0 168070          0   33948724       0          0   33948724  1121156    8878785   94148236  1.377636e+10   3.496360e-01   7.636090e-01   0.000000e+00\n       6 8878785 1000000      0 120572          0   33760567       0          0   33760567  1089103    8910254   93689264  1.535668e+10   3.449440e-01   7.615650e-01   0.000000e+00\n       7 8910254 1000000      0  89810          0   33552179       0          0   33552179  1065203    8934861   93216931  1.676993e+10   3.494920e-01   7.974620e-01   0.000000e+00\n       8 8934861 1000000      0  65491          0   33384605       0          0   33384605  1047720    8952632   92768273  1.804559e+10   3.461760e-01   8.031800e-01   0.000000e+00\n       9 8952632 1000000      0  47165          0   33198494       0          0   33198494  1033968    8965829   92324678  1.920208e+10   3.496380e-01   7.738110e-01   0.000000e+00\n\nTimer                       Cumulative   Cumulative   Cumulative   Cumulative   Cumulative   Cumulative\nName                            number    microSecs    microSecs    microSecs    microSecs   Efficiency\n                              of calls          min          avg          max       stddev       Rating\nmain                                 1    1.114e+07    1.114e+07    1.114e+07    0.000e+00       100.00\ncycleInit                           10    3.520e+06    3.520e+06    3.520e+06    0.000e+00       100.00\ncycleTracking                       10    7.620e+06    7.620e+06    7.620e+06    0.000e+00       100.00\ncycleTracking_Kernel               104    4.982e+06    4.982e+06    4.982e+06    0.000e+00       100.00\ncycleTracking_MPI                  117    2.005e+05    2.005e+05    2.005e+05    0.000e+00       100.00\ncycleTracking_Test_Done              0    0.000e+00    0.000e+00    0.000e+00    0.000e+00         0.00\ncycleFinalize                       20    4.210e+02    4.210e+02    4.210e+02    0.000e+00       100.00\nFigure Of Merit                 118.23 [Num Mega Segments / Cycle Tracking Time]\n",
          "passed": true,
          "unit": "MMS/CTT",
          "explicit_group": "",
          "stddev": 3.606415579676496,
          "name": "Velocity-Bench QuickSilver",
          "lower_is_better": false,
          "suite": "Velocity Bench",
          "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance."
        },
        {
          "label": "Velocity-Bench Sobel Filter",
          "value": 719.147,
          "command": [
            "/home/test-user/ur_bench_workdir/sobel_filter/sobel_filter",
            "-i",
            "/home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png",
            "-n",
            "5"
          ],
          "env": {
            "OPENCV_IO_MAX_IMAGE_PIXELS": "1677721600"
          },
          "stdout": "SYMN: Welcome to the SYCL version of Sobel filter workload.\nSYMN: Input image file: /home/test-user/ur_bench_workdir/data/sobel_filter/sobel_filter_data/silverfalls_32Kx32K.png\nSYMN: Launching SYCL kernel with # of iterations: 5\ntime to subtract from total: 7.49345 s\nsobelfilter - total time for whole calculation: 0.719147 s\n",
          "passed": true,
          "unit": "ms",
          "explicit_group": "",
          "stddev": 12.414760779008173,
          "name": "Velocity-Bench Sobel Filter",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter."
        },
        {
          "label": "Velocity-Bench dl-cifar",
          "value": 24.2248,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-cifar/dl-cifar_sycl"
          ],
          "env": {},
          "stdout": "\n\t\tWelcome to DL-CIFAR workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                         notrace\nWL PARAMS: DL NW size type:               WORKLOAD_DEFAULT_SIZE\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndataFileReadTimer->getTotalOpTime(): 8.4e-05 s\ndl-cifar - total time for whole calculation: 24.2248 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.10270683034735244,
          "name": "Velocity-Bench dl-cifar",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time."
        },
        {
          "label": "Velocity-Bench dl-mnist",
          "value": 2.71,
          "command": [
            "/home/test-user/ur_bench_workdir/dl-mnist/dl-mnist-sycl",
            "-conv_algo",
            "ONEDNN_AUTO"
          ],
          "env": {
            "NEOReadDebugKeys": "1",
            "DisableScratchPages": "0"
          },
          "stdout": "\n\t\tWelcome to DL-MNIST workload: SYCL version.\n\n=======================================================================\nSYCL: SYCL Queue initialization successful\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\nSYCL: \t Using SYCL device         : Intel(R) Data Center GPU Max 1100 (Driver version 1.6.32567)\nSYCL: \t Platform                  : Intel(R) oneAPI Unified Runtime over Level-Zero\n=======================================================================\n\nWL PARAMS: \n\nWL PARAMS: ==================================================\nWL PARAMS: User input parameters:\nWL PARAMS: Trace:                             notrace\nWL PARAMS: Tensor management policy:          per_layer\nWL PARAMS: Convolution algorithm:             ONEDNN_AUTO\nWL PARAMS: Dataset reader format:             NCHW\nWL PARAMS: Dry run:                           YES\nWL PARAMS: OneDNN Conv PD memory format:      ONEDNN_CONVPD_ANY\nWL PARAMS: No of iterations for inference:    400\nWL PARAMS: ==================================================\nWL PARAMS: \n\ndl-mnist - total time for whole calculation: 2.71 s\n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.020000000000000018,
          "name": "Velocity-Bench dl-mnist",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time."
        },
        {
          "label": "Velocity-Bench svm",
          "value": 0.1396,
          "command": [
            "/home/test-user/ur_bench_workdir/svm/svm_sycl",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a9a",
            "/home/test-user/ur_bench_workdir/velocity-bench-repo/svm/SYCL/a.m"
          ],
          "env": {},
          "stdout": "Number of args 3\nUsing cuSVM (Carpenter)...\n\nBuffering input text file (6989624 B).\nLoad Done \nStarting Training \n_C 1.000000\nWorkgroup Size: 1024\nnbrCtas 80 \nelemsPerCta 1248 \nthreadsPerCta 128 \nTotal run time: 0.068488 seconds\nIter:100\nM:97683\nN:123\nTrain done. Calulate Vector counts \nTraining done \n\nLoading    elapsed time : 0.0632 s\nProcessing elapsed time : 0.0742 s\nStoring    elapsed time : 0.0022 s\nTotal      elapsed time : 0.1396 s\nResult's are correct: 0.0551 \n",
          "passed": true,
          "unit": "s",
          "explicit_group": "",
          "stddev": 0.006474892336497247,
          "name": "Velocity-Bench svm",
          "lower_is_better": true,
          "suite": "Velocity Bench",
          "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 128",
          "value": 879.601923,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:06Z\",\"582095472\",\"3200014\",\"879.601923\",\"4.803845\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:09Z\",\"2100077943\",\"2403130\",\"60.950182\",\"0.069654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:20Z\",\"541272840\",\"387671\",\"945.918901\",\"0.677061\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:23Z\",\"2096857911\",\"951180\",\"61.043727\",\"0.027616\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:34Z\",\"953098038\",\"1646412\",\"537.196805\",\"0.926786\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:40Z\",\"2098370756\",\"1221276\",\"60.999723\",\"0.035452\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 8.22756049421834,
          "name": "llama.cpp Prompt Processing Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 128",
          "value": 61.023105,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:51Z\",\"577403593\",\"3599481\",\"886.755480\",\"5.487524\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:55Z\",\"2097568757\",\"2620018\",\"61.023105\",\"0.076116\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:02:05Z\",\"543642846\",\"534395\",\"941.795515\",\"0.924647\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:02:08Z\",\"2094523713\",\"256983\",\"61.111746\",\"0.007439\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:02:19Z\",\"949841457\",\"1436445\",\"539.038314\",\"0.815826\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:02:25Z\",\"2091430538\",\"419952\",\"61.202130\",\"0.012216\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.10069233691299452,
          "name": "llama.cpp Text Generation Batched 128",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 256",
          "value": 941.795515,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:51Z\",\"577403593\",\"3599481\",\"886.755480\",\"5.487524\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:55Z\",\"2097568757\",\"2620018\",\"61.023105\",\"0.076116\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:02:05Z\",\"543642846\",\"534395\",\"941.795515\",\"0.924647\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:02:08Z\",\"2094523713\",\"256983\",\"61.111746\",\"0.007439\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:02:19Z\",\"949841457\",\"1436445\",\"539.038314\",\"0.815826\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:02:25Z\",\"2091430538\",\"419952\",\"61.202130\",\"0.012216\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 3.3614709360137836,
          "name": "llama.cpp Prompt Processing Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 256",
          "value": 61.062278,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:00:19Z\",\"588275491\",\"1527372\",\"870.345221\",\"2.260681\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:00:24Z\",\"2093243105\",\"2676493\",\"61.149212\",\"0.078052\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:00:35Z\",\"545115908\",\"1874355\",\"939.258651\",\"3.222854\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:00:38Z\",\"2096220581\",\"438321\",\"61.062278\",\"0.012734\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:00:48Z\",\"954633296\",\"1362950\",\"536.332471\",\"0.765419\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:00:54Z\",\"2098725141\",\"1128771\",\"60.989420\",\"0.032740\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.035161074561698126,
          "name": "llama.cpp Text Generation Batched 256",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Prompt Processing Batched 512",
          "value": 537.196805,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:06Z\",\"582095472\",\"3200014\",\"879.601923\",\"4.803845\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:09Z\",\"2100077943\",\"2403130\",\"60.950182\",\"0.069654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:20Z\",\"541272840\",\"387671\",\"945.918901\",\"0.677061\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:23Z\",\"2096857911\",\"951180\",\"61.043727\",\"0.027616\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:34Z\",\"953098038\",\"1646412\",\"537.196805\",\"0.926786\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:40Z\",\"2098370756\",\"1221276\",\"60.999723\",\"0.035452\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 1.3820163410325301,
          "name": "llama.cpp Prompt Processing Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        },
        {
          "label": "llama.cpp Text Generation Batched 512",
          "value": 60.999723,
          "command": [
            "/home/test-user/ur_bench_workdir/llamacpp-build/bin/llama-bench",
            "--output",
            "csv",
            "-n",
            "128",
            "-p",
            "512",
            "-b",
            "128,256,512",
            "--numa",
            "isolate",
            "-t",
            "56",
            "--model",
            "/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf"
          ],
          "env": {},
          "stdout": "build_commit,build_number,cuda,vulkan,kompute,metal,sycl,rpc,gpu_blas,blas,cpu_info,gpu_info,model_filename,model_type,model_size,model_n_params,n_batch,n_ubatch,n_threads,cpu_mask,cpu_strict,poll,type_k,type_v,n_gpu_layers,split_mode,main_gpu,no_kv_offload,flash_attn,tensor_split,use_mmap,embeddings,n_prompt,n_gen,test_time,avg_ns,stddev_ns,avg_ts,stddev_ts\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:06Z\",\"582095472\",\"3200014\",\"879.601923\",\"4.803845\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"128\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:09Z\",\"2100077943\",\"2403130\",\"60.950182\",\"0.069654\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:20Z\",\"541272840\",\"387671\",\"945.918901\",\"0.677061\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"256\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:23Z\",\"2096857911\",\"951180\",\"61.043727\",\"0.027616\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"512\",\"0\",\"2025-03-13T15:01:34Z\",\"953098038\",\"1646412\",\"537.196805\",\"0.926786\"\n\"1ee9eea0\",\"4073\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\",\"INTEL(R) XEON(R) PLATINUM 8580\",\"Intel(R) Data Center GPU Max 1100\",\"/home/test-user/ur_bench_workdir/models/Phi-3-mini-4k-instruct-q4.gguf\",\"phi3 3B Q4_K - Medium\",\"2392493568\",\"3821079552\",\"512\",\"512\",\"56\",\"0x0\",\"0\",\"50\",\"f16\",\"f16\",\"99\",\"layer\",\"0\",\"0\",\"0\",\"0.00\",\"1\",\"0\",\"0\",\"128\",\"2025-03-13T15:01:40Z\",\"2098370756\",\"1221276\",\"60.999723\",\"0.035452\"\n",
          "passed": true,
          "unit": "token/s",
          "explicit_group": "",
          "stddev": 0.11994463275333542,
          "name": "llama.cpp Text Generation Batched 512",
          "lower_is_better": false,
          "suite": "llama.cpp bench",
          "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration."
        }
      ],
      "name": "Baseline_PVC_L0",
      "hostname": "gkdse-pre-dnp-06",
      "git_hash": "130212d",
      "github_repo": "intel/llvm",
      "date": "2025-03-13T15:02:35.798154+00:00"
    }
  ],
  "metadata": {
    "SubmitKernel": {
      "type": "group",
      "description": "Measures CPU time overhead of submitting kernels through different APIs.",
      "notes": "Each layer builds on top of the previous layer, adding functionality and overhead.\nThe first layer is the Level Zero API, the second is the Unified Runtime API, and the third is the SYCL API.\nThe UR v2 adapter noticeably reduces UR layer overhead, also improving SYCL performance.\nWork is ongoing to reduce the overhead of the SYCL API\n",
      "unstable": null
    },
    "SinKernelGraph": {
      "type": "group",
      "description": null,
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "api_overhead_benchmark_sycl SubmitKernel out of order": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. ",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_sycl SubmitKernel out of order with measure completion": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting out-of-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. ",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_sycl SubmitKernel in order": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. ",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_sycl SubmitKernel in order with measure completion": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting in-order kernels through SYCL API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. ",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_l0 SubmitKernel out of order": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_l0 SubmitKernel out of order with measure completion": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_l0 SubmitKernel in order": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_l0 SubmitKernel in order with measure completion": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting in-order kernels through Level Zero API. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.  Uses immediate command lists",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_ur SubmitKernel out of order": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. ",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_ur SubmitKernel out of order with measure completion": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting out-of-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. ",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_ur SubmitKernel in order": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, excluding kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. ",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_ur SubmitKernel in order with measure completion": {
      "type": "benchmark",
      "description": "Measures CPU time overhead of submitting in-order kernels through Unified Runtime API, including kernel completion time. Runs 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time. ",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:5": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_sycl SinKernelGraph graphs:1, numKernels:100": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5": {
      "type": "benchmark",
      "description": "Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100": {
      "type": "benchmark",
      "description": "Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5": {
      "type": "benchmark",
      "description": "Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100": {
      "type": "benchmark",
      "description": "Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:5": {
      "type": "benchmark",
      "description": "Measures UR performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_ur SinKernelGraph graphs:0, numKernels:100": {
      "type": "benchmark",
      "description": "Measures UR performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:5": {
      "type": "benchmark",
      "description": "Measures UR performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "graph_api_benchmark_ur SinKernelGraph graphs:1, numKernels:100": {
      "type": "benchmark",
      "description": "Measures UR performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": "This benchmark combines both eager and graph execution, and may not be representative of real use cases."
    },
    "ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256": {
      "type": "benchmark",
      "description": "",
      "notes": null,
      "unstable": null
    },
    "ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200": {
      "type": "benchmark",
      "description": "",
      "notes": null,
      "unstable": null
    },
    "ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256": {
      "type": "benchmark",
      "description": "",
      "notes": null,
      "unstable": null
    },
    "ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200": {
      "type": "benchmark",
      "description": "",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 0": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 0 measureCompletion 1": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 0": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 0 measureCompletion 1": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 0": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 0 measureCompletion 1": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 0": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:4 ioq 1 measureCompletion 1": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 4 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 0": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:10 ioq 1 measureCompletion 1": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 10 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 0": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "graph_api_benchmark_sycl SubmitGraph numKernels:32 ioq 1 measureCompletion 1": {
      "type": "benchmark",
      "description": "Measures SYCL performance when executing 32 trivial kernels using graphs. Tests overhead and benefits of graph-based execution.",
      "notes": null,
      "unstable": null
    },
    "memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024": {
      "type": "benchmark",
      "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration.",
      "notes": null,
      "unstable": null
    },
    "memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024": {
      "type": "benchmark",
      "description": "Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration.",
      "notes": null,
      "unstable": null
    },
    "memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024": {
      "type": "benchmark",
      "description": "Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation.",
      "notes": null,
      "unstable": null
    },
    "memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240": {
      "type": "benchmark",
      "description": "Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance.",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024": {
      "type": "benchmark",
      "description": "Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads.",
      "notes": null,
      "unstable": null
    },
    "api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024": {
      "type": "benchmark",
      "description": "Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads.",
      "notes": null,
      "unstable": null
    },
    "miscellaneous_benchmark_sycl VectorSum": {
      "type": "benchmark",
      "description": "Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL.",
      "notes": null,
      "unstable": null
    },
    "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:1 dstUSM:1": {
      "type": "benchmark",
      "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from device to device memory with events.",
      "notes": null,
      "unstable": null
    },
    "multithread_benchmark_ur MemcpyExecute opsPerThread:400, numThreads:1, allocSize:102400 srcUSM:0 dstUSM:1": {
      "type": "benchmark",
      "description": "Measures multithreaded memory copy performance with 1 threads each performing 400 operations on 102400 bytes from host to device memory with events.",
      "notes": null,
      "unstable": null
    },
    "multithread_benchmark_ur MemcpyExecute opsPerThread:4096, numThreads:4, allocSize:1024 srcUSM:0 dstUSM:1 without events": {
      "type": "benchmark",
      "description": "Measures multithreaded memory copy performance with 4 threads each performing 4096 operations on 1024 bytes from host to device memory without events.",
      "notes": null,
      "unstable": null
    },
    "Velocity-Bench Hashtable": {
      "type": "benchmark",
      "description": "Measures hash table search performance using an efficient lock-free algorithm with linear probing. Reports throughput in millions of keys processed per second. Higher values indicate better performance.",
      "notes": null,
      "unstable": null
    },
    "Velocity-Bench Bitcracker": {
      "type": "benchmark",
      "description": "Password-cracking application for BitLocker-encrypted memory units. Uses dictionary attack to find user or recovery passwords. Measures total time required to process 60000 passwords.",
      "notes": null,
      "unstable": null
    },
    "Velocity-Bench CudaSift": {
      "type": "benchmark",
      "description": "Implementation of the SIFT (Scale Invariant Feature Transform) algorithm for detecting, describing, and matching local features in images. Measures average processing time in milliseconds.",
      "notes": null,
      "unstable": null
    },
    "Velocity-Bench Easywave": {
      "type": "benchmark",
      "description": "A tsunami wave simulator used for researching tsunami generation and wave propagation. Measures the elapsed time in milliseconds to simulate a specified tsunami event based on real-world data.",
      "notes": null,
      "unstable": null
    },
    "Velocity-Bench QuickSilver": {
      "type": "benchmark",
      "description": "Solves a simplified dynamic Monte Carlo particle-transport problem used in HPC. Replicates memory access patterns, communication patterns, and branching of Mercury workloads. Reports a figure of merit in MMS/CTT where higher values indicate better performance.",
      "notes": null,
      "unstable": null
    },
    "Velocity-Bench Sobel Filter": {
      "type": "benchmark",
      "description": "Popular RGB-to-grayscale image conversion technique that applies a gaussian filter to reduce edge artifacts. Processes a large 32K x 32K image and measures the time required to apply the filter.",
      "notes": null,
      "unstable": null
    },
    "Velocity-Bench dl-cifar": {
      "type": "benchmark",
      "description": "Deep learning image classification workload based on the CIFAR-10 dataset of 60,000 32x32 color images in 10 classes. Uses neural networks to classify input images and measures total calculation time.",
      "notes": null,
      "unstable": null
    },
    "Velocity-Bench dl-mnist": {
      "type": "benchmark",
      "description": "Digit recognition based on the MNIST database, one of the oldest and most popular databases of handwritten digits. Uses neural networks to identify digits and measures total calculation time.",
      "notes": null,
      "unstable": null
    },
    "Velocity-Bench svm": {
      "type": "benchmark",
      "description": "Implementation of Support Vector Machine, a popular classical machine learning technique. Uses supervised learning models with associated algorithms to analyze data for classification and regression analysis. Measures total elapsed time.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench IndependentDAGTaskThroughput_multi": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench DAGTaskThroughput_multi": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench HostDeviceBandwidth_multi": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench LocalMem_multi": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench ScalarProduct_multi": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench Pattern_SegmentedReduction_multi": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench USM_Allocation_latency_multi": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench VectorAddition_multi": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench 2mm": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench 3mm": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench Atax": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench Bicg": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench Kmeans": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench LinearRegressionCoeff": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench MolecularDynamics": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "SYCL-Bench sf_16": {
      "type": "benchmark",
      "description": "No description provided.",
      "notes": null,
      "unstable": null
    },
    "llama.cpp": {
      "type": "benchmark",
      "description": "Performance testing tool for llama.cpp that measures LLM inference speed in tokens per second. Runs both prompt processing (initial context processing) and text generation benchmarks with different batch sizes. Higher values indicate better performance. Uses the Phi-3-mini-4k-instruct quantized model and leverages SYCL with oneDNN for acceleration.",
      "notes": null,
      "unstable": null
    },
    "Foo Group": {
      "type": "group",
      "description": "This is a test benchmark for Foo Group.",
      "notes": "This is a test note for Foo Group.\nLook, multiple lines!",
      "unstable": null
    },
    "Bar Group": {
      "type": "group",
      "description": "This is a test benchmark for Bar Group.",
      "notes": null,
      "unstable": "This is an unstable note for Bar Group."
    },
    "Memory Bandwidth 1": {
      "type": "benchmark",
      "description": "This is a test benchmark for Memory Bandwidth 1.",
      "notes": null,
      "unstable": null
    },
    "Memory Bandwidth 2": {
      "type": "benchmark",
      "description": "This is a test benchmark for Memory Bandwidth 2.",
      "notes": null,
      "unstable": null
    },
    "Memory Bandwidth 3": {
      "type": "benchmark",
      "description": "This is a test benchmark for Memory Bandwidth 3.",
      "notes": null,
      "unstable": null
    },
    "Memory Bandwidth 4": {
      "type": "benchmark",
      "description": "This is a test benchmark for Memory Bandwidth 4.",
      "notes": null,
      "unstable": null
    },
    "Memory Bandwidth 5": {
      "type": "benchmark",
      "description": "This is a test benchmark for Memory Bandwidth 5.",
      "notes": null,
      "unstable": null
    },
    "Memory Bandwidth 6": {
      "type": "benchmark",
      "description": "This is a test benchmark for Memory Bandwidth 6.",
      "notes": null,
      "unstable": null
    },
    "Latency 1": {
      "type": "benchmark",
      "description": "This is a test benchmark for Latency 1.",
      "notes": "A Latency test note!",
      "unstable": null
    },
    "Latency 2": {
      "type": "benchmark",
      "description": "This is a test benchmark for Latency 2.",
      "notes": "A Latency test note!",
      "unstable": null
    },
    "Latency 3": {
      "type": "benchmark",
      "description": "This is a test benchmark for Latency 3.",
      "notes": "A Latency test note!",
      "unstable": null
    },
    "Latency 4": {
      "type": "benchmark",
      "description": "This is a test benchmark for Latency 4.",
      "notes": "A Latency test note!",
      "unstable": null
    },
    "Latency 5": {
      "type": "benchmark",
      "description": "This is a test benchmark for Latency 5.",
      "notes": "A Latency test note!",
      "unstable": null
    },
    "Latency 6": {
      "type": "benchmark",
      "description": "This is a test benchmark for Latency 6.",
      "notes": "A Latency test note!",
      "unstable": null
    },
    "Throughput 1": {
      "type": "benchmark",
      "description": "This is a test benchmark for Throughput 1.",
      "notes": null,
      "unstable": null
    },
    "Throughput 2": {
      "type": "benchmark",
      "description": "This is a test benchmark for Throughput 2.",
      "notes": null,
      "unstable": null
    },
    "Throughput 3": {
      "type": "benchmark",
      "description": "This is a test benchmark for Throughput 3.",
      "notes": null,
      "unstable": null
    },
    "Throughput 4": {
      "type": "benchmark",
      "description": "This is a test benchmark for Throughput 4.",
      "notes": null,
      "unstable": null
    },
    "Throughput 5": {
      "type": "benchmark",
      "description": "This is a test benchmark for Throughput 5.",
      "notes": null,
      "unstable": null
    },
    "Throughput 6": {
      "type": "benchmark",
      "description": "This is a test benchmark for Throughput 6.",
      "notes": null,
      "unstable": null
    },
    "FLOPS 1": {
      "type": "benchmark",
      "description": "This is a test benchmark for FLOPS 1.",
      "notes": null,
      "unstable": "Unstable FLOPS test!"
    },
    "FLOPS 2": {
      "type": "benchmark",
      "description": "This is a test benchmark for FLOPS 2.",
      "notes": null,
      "unstable": "Unstable FLOPS test!"
    },
    "FLOPS 3": {
      "type": "benchmark",
      "description": "This is a test benchmark for FLOPS 3.",
      "notes": null,
      "unstable": "Unstable FLOPS test!"
    },
    "FLOPS 4": {
      "type": "benchmark",
      "description": "This is a test benchmark for FLOPS 4.",
      "notes": null,
      "unstable": "Unstable FLOPS test!"
    },
    "FLOPS 5": {
      "type": "benchmark",
      "description": "This is a test benchmark for FLOPS 5.",
      "notes": null,
      "unstable": "Unstable FLOPS test!"
    },
    "FLOPS 6": {
      "type": "benchmark",
      "description": "This is a test benchmark for FLOPS 6.",
      "notes": null,
      "unstable": "Unstable FLOPS test!"
    },
    "Cache Miss Rate 1": {
      "type": "benchmark",
      "description": "This is a test benchmark for Cache Miss Rate 1.",
      "notes": "Test Note",
      "unstable": "And another note!"
    },
    "Cache Miss Rate 2": {
      "type": "benchmark",
      "description": "This is a test benchmark for Cache Miss Rate 2.",
      "notes": "Test Note",
      "unstable": "And another note!"
    },
    "Cache Miss Rate 3": {
      "type": "benchmark",
      "description": "This is a test benchmark for Cache Miss Rate 3.",
      "notes": "Test Note",
      "unstable": "And another note!"
    },
    "Cache Miss Rate 4": {
      "type": "benchmark",
      "description": "This is a test benchmark for Cache Miss Rate 4.",
      "notes": "Test Note",
      "unstable": "And another note!"
    },
    "Cache Miss Rate 5": {
      "type": "benchmark",
      "description": "This is a test benchmark for Cache Miss Rate 5.",
      "notes": "Test Note",
      "unstable": "And another note!"
    },
    "Cache Miss Rate 6": {
      "type": "benchmark",
      "description": "This is a test benchmark for Cache Miss Rate 6.",
      "notes": "Test Note",
      "unstable": "And another note!"
    }
  },
  "defaultCompareNames": [
    "Baseline_PVC_L0v2"
  ]
}